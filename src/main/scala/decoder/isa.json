{
    "tdi": {
        "mnemonic": "tdi",
        "formatted_mnemonic": "tdi",
        "opcode": "000010 ..... ..... ..... ..... ......",
        "formatted_opcode": "000010--------------------------",
        "instruction_format": "D",
        "full_name": "Trap Doubleword Immediate"
    },
    "twi": {
        "mnemonic": "twi",
        "formatted_mnemonic": "twi",
        "opcode": "000011 ..... ..... ..... ..... ......",
        "formatted_opcode": "000011--------------------------",
        "instruction_format": "D",
        "full_name": "Trap Word Immediate"
    },
    "vaddubm": {
        "mnemonic": "vaddubm",
        "formatted_mnemonic": "vaddubm",
        "opcode": "000100 ..... ..... ..... 00000 000000",
        "formatted_opcode": "000100---------------00000000000",
        "instruction_format": "VX",
        "full_name": "Vector Add Unsigned Byte Modulo"
    },
    "vadduhm": {
        "mnemonic": "vadduhm",
        "formatted_mnemonic": "vadduhm",
        "opcode": "000100 ..... ..... ..... 00001 000000",
        "formatted_opcode": "000100---------------00001000000",
        "instruction_format": "VX",
        "full_name": "Vector Add Unsigned Halfword Modulo"
    },
    "vadduwm": {
        "mnemonic": "vadduwm",
        "formatted_mnemonic": "vadduwm",
        "opcode": "000100 ..... ..... ..... 00010 000000",
        "formatted_opcode": "000100---------------00010000000",
        "instruction_format": "VX",
        "full_name": "Vector Add Unsigned Word Modulo"
    },
    "vaddudm": {
        "mnemonic": "vaddudm",
        "formatted_mnemonic": "vaddudm",
        "opcode": "000100 ..... ..... ..... 00011 000000",
        "formatted_opcode": "000100---------------00011000000",
        "instruction_format": "VX",
        "full_name": "Vector Add Unsigned Doubleword Modulo"
    },
    "vadduqm": {
        "mnemonic": "vadduqm",
        "formatted_mnemonic": "vadduqm",
        "opcode": "000100 ..... ..... ..... 00100 000000",
        "formatted_opcode": "000100---------------00100000000",
        "instruction_format": "VX",
        "full_name": "Vector Add Unsigned Quadword Modulo"
    },
    "vaddcuq": {
        "mnemonic": "vaddcuq",
        "formatted_mnemonic": "vaddcuq",
        "opcode": "000100 ..... ..... ..... 00101 000000",
        "formatted_opcode": "000100---------------00101000000",
        "instruction_format": "VX",
        "full_name": "Vector Add & write Carry Unsigned Quadword"
    },
    "vaddcuw": {
        "mnemonic": "vaddcuw",
        "formatted_mnemonic": "vaddcuw",
        "opcode": "000100 ..... ..... ..... 00110 000000",
        "formatted_opcode": "000100---------------00110000000",
        "instruction_format": "VX",
        "full_name": "Vector Add & Write Carry-Out Unsigned Word"
    },
    "vaddubs": {
        "mnemonic": "vaddubs",
        "formatted_mnemonic": "vaddubs",
        "opcode": "000100 ..... ..... ..... 01000 000000",
        "formatted_opcode": "000100---------------01000000000",
        "instruction_format": "VX",
        "full_name": "Vector Add Unsigned Byte Saturate"
    },
    "vadduhs": {
        "mnemonic": "vadduhs",
        "formatted_mnemonic": "vadduhs",
        "opcode": "000100 ..... ..... ..... 01001 000000",
        "formatted_opcode": "000100---------------01001000000",
        "instruction_format": "VX",
        "full_name": "Vector Add Unsigned Halfword Saturate"
    },
    "vadduws": {
        "mnemonic": "vadduws",
        "formatted_mnemonic": "vadduws",
        "opcode": "000100 ..... ..... ..... 01010 000000",
        "formatted_opcode": "000100---------------01010000000",
        "instruction_format": "VX",
        "full_name": "Vector Add Unsigned Word Saturate"
    },
    "vaddsbs": {
        "mnemonic": "vaddsbs",
        "formatted_mnemonic": "vaddsbs",
        "opcode": "000100 ..... ..... ..... 01100 000000",
        "formatted_opcode": "000100---------------01100000000",
        "instruction_format": "VX",
        "full_name": "Vector Add Signed Byte Saturate"
    },
    "vaddshs": {
        "mnemonic": "vaddshs",
        "formatted_mnemonic": "vaddshs",
        "opcode": "000100 ..... ..... ..... 01101 000000",
        "formatted_opcode": "000100---------------01101000000",
        "instruction_format": "VX",
        "full_name": "Vector Add Signed Halfword Saturate"
    },
    "vaddsws": {
        "mnemonic": "vaddsws",
        "formatted_mnemonic": "vaddsws",
        "opcode": "000100 ..... ..... ..... 01110 000000",
        "formatted_opcode": "000100---------------01110000000",
        "instruction_format": "VX",
        "full_name": "Vector Add Signed Word Saturate"
    },
    "vsububm": {
        "mnemonic": "vsububm",
        "formatted_mnemonic": "vsububm",
        "opcode": "000100 ..... ..... ..... 10000 000000",
        "formatted_opcode": "000100---------------10000000000",
        "instruction_format": "VX",
        "full_name": "Vector Subtract Unsigned Byte Modulo"
    },
    "vsubuhm": {
        "mnemonic": "vsubuhm",
        "formatted_mnemonic": "vsubuhm",
        "opcode": "000100 ..... ..... ..... 10001 000000",
        "formatted_opcode": "000100---------------10001000000",
        "instruction_format": "VX",
        "full_name": "Vector Subtract Unsigned Halfword Modulo"
    },
    "vsubuwm": {
        "mnemonic": "vsubuwm",
        "formatted_mnemonic": "vsubuwm",
        "opcode": "000100 ..... ..... ..... 10010 000000",
        "formatted_opcode": "000100---------------10010000000",
        "instruction_format": "VX",
        "full_name": "Vector Subtract Unsigned Word Modulo"
    },
    "vsubudm": {
        "mnemonic": "vsubudm",
        "formatted_mnemonic": "vsubudm",
        "opcode": "000100 ..... ..... ..... 10011 000000",
        "formatted_opcode": "000100---------------10011000000",
        "instruction_format": "VX",
        "full_name": "Vector Subtract Unsigned Doubleword Modulo"
    },
    "vsubuqm": {
        "mnemonic": "vsubuqm",
        "formatted_mnemonic": "vsubuqm",
        "opcode": "000100 ..... ..... ..... 10100 000000",
        "formatted_opcode": "000100---------------10100000000",
        "instruction_format": "VX",
        "full_name": "Vector Subtract Unsigned Quadword Modulo"
    },
    "vsubcuq": {
        "mnemonic": "vsubcuq",
        "formatted_mnemonic": "vsubcuq",
        "opcode": "000100 ..... ..... ..... 10101 000000",
        "formatted_opcode": "000100---------------10101000000",
        "instruction_format": "VX",
        "full_name": "Vector Subtract & write Carry Unsigned Quadword"
    },
    "vsubcuw": {
        "mnemonic": "vsubcuw",
        "formatted_mnemonic": "vsubcuw",
        "opcode": "000100 ..... ..... ..... 10110 000000",
        "formatted_opcode": "000100---------------10110000000",
        "instruction_format": "VX",
        "full_name": "Vector Subtract & Write Carry-Out Unsigned Word"
    },
    "vsububs": {
        "mnemonic": "vsububs",
        "formatted_mnemonic": "vsububs",
        "opcode": "000100 ..... ..... ..... 11000 000000",
        "formatted_opcode": "000100---------------11000000000",
        "instruction_format": "VX",
        "full_name": "Vector Subtract Unsigned Byte Saturate"
    },
    "vsubuhs": {
        "mnemonic": "vsubuhs",
        "formatted_mnemonic": "vsubuhs",
        "opcode": "000100 ..... ..... ..... 11001 000000",
        "formatted_opcode": "000100---------------11001000000",
        "instruction_format": "VX",
        "full_name": "Vector Subtract Unsigned Halfword Saturate"
    },
    "vsubuws": {
        "mnemonic": "vsubuws",
        "formatted_mnemonic": "vsubuws",
        "opcode": "000100 ..... ..... ..... 11010 000000",
        "formatted_opcode": "000100---------------11010000000",
        "instruction_format": "VX",
        "full_name": "Vector Subtract Unsigned Word Saturate"
    },
    "vsubsbs": {
        "mnemonic": "vsubsbs",
        "formatted_mnemonic": "vsubsbs",
        "opcode": "000100 ..... ..... ..... 11100 000000",
        "formatted_opcode": "000100---------------11100000000",
        "instruction_format": "VX",
        "full_name": "Vector Subtract Signed Byte Saturate"
    },
    "vsubshs": {
        "mnemonic": "vsubshs",
        "formatted_mnemonic": "vsubshs",
        "opcode": "000100 ..... ..... ..... 11101 000000",
        "formatted_opcode": "000100---------------11101000000",
        "instruction_format": "VX",
        "full_name": "Vector Subtract Signed Halfword Saturate"
    },
    "vsubsws": {
        "mnemonic": "vsubsws",
        "formatted_mnemonic": "vsubsws",
        "opcode": "000100 ..... ..... ..... 11110 000000",
        "formatted_opcode": "000100---------------11110000000",
        "instruction_format": "VX",
        "full_name": "Vector Subtract Signed Word Saturate"
    },
    "vmul10cuq": {
        "mnemonic": "vmul10cuq",
        "formatted_mnemonic": "vmul10cuq",
        "opcode": "000100 ..... ..... ///// 00000 000001",
        "formatted_opcode": "000100---------------00000000001",
        "instruction_format": "VX",
        "full_name": "Vector Multiply-by-10 & write Carry Unsigned Quadword"
    },
    "vmul10ecuq": {
        "mnemonic": "vmul10ecuq",
        "formatted_mnemonic": "vmul10ecuq",
        "opcode": "000100 ..... ..... ..... 00001 000001",
        "formatted_opcode": "000100---------------00001000001",
        "instruction_format": "VX",
        "full_name": "Vector Multiply-by-10 Extended & write Carry Unsigned Quadword"
    },
    "vmul10uq": {
        "mnemonic": "vmul10uq",
        "formatted_mnemonic": "vmul10uq",
        "opcode": "000100 ..... ..... ///// 01000 000001",
        "formatted_opcode": "000100---------------01000000001",
        "instruction_format": "VX",
        "full_name": "Vector Multiply-by-10 Unsigned Quadword"
    },
    "vmul10euq": {
        "mnemonic": "vmul10euq",
        "formatted_mnemonic": "vmul10euq",
        "opcode": "000100 ..... ..... ..... 01001 000001",
        "formatted_opcode": "000100---------------01001000001",
        "instruction_format": "VX",
        "full_name": "Vector Multiply-by-10 Extended Unsigned Quadword"
    },
    "bcdcpsgn.": {
        "mnemonic": "bcdcpsgn.",
        "formatted_mnemonic": "bcdcpsgn_dot",
        "opcode": "000100 ..... ..... ..... 01101 000001",
        "formatted_opcode": "000100---------------01101000001",
        "instruction_format": "VX",
        "full_name": "Decimal CopySign & record"
    },
    "bcdadd.": {
        "mnemonic": "bcdadd.",
        "formatted_mnemonic": "bcdadd_dot",
        "opcode": "000100 ..... ..... ..... 1.000 000001",
        "formatted_opcode": "000100---------------1-000000001",
        "instruction_format": "VX",
        "full_name": "Decimal Add Modulo & record"
    },
    "bcdsub.": {
        "mnemonic": "bcdsub.",
        "formatted_mnemonic": "bcdsub_dot",
        "opcode": "000100 ..... ..... ..... 1.001 000001",
        "formatted_opcode": "000100---------------1-001000001",
        "instruction_format": "VX",
        "full_name": "Decimal Subtract Modulo & record"
    },
    "bcdus.": {
        "mnemonic": "bcdus.",
        "formatted_mnemonic": "bcdus_dot",
        "opcode": "000100 ..... ..... ..... 1/010 000001",
        "formatted_opcode": "000100---------------1-010000001",
        "instruction_format": "VX",
        "full_name": "Decimal Unsigned Shift & record"
    },
    "bcds.": {
        "mnemonic": "bcds.",
        "formatted_mnemonic": "bcds_dot",
        "opcode": "000100 ..... ..... ..... 1.011 000001",
        "formatted_opcode": "000100---------------1-011000001",
        "instruction_format": "VX",
        "full_name": "Decimal Shift & record"
    },
    "bcdtrunc.": {
        "mnemonic": "bcdtrunc.",
        "formatted_mnemonic": "bcdtrunc_dot",
        "opcode": "000100 ..... ..... ..... 1.100 000001",
        "formatted_opcode": "000100---------------1-100000001",
        "instruction_format": "VX",
        "full_name": "Decimal Truncate & record"
    },
    "bcdutrunc.": {
        "mnemonic": "bcdutrunc.",
        "formatted_mnemonic": "bcdutrunc_dot",
        "opcode": "000100 ..... ..... ..... 1/101 000001",
        "formatted_opcode": "000100---------------1-101000001",
        "instruction_format": "VX",
        "full_name": "Decimal Unsigned Truncate & record"
    },
    "bcdctsq.": {
        "mnemonic": "bcdctsq.",
        "formatted_mnemonic": "bcdctsq_dot",
        "opcode": "000100 ..... 00000 ..... 1/110 000001",
        "formatted_opcode": "000100-----00000-----1-110000001",
        "instruction_format": "VX",
        "full_name": "Decimal Convert To Signed Quadword & record"
    },
    "bcdcfsq.": {
        "mnemonic": "bcdcfsq.",
        "formatted_mnemonic": "bcdcfsq_dot",
        "opcode": "000100 ..... 00010 ..... 1.110 000001",
        "formatted_opcode": "000100-----00010-----1-110000001",
        "instruction_format": "VX",
        "full_name": "Decimal Convert From Signed Quadword & record"
    },
    "bcdctz.": {
        "mnemonic": "bcdctz.",
        "formatted_mnemonic": "bcdctz_dot",
        "opcode": "000100 ..... 00100 ..... 1.110 000001",
        "formatted_opcode": "000100-----00100-----1-110000001",
        "instruction_format": "VX",
        "full_name": "Decimal Convert To Zoned & record"
    },
    "bcdctn.": {
        "mnemonic": "bcdctn.",
        "formatted_mnemonic": "bcdctn_dot",
        "opcode": "000100 ..... 00101 ..... 1/110 000001",
        "formatted_opcode": "000100-----00101-----1-110000001",
        "instruction_format": "VX",
        "full_name": "Decimal Convert To National & record"
    },
    "bcdcfz.": {
        "mnemonic": "bcdcfz.",
        "formatted_mnemonic": "bcdcfz_dot",
        "opcode": "000100 ..... 00110 ..... 1.110 000001",
        "formatted_opcode": "000100-----00110-----1-110000001",
        "instruction_format": "VX",
        "full_name": "Decimal Convert From Zoned & record"
    },
    "bcdcfn.": {
        "mnemonic": "bcdcfn.",
        "formatted_mnemonic": "bcdcfn_dot",
        "opcode": "000100 ..... 00111 ..... 1.110 000001",
        "formatted_opcode": "000100-----00111-----1-110000001",
        "instruction_format": "VX",
        "full_name": "Decimal Convert From National & record"
    },
    "bcdsetsgn.": {
        "mnemonic": "bcdsetsgn.",
        "formatted_mnemonic": "bcdsetsgn_dot",
        "opcode": "000100 ..... 11111 ..... 1.110 000001",
        "formatted_opcode": "000100-----11111-----1-110000001",
        "instruction_format": "VX",
        "full_name": "Decimal Set Sign & record"
    },
    "bcdsr.": {
        "mnemonic": "bcdsr.",
        "formatted_mnemonic": "bcdsr_dot",
        "opcode": "000100 ..... ..... ..... 1.111 000001",
        "formatted_opcode": "000100---------------1-111000001",
        "instruction_format": "VX",
        "full_name": "Decimal Shift & Round & record"
    },
    "vmaxub": {
        "mnemonic": "vmaxub",
        "formatted_mnemonic": "vmaxub",
        "opcode": "000100 ..... ..... ..... 00000 000010",
        "formatted_opcode": "000100---------------00000000010",
        "instruction_format": "VX",
        "full_name": "Vector Maximum Unsigned Byte"
    },
    "vmaxuh": {
        "mnemonic": "vmaxuh",
        "formatted_mnemonic": "vmaxuh",
        "opcode": "000100 ..... ..... ..... 00001 000010",
        "formatted_opcode": "000100---------------00001000010",
        "instruction_format": "VX",
        "full_name": "Vector Maximum Unsigned Halfword"
    },
    "vmaxuw": {
        "mnemonic": "vmaxuw",
        "formatted_mnemonic": "vmaxuw",
        "opcode": "000100 ..... ..... ..... 00010 000010",
        "formatted_opcode": "000100---------------00010000010",
        "instruction_format": "VX",
        "full_name": "Vector Maximum Unsigned Word"
    },
    "vmaxud": {
        "mnemonic": "vmaxud",
        "formatted_mnemonic": "vmaxud",
        "opcode": "000100 ..... ..... ..... 00011 000010",
        "formatted_opcode": "000100---------------00011000010",
        "instruction_format": "VX",
        "full_name": "Vector Maximum Unsigned Doubleword"
    },
    "vmaxsb": {
        "mnemonic": "vmaxsb",
        "formatted_mnemonic": "vmaxsb",
        "opcode": "000100 ..... ..... ..... 00100 000010",
        "formatted_opcode": "000100---------------00100000010",
        "instruction_format": "VX",
        "full_name": "Vector Maximum Signed Byte"
    },
    "vmaxsh": {
        "mnemonic": "vmaxsh",
        "formatted_mnemonic": "vmaxsh",
        "opcode": "000100 ..... ..... ..... 00101 000010",
        "formatted_opcode": "000100---------------00101000010",
        "instruction_format": "VX",
        "full_name": "Vector Maximum Signed Halfword"
    },
    "vmaxsw": {
        "mnemonic": "vmaxsw",
        "formatted_mnemonic": "vmaxsw",
        "opcode": "000100 ..... ..... ..... 00110 000010",
        "formatted_opcode": "000100---------------00110000010",
        "instruction_format": "VX",
        "full_name": "Vector Maximum Signed Word"
    },
    "vmaxsd": {
        "mnemonic": "vmaxsd",
        "formatted_mnemonic": "vmaxsd",
        "opcode": "000100 ..... ..... ..... 00111 000010",
        "formatted_opcode": "000100---------------00111000010",
        "instruction_format": "VX",
        "full_name": "Vector Maximum Signed Doubleword"
    },
    "vminub": {
        "mnemonic": "vminub",
        "formatted_mnemonic": "vminub",
        "opcode": "000100 ..... ..... ..... 01000 000010",
        "formatted_opcode": "000100---------------01000000010",
        "instruction_format": "VX",
        "full_name": "Vector Minimum Unsigned Byte"
    },
    "vminuh": {
        "mnemonic": "vminuh",
        "formatted_mnemonic": "vminuh",
        "opcode": "000100 ..... ..... ..... 01001 000010",
        "formatted_opcode": "000100---------------01001000010",
        "instruction_format": "VX",
        "full_name": "Vector Minimum Unsigned Halfword"
    },
    "vminuw": {
        "mnemonic": "vminuw",
        "formatted_mnemonic": "vminuw",
        "opcode": "000100 ..... ..... ..... 01010 000010",
        "formatted_opcode": "000100---------------01010000010",
        "instruction_format": "VX",
        "full_name": "Vector Minimum Unsigned Word"
    },
    "vminud": {
        "mnemonic": "vminud",
        "formatted_mnemonic": "vminud",
        "opcode": "000100 ..... ..... ..... 01011 000010",
        "formatted_opcode": "000100---------------01011000010",
        "instruction_format": "VX",
        "full_name": "Vector Minimum Unsigned Doubleword"
    },
    "vminsb": {
        "mnemonic": "vminsb",
        "formatted_mnemonic": "vminsb",
        "opcode": "000100 ..... ..... ..... 01100 000010",
        "formatted_opcode": "000100---------------01100000010",
        "instruction_format": "VX",
        "full_name": "Vector Minimum Signed Byte"
    },
    "vminsh": {
        "mnemonic": "vminsh",
        "formatted_mnemonic": "vminsh",
        "opcode": "000100 ..... ..... ..... 01101 000010",
        "formatted_opcode": "000100---------------01101000010",
        "instruction_format": "VX",
        "full_name": "Vector Minimum Signed Halfword"
    },
    "vminsw": {
        "mnemonic": "vminsw",
        "formatted_mnemonic": "vminsw",
        "opcode": "000100 ..... ..... ..... 01110 000010",
        "formatted_opcode": "000100---------------01110000010",
        "instruction_format": "VX",
        "full_name": "Vector Minimum Signed Word"
    },
    "vminsd": {
        "mnemonic": "vminsd",
        "formatted_mnemonic": "vminsd",
        "opcode": "000100 ..... ..... ..... 01111 000010",
        "formatted_opcode": "000100---------------01111000010",
        "instruction_format": "VX",
        "full_name": "Vector Minimum Signed Doubleword"
    },
    "vavgub": {
        "mnemonic": "vavgub",
        "formatted_mnemonic": "vavgub",
        "opcode": "000100 ..... ..... ..... 10000 000010",
        "formatted_opcode": "000100---------------10000000010",
        "instruction_format": "VX",
        "full_name": "Vector Average Unsigned Byte"
    },
    "vavguh": {
        "mnemonic": "vavguh",
        "formatted_mnemonic": "vavguh",
        "opcode": "000100 ..... ..... ..... 10001 000010",
        "formatted_opcode": "000100---------------10001000010",
        "instruction_format": "VX",
        "full_name": "Vector Average Unsigned Halfword"
    },
    "vavguw": {
        "mnemonic": "vavguw",
        "formatted_mnemonic": "vavguw",
        "opcode": "000100 ..... ..... ..... 10010 000010",
        "formatted_opcode": "000100---------------10010000010",
        "instruction_format": "VX",
        "full_name": "Vector Average Unsigned Word"
    },
    "vavgsb": {
        "mnemonic": "vavgsb",
        "formatted_mnemonic": "vavgsb",
        "opcode": "000100 ..... ..... ..... 10100 000010",
        "formatted_opcode": "000100---------------10100000010",
        "instruction_format": "VX",
        "full_name": "Vector Average Signed Byte"
    },
    "vavgsh": {
        "mnemonic": "vavgsh",
        "formatted_mnemonic": "vavgsh",
        "opcode": "000100 ..... ..... ..... 10101 000010",
        "formatted_opcode": "000100---------------10101000010",
        "instruction_format": "VX",
        "full_name": "Vector Average Signed Halfword"
    },
    "vavgsw": {
        "mnemonic": "vavgsw",
        "formatted_mnemonic": "vavgsw",
        "opcode": "000100 ..... ..... ..... 10110 000010",
        "formatted_opcode": "000100---------------10110000010",
        "instruction_format": "VX",
        "full_name": "Vector Average Signed Word"
    },
    "vclzlsbb": {
        "mnemonic": "vclzlsbb",
        "formatted_mnemonic": "vclzlsbb",
        "opcode": "000100 ..... 00000 ..... 11000 000010",
        "formatted_opcode": "000100-----00000-----11000000010",
        "instruction_format": "VX",
        "full_name": "Vector Count Leading Zero Least-Significant Bits Byte"
    },
    "vctzlsbb": {
        "mnemonic": "vctzlsbb",
        "formatted_mnemonic": "vctzlsbb",
        "opcode": "000100 ..... 00001 ..... 11000 000010",
        "formatted_opcode": "000100-----00001-----11000000010",
        "instruction_format": "VX",
        "full_name": "Vector Count Trailing Zero Least-Significant Bits Byte"
    },
    "vnegw": {
        "mnemonic": "vnegw",
        "formatted_mnemonic": "vnegw",
        "opcode": "000100 ..... 00110 ..... 11000 000010",
        "formatted_opcode": "000100-----00110-----11000000010",
        "instruction_format": "VX",
        "full_name": "Vector Negate Word"
    },
    "vnegd": {
        "mnemonic": "vnegd",
        "formatted_mnemonic": "vnegd",
        "opcode": "000100 ..... 00111 ..... 11000 000010",
        "formatted_opcode": "000100-----00111-----11000000010",
        "instruction_format": "VX",
        "full_name": "Vector Negate Doubleword"
    },
    "vprtybw": {
        "mnemonic": "vprtybw",
        "formatted_mnemonic": "vprtybw",
        "opcode": "000100 ..... 01000 ..... 11000 000010",
        "formatted_opcode": "000100-----01000-----11000000010",
        "instruction_format": "VX",
        "full_name": "Vector Parity Byte Word"
    },
    "vprtybd": {
        "mnemonic": "vprtybd",
        "formatted_mnemonic": "vprtybd",
        "opcode": "000100 ..... 01001 ..... 11000 000010",
        "formatted_opcode": "000100-----01001-----11000000010",
        "instruction_format": "VX",
        "full_name": "Vector Parity Byte Doubleword"
    },
    "vprtybq": {
        "mnemonic": "vprtybq",
        "formatted_mnemonic": "vprtybq",
        "opcode": "000100 ..... 01010 ..... 11000 000010",
        "formatted_opcode": "000100-----01010-----11000000010",
        "instruction_format": "VX",
        "full_name": "Vector Parity Byte Quadword"
    },
    "vextsb2w": {
        "mnemonic": "vextsb2w",
        "formatted_mnemonic": "vextsb2w",
        "opcode": "000100 ..... 10000 ..... 11000 000010",
        "formatted_opcode": "000100-----10000-----11000000010",
        "instruction_format": "VX",
        "full_name": "Vector Extend Sign Byte to Word"
    },
    "vextsh2w": {
        "mnemonic": "vextsh2w",
        "formatted_mnemonic": "vextsh2w",
        "opcode": "000100 ..... 10001 ..... 11000 000010",
        "formatted_opcode": "000100-----10001-----11000000010",
        "instruction_format": "VX",
        "full_name": "Vector Extend Sign Halfword to Word"
    },
    "vextsb2d": {
        "mnemonic": "vextsb2d",
        "formatted_mnemonic": "vextsb2d",
        "opcode": "000100 ..... 11000 ..... 11000 000010",
        "formatted_opcode": "000100-----11000-----11000000010",
        "instruction_format": "VX",
        "full_name": "Vector Extend Sign Byte to Doubleword"
    },
    "vextsh2d": {
        "mnemonic": "vextsh2d",
        "formatted_mnemonic": "vextsh2d",
        "opcode": "000100 ..... 11001 ..... 11000 000010",
        "formatted_opcode": "000100-----11001-----11000000010",
        "instruction_format": "VX",
        "full_name": "Vector Extend Sign Halfword to Doubleword"
    },
    "vextsw2d": {
        "mnemonic": "vextsw2d",
        "formatted_mnemonic": "vextsw2d",
        "opcode": "000100 ..... 11010 ..... 11000 000010",
        "formatted_opcode": "000100-----11010-----11000000010",
        "instruction_format": "VX",
        "full_name": "Vector Extend Sign Word to Doubleword"
    },
    "vctzb": {
        "mnemonic": "vctzb",
        "formatted_mnemonic": "vctzb",
        "opcode": "000100 ..... 11100 ..... 11000 000010",
        "formatted_opcode": "000100-----11100-----11000000010",
        "instruction_format": "VX",
        "full_name": "Vector Count Trailing Zeros Byte"
    },
    "vctzh": {
        "mnemonic": "vctzh",
        "formatted_mnemonic": "vctzh",
        "opcode": "000100 ..... 11101 ..... 11000 000010",
        "formatted_opcode": "000100-----11101-----11000000010",
        "instruction_format": "VX",
        "full_name": "Vector Count Trailing Zeros Halfword"
    },
    "vctzw": {
        "mnemonic": "vctzw",
        "formatted_mnemonic": "vctzw",
        "opcode": "000100 ..... 11110 ..... 11000 000010",
        "formatted_opcode": "000100-----11110-----11000000010",
        "instruction_format": "VX",
        "full_name": "Vector Count Trailing Zeros Word"
    },
    "vctzd": {
        "mnemonic": "vctzd",
        "formatted_mnemonic": "vctzd",
        "opcode": "000100 ..... 11111 ..... 11000 000010",
        "formatted_opcode": "000100-----11111-----11000000010",
        "instruction_format": "VX",
        "full_name": "Vector Count Trailing Zeros Doubleword"
    },
    "vshasigmaw": {
        "mnemonic": "vshasigmaw",
        "formatted_mnemonic": "vshasigmaw",
        "opcode": "000100 ..... ..... ..... 11010 000010",
        "formatted_opcode": "000100---------------11010000010",
        "instruction_format": "VX",
        "full_name": "Vector SHA-256 Sigma Word"
    },
    "vshasigmad": {
        "mnemonic": "vshasigmad",
        "formatted_mnemonic": "vshasigmad",
        "opcode": "000100 ..... ..... ..... 11011 000010",
        "formatted_opcode": "000100---------------11011000010",
        "instruction_format": "VX",
        "full_name": "Vector SHA-512 Sigma Doubleword"
    },
    "vclzb": {
        "mnemonic": "vclzb",
        "formatted_mnemonic": "vclzb",
        "opcode": "000100 ..... ///// ..... 11100 000010",
        "formatted_opcode": "000100---------------11100000010",
        "instruction_format": "VX",
        "full_name": "Vector Count Leading Zeros Byte"
    },
    "vclzh": {
        "mnemonic": "vclzh",
        "formatted_mnemonic": "vclzh",
        "opcode": "000100 ..... ///// ..... 11101 000010",
        "formatted_opcode": "000100---------------11101000010",
        "instruction_format": "VX",
        "full_name": "Vector Count Leading Zeros Halfword"
    },
    "vclzw": {
        "mnemonic": "vclzw",
        "formatted_mnemonic": "vclzw",
        "opcode": "000100 ..... ///// ..... 11110 000010",
        "formatted_opcode": "000100---------------11110000010",
        "instruction_format": "VX",
        "full_name": "Vector Count Leading Zeros Word"
    },
    "vclzd": {
        "mnemonic": "vclzd",
        "formatted_mnemonic": "vclzd",
        "opcode": "000100 ..... ///// ..... 11111 000010",
        "formatted_opcode": "000100---------------11111000010",
        "instruction_format": "VX",
        "full_name": "Vector Count Leading Zeros Doubleword"
    },
    "vabsdub": {
        "mnemonic": "vabsdub",
        "formatted_mnemonic": "vabsdub",
        "opcode": "000100 ..... ..... ..... 10000 000011",
        "formatted_opcode": "000100---------------10000000011",
        "instruction_format": "VX",
        "full_name": "Vector Absolute Difference Unsigned Byte"
    },
    "vabsduh": {
        "mnemonic": "vabsduh",
        "formatted_mnemonic": "vabsduh",
        "opcode": "000100 ..... ..... ..... 10001 000011",
        "formatted_opcode": "000100---------------10001000011",
        "instruction_format": "VX",
        "full_name": "Vector Absolute Difference Unsigned Halfword"
    },
    "vabsduw": {
        "mnemonic": "vabsduw",
        "formatted_mnemonic": "vabsduw",
        "opcode": "000100 ..... ..... ..... 10010 000011",
        "formatted_opcode": "000100---------------10010000011",
        "instruction_format": "VX",
        "full_name": "Vector Absolute Difference Unsigned Word"
    },
    "vpopcntb": {
        "mnemonic": "vpopcntb",
        "formatted_mnemonic": "vpopcntb",
        "opcode": "000100 ..... ///// ..... 11100 000011",
        "formatted_opcode": "000100---------------11100000011",
        "instruction_format": "VX",
        "full_name": "Vector Population Count Byte"
    },
    "vpopcnth": {
        "mnemonic": "vpopcnth",
        "formatted_mnemonic": "vpopcnth",
        "opcode": "000100 ..... ///// ..... 11101 000011",
        "formatted_opcode": "000100---------------11101000011",
        "instruction_format": "VX",
        "full_name": "Vector Population Count Halfword"
    },
    "vpopcntw": {
        "mnemonic": "vpopcntw",
        "formatted_mnemonic": "vpopcntw",
        "opcode": "000100 ..... ///// ..... 11110 000011",
        "formatted_opcode": "000100---------------11110000011",
        "instruction_format": "VX",
        "full_name": "Vector Population Count Word"
    },
    "vpopcntd": {
        "mnemonic": "vpopcntd",
        "formatted_mnemonic": "vpopcntd",
        "opcode": "000100 ..... ///// ..... 11111 000011",
        "formatted_opcode": "000100---------------11111000011",
        "instruction_format": "VX",
        "full_name": "Vector Population Count Doubleword"
    },
    "vrlb": {
        "mnemonic": "vrlb",
        "formatted_mnemonic": "vrlb",
        "opcode": "000100 ..... ..... ..... 00000 000100",
        "formatted_opcode": "000100---------------00000000100",
        "instruction_format": "VX",
        "full_name": "Vector Rotate Left Byte"
    },
    "vrlh": {
        "mnemonic": "vrlh",
        "formatted_mnemonic": "vrlh",
        "opcode": "000100 ..... ..... ..... 00001 000100",
        "formatted_opcode": "000100---------------00001000100",
        "instruction_format": "VX",
        "full_name": "Vector Rotate Left Halfword"
    },
    "vrlw": {
        "mnemonic": "vrlw",
        "formatted_mnemonic": "vrlw",
        "opcode": "000100 ..... ..... ..... 00010 000100",
        "formatted_opcode": "000100---------------00010000100",
        "instruction_format": "VX",
        "full_name": "Vector Rotate Left Word"
    },
    "vrld": {
        "mnemonic": "vrld",
        "formatted_mnemonic": "vrld",
        "opcode": "000100 ..... ..... ..... 00011 000100",
        "formatted_opcode": "000100---------------00011000100",
        "instruction_format": "VX",
        "full_name": "Vector Rotate Left Doubleword"
    },
    "vslb": {
        "mnemonic": "vslb",
        "formatted_mnemonic": "vslb",
        "opcode": "000100 ..... ..... ..... 00100 000100",
        "formatted_opcode": "000100---------------00100000100",
        "instruction_format": "VX",
        "full_name": "Vector Shift Left Byte"
    },
    "vslh": {
        "mnemonic": "vslh",
        "formatted_mnemonic": "vslh",
        "opcode": "000100 ..... ..... ..... 00101 000100",
        "formatted_opcode": "000100---------------00101000100",
        "instruction_format": "VX",
        "full_name": "Vector Shift Left Halfword"
    },
    "vslw": {
        "mnemonic": "vslw",
        "formatted_mnemonic": "vslw",
        "opcode": "000100 ..... ..... ..... 00110 000100",
        "formatted_opcode": "000100---------------00110000100",
        "instruction_format": "VX",
        "full_name": "Vector Shift Left Word"
    },
    "vsl": {
        "mnemonic": "vsl",
        "formatted_mnemonic": "vsl",
        "opcode": "000100 ..... ..... ..... 00111 000100",
        "formatted_opcode": "000100---------------00111000100",
        "instruction_format": "VX",
        "full_name": "Vector Shift Left"
    },
    "vsrb": {
        "mnemonic": "vsrb",
        "formatted_mnemonic": "vsrb",
        "opcode": "000100 ..... ..... ..... 01000 000100",
        "formatted_opcode": "000100---------------01000000100",
        "instruction_format": "VX",
        "full_name": "Vector Shift Right Byte"
    },
    "vsrh": {
        "mnemonic": "vsrh",
        "formatted_mnemonic": "vsrh",
        "opcode": "000100 ..... ..... ..... 01001 000100",
        "formatted_opcode": "000100---------------01001000100",
        "instruction_format": "VX",
        "full_name": "Vector Shift Right Halfword"
    },
    "vsrw": {
        "mnemonic": "vsrw",
        "formatted_mnemonic": "vsrw",
        "opcode": "000100 ..... ..... ..... 01010 000100",
        "formatted_opcode": "000100---------------01010000100",
        "instruction_format": "VX",
        "full_name": "Vector Shift Right Word"
    },
    "vsr": {
        "mnemonic": "vsr",
        "formatted_mnemonic": "vsr",
        "opcode": "000100 ..... ..... ..... 01011 000100",
        "formatted_opcode": "000100---------------01011000100",
        "instruction_format": "VX",
        "full_name": "Vector Shift Right"
    },
    "vsrab": {
        "mnemonic": "vsrab",
        "formatted_mnemonic": "vsrab",
        "opcode": "000100 ..... ..... ..... 01100 000100",
        "formatted_opcode": "000100---------------01100000100",
        "instruction_format": "VX",
        "full_name": "Vector Shift Right Algebraic Byte"
    },
    "vsrah": {
        "mnemonic": "vsrah",
        "formatted_mnemonic": "vsrah",
        "opcode": "000100 ..... ..... ..... 01101 000100",
        "formatted_opcode": "000100---------------01101000100",
        "instruction_format": "VX",
        "full_name": "Vector Shift Right Algebraic Halfword"
    },
    "vsraw": {
        "mnemonic": "vsraw",
        "formatted_mnemonic": "vsraw",
        "opcode": "000100 ..... ..... ..... 01110 000100",
        "formatted_opcode": "000100---------------01110000100",
        "instruction_format": "VX",
        "full_name": "Vector Shift Right Algebraic Word"
    },
    "vsrad": {
        "mnemonic": "vsrad",
        "formatted_mnemonic": "vsrad",
        "opcode": "000100 ..... ..... ..... 01111 000100",
        "formatted_opcode": "000100---------------01111000100",
        "instruction_format": "VX",
        "full_name": "Vector Shift Right Algebraic Doubleword"
    },
    "vand": {
        "mnemonic": "vand",
        "formatted_mnemonic": "vand",
        "opcode": "000100 ..... ..... ..... 10000 000100",
        "formatted_opcode": "000100---------------10000000100",
        "instruction_format": "VX",
        "full_name": "Vector Logical AND"
    },
    "vandc": {
        "mnemonic": "vandc",
        "formatted_mnemonic": "vandc",
        "opcode": "000100 ..... ..... ..... 10001 000100",
        "formatted_opcode": "000100---------------10001000100",
        "instruction_format": "VX",
        "full_name": "Vector Logical AND with Complement"
    },
    "vor": {
        "mnemonic": "vor",
        "formatted_mnemonic": "vor",
        "opcode": "000100 ..... ..... ..... 10010 000100",
        "formatted_opcode": "000100---------------10010000100",
        "instruction_format": "VX",
        "full_name": "Vector Logical OR"
    },
    "vxor": {
        "mnemonic": "vxor",
        "formatted_mnemonic": "vxor",
        "opcode": "000100 ..... ..... ..... 10011 000100",
        "formatted_opcode": "000100---------------10011000100",
        "instruction_format": "VX",
        "full_name": "Vector Logical XOR"
    },
    "vnor": {
        "mnemonic": "vnor",
        "formatted_mnemonic": "vnor",
        "opcode": "000100 ..... ..... ..... 10100 000100",
        "formatted_opcode": "000100---------------10100000100",
        "instruction_format": "VX",
        "full_name": "Vector Logical NOR"
    },
    "vorc": {
        "mnemonic": "vorc",
        "formatted_mnemonic": "vorc",
        "opcode": "000100 ..... ..... ..... 10101 000100",
        "formatted_opcode": "000100---------------10101000100",
        "instruction_format": "VX",
        "full_name": "Vector OR with Complement"
    },
    "vnand": {
        "mnemonic": "vnand",
        "formatted_mnemonic": "vnand",
        "opcode": "000100 ..... ..... ..... 10110 000100",
        "formatted_opcode": "000100---------------10110000100",
        "instruction_format": "VX",
        "full_name": "Vector NAND"
    },
    "vsld": {
        "mnemonic": "vsld",
        "formatted_mnemonic": "vsld",
        "opcode": "000100 ..... ..... ..... 10111 000100",
        "formatted_opcode": "000100---------------10111000100",
        "instruction_format": "VX",
        "full_name": "Vector Shift Left Doubleword"
    },
    "mfvscr": {
        "mnemonic": "mfvscr",
        "formatted_mnemonic": "mfvscr",
        "opcode": "000100 ..... ///// ///// 11000 000100",
        "formatted_opcode": "000100---------------11000000100",
        "instruction_format": "VX",
        "full_name": "Move From VSCR"
    },
    "mtvscr": {
        "mnemonic": "mtvscr",
        "formatted_mnemonic": "mtvscr",
        "opcode": "000100 ///// ///// ..... 11001 000100",
        "formatted_opcode": "000100---------------11001000100",
        "instruction_format": "VX",
        "full_name": "Move To VSCR"
    },
    "veqv": {
        "mnemonic": "veqv",
        "formatted_mnemonic": "veqv",
        "opcode": "000100 ..... ..... ..... 11010 000100",
        "formatted_opcode": "000100---------------11010000100",
        "instruction_format": "VX",
        "full_name": "Vector Equivalence"
    },
    "vsrd": {
        "mnemonic": "vsrd",
        "formatted_mnemonic": "vsrd",
        "opcode": "000100 ..... ..... ..... 11011 000100",
        "formatted_opcode": "000100---------------11011000100",
        "instruction_format": "VX",
        "full_name": "Vector Shift Right Doubleword"
    },
    "vsrv": {
        "mnemonic": "vsrv",
        "formatted_mnemonic": "vsrv",
        "opcode": "000100 ..... ..... ..... 11100 000100",
        "formatted_opcode": "000100---------------11100000100",
        "instruction_format": "VX",
        "full_name": "Vector Shift Right Variable"
    },
    "vslv": {
        "mnemonic": "vslv",
        "formatted_mnemonic": "vslv",
        "opcode": "000100 ..... ..... ..... 11101 000100",
        "formatted_opcode": "000100---------------11101000100",
        "instruction_format": "VX",
        "full_name": "Vector Shift Left Variable"
    },
    "vrlwmi": {
        "mnemonic": "vrlwmi",
        "formatted_mnemonic": "vrlwmi",
        "opcode": "000100 ..... ..... ..... 00010 000101",
        "formatted_opcode": "000100---------------00010000101",
        "instruction_format": "VX",
        "full_name": "Vector Rotate Left Word then Mask Insert"
    },
    "vrldmi": {
        "mnemonic": "vrldmi",
        "formatted_mnemonic": "vrldmi",
        "opcode": "000100 ..... ..... ..... 00011 000101",
        "formatted_opcode": "000100---------------00011000101",
        "instruction_format": "VX",
        "full_name": "Vector Rotate Left Doubleword then Mask Insert"
    },
    "vrlwnm": {
        "mnemonic": "vrlwnm",
        "formatted_mnemonic": "vrlwnm",
        "opcode": "000100 ..... ..... ..... 00110 000101",
        "formatted_opcode": "000100---------------00110000101",
        "instruction_format": "VX",
        "full_name": "Vector Rotate Left Word then AND with Mask"
    },
    "vrldnm": {
        "mnemonic": "vrldnm",
        "formatted_mnemonic": "vrldnm",
        "opcode": "000100 ..... ..... ..... 00111 000101",
        "formatted_opcode": "000100---------------00111000101",
        "instruction_format": "VX",
        "full_name": "Vector Rotate Left Doubleword then AND with Mask"
    },
    "vcmpequb[.]": {
        "mnemonic": "vcmpequb[.]",
        "formatted_mnemonic": "vcmpequb_dot",
        "opcode": "000100 ..... ..... ..... .0000 000110",
        "formatted_opcode": "000100----------------0000000110",
        "instruction_format": "VC",
        "full_name": "Vector Compare Equal To Unsigned Byte"
    },
    "vcmpequh[.]": {
        "mnemonic": "vcmpequh[.]",
        "formatted_mnemonic": "vcmpequh_dot",
        "opcode": "000100 ..... ..... ..... .0001 000110",
        "formatted_opcode": "000100----------------0001000110",
        "instruction_format": "VC",
        "full_name": "Vector Compare Equal To Unsigned Halfword"
    },
    "vcmpequw[.]": {
        "mnemonic": "vcmpequw[.]",
        "formatted_mnemonic": "vcmpequw_dot",
        "opcode": "000100 ..... ..... ..... .0010 000110",
        "formatted_opcode": "000100----------------0010000110",
        "instruction_format": "VC",
        "full_name": "Vector Compare Equal To Unsigned Word"
    },
    "vcmpeqfp[.]": {
        "mnemonic": "vcmpeqfp[.]",
        "formatted_mnemonic": "vcmpeqfp_dot",
        "opcode": "000100 ..... ..... ..... .0011 000110",
        "formatted_opcode": "000100----------------0011000110",
        "instruction_format": "VC",
        "full_name": "Vector Compare Equal To Floating-Point"
    },
    "vcmpgefp[.]": {
        "mnemonic": "vcmpgefp[.]",
        "formatted_mnemonic": "vcmpgefp_dot",
        "opcode": "000100 ..... ..... ..... .0111 000110",
        "formatted_opcode": "000100----------------0111000110",
        "instruction_format": "VC",
        "full_name": "Vector Compare Greater Than or Equal To Floating-Point"
    },
    "vcmpgtub[.]": {
        "mnemonic": "vcmpgtub[.]",
        "formatted_mnemonic": "vcmpgtub_dot",
        "opcode": "000100 ..... ..... ..... .1000 000110",
        "formatted_opcode": "000100----------------1000000110",
        "instruction_format": "VC",
        "full_name": "Vector Compare Greater Than Unsigned Byte"
    },
    "vcmpgtuh[.]": {
        "mnemonic": "vcmpgtuh[.]",
        "formatted_mnemonic": "vcmpgtuh_dot",
        "opcode": "000100 ..... ..... ..... .1001 000110",
        "formatted_opcode": "000100----------------1001000110",
        "instruction_format": "VC",
        "full_name": "Vector Compare Greater Than Unsigned Halfword"
    },
    "vcmpgtuw[.]": {
        "mnemonic": "vcmpgtuw[.]",
        "formatted_mnemonic": "vcmpgtuw_dot",
        "opcode": "000100 ..... ..... ..... .1010 000110",
        "formatted_opcode": "000100----------------1010000110",
        "instruction_format": "VC",
        "full_name": "Vector Compare Greater Than Unsigned Word"
    },
    "vcmpgtfp[.]": {
        "mnemonic": "vcmpgtfp[.]",
        "formatted_mnemonic": "vcmpgtfp_dot",
        "opcode": "000100 ..... ..... ..... .1011 000110",
        "formatted_opcode": "000100----------------1011000110",
        "instruction_format": "VC",
        "full_name": "Vector Compare Greater Than Floating-Point"
    },
    "vcmpgtsb[.]": {
        "mnemonic": "vcmpgtsb[.]",
        "formatted_mnemonic": "vcmpgtsb_dot",
        "opcode": "000100 ..... ..... ..... .1100 000110",
        "formatted_opcode": "000100----------------1100000110",
        "instruction_format": "VC",
        "full_name": "Vector Compare Greater Than Signed Byte"
    },
    "vcmpgtsh[.]": {
        "mnemonic": "vcmpgtsh[.]",
        "formatted_mnemonic": "vcmpgtsh_dot",
        "opcode": "000100 ..... ..... ..... .1101 000110",
        "formatted_opcode": "000100----------------1101000110",
        "instruction_format": "VC",
        "full_name": "Vector Compare Greater Than Signed Halfword"
    },
    "vcmpgtsw[.]": {
        "mnemonic": "vcmpgtsw[.]",
        "formatted_mnemonic": "vcmpgtsw_dot",
        "opcode": "000100 ..... ..... ..... .1110 000110",
        "formatted_opcode": "000100----------------1110000110",
        "instruction_format": "VC",
        "full_name": "Vector Compare Greater Than Signed Word"
    },
    "vcmpbfp[.]": {
        "mnemonic": "vcmpbfp[.]",
        "formatted_mnemonic": "vcmpbfp_dot",
        "opcode": "000100 ..... ..... ..... .1111 000110",
        "formatted_opcode": "000100----------------1111000110",
        "instruction_format": "VC",
        "full_name": "Vector Compare Bounds Floating-Point"
    },
    "vcmpneb[.]": {
        "mnemonic": "vcmpneb[.]",
        "formatted_mnemonic": "vcmpneb_dot",
        "opcode": "000100 ..... ..... ..... .0000 000111",
        "formatted_opcode": "000100----------------0000000111",
        "instruction_format": "VC",
        "full_name": "Vector Compare Not Equal Byte"
    },
    "vcmpneh[.]": {
        "mnemonic": "vcmpneh[.]",
        "formatted_mnemonic": "vcmpneh_dot",
        "opcode": "000100 ..... ..... ..... .0001 000111",
        "formatted_opcode": "000100----------------0001000111",
        "instruction_format": "VC",
        "full_name": "Vector Compare Not Equal Halfword"
    },
    "vcmpnew[.]": {
        "mnemonic": "vcmpnew[.]",
        "formatted_mnemonic": "vcmpnew_dot",
        "opcode": "000100 ..... ..... ..... .0010 000111",
        "formatted_opcode": "000100----------------0010000111",
        "instruction_format": "VC",
        "full_name": "Vector Compare Not Equal Word"
    },
    "vcmpequd[.]": {
        "mnemonic": "vcmpequd[.]",
        "formatted_mnemonic": "vcmpequd_dot",
        "opcode": "000100 ..... ..... ..... .0011 000111",
        "formatted_opcode": "000100----------------0011000111",
        "instruction_format": "VC",
        "full_name": "Vector Compare Equal To Unsigned Doubleword"
    },
    "vcmpnezb[.]": {
        "mnemonic": "vcmpnezb[.]",
        "formatted_mnemonic": "vcmpnezb_dot",
        "opcode": "000100 ..... ..... ..... .0100 000111",
        "formatted_opcode": "000100----------------0100000111",
        "instruction_format": "VC",
        "full_name": "Vector Compare Not Equal or Zero Byte"
    },
    "vcmpnezh[.]": {
        "mnemonic": "vcmpnezh[.]",
        "formatted_mnemonic": "vcmpnezh_dot",
        "opcode": "000100 ..... ..... ..... .0101 000111",
        "formatted_opcode": "000100----------------0101000111",
        "instruction_format": "VC",
        "full_name": "Vector Compare Not Equal or Zero Halfword"
    },
    "vcmpnezw[.]": {
        "mnemonic": "vcmpnezw[.]",
        "formatted_mnemonic": "vcmpnezw_dot",
        "opcode": "000100 ..... ..... ..... .0110 000111",
        "formatted_opcode": "000100----------------0110000111",
        "instruction_format": "VC",
        "full_name": "Vector Compare Not Equal or Zero Word"
    },
    "vcmpgtud[.]": {
        "mnemonic": "vcmpgtud[.]",
        "formatted_mnemonic": "vcmpgtud_dot",
        "opcode": "000100 ..... ..... ..... .1011 000111",
        "formatted_opcode": "000100----------------1011000111",
        "instruction_format": "VC",
        "full_name": "Vector Compare Greater Than Unsigned Doubleword"
    },
    "vcmpgtsd[.]": {
        "mnemonic": "vcmpgtsd[.]",
        "formatted_mnemonic": "vcmpgtsd_dot",
        "opcode": "000100 ..... ..... ..... .1111 000111",
        "formatted_opcode": "000100----------------1111000111",
        "instruction_format": "VC",
        "full_name": "Vector Compare Greater Than Signed Doubleword"
    },
    "vmuloub": {
        "mnemonic": "vmuloub",
        "formatted_mnemonic": "vmuloub",
        "opcode": "000100 ..... ..... ..... 00000 001000",
        "formatted_opcode": "000100---------------00000001000",
        "instruction_format": "VX",
        "full_name": "Vector Multiply Odd Unsigned Byte"
    },
    "vmulouh": {
        "mnemonic": "vmulouh",
        "formatted_mnemonic": "vmulouh",
        "opcode": "000100 ..... ..... ..... 00001 001000",
        "formatted_opcode": "000100---------------00001001000",
        "instruction_format": "VX",
        "full_name": "Vector Multiply Odd Unsigned Halfword"
    },
    "vmulouw": {
        "mnemonic": "vmulouw",
        "formatted_mnemonic": "vmulouw",
        "opcode": "000100 ..... ..... ..... 00010 001000",
        "formatted_opcode": "000100---------------00010001000",
        "instruction_format": "VX",
        "full_name": "Vector Multiply Odd Unsigned Word"
    },
    "vmulosb": {
        "mnemonic": "vmulosb",
        "formatted_mnemonic": "vmulosb",
        "opcode": "000100 ..... ..... ..... 00100 001000",
        "formatted_opcode": "000100---------------00100001000",
        "instruction_format": "VX",
        "full_name": "Vector Multiply Odd Signed Byte"
    },
    "vmulosh": {
        "mnemonic": "vmulosh",
        "formatted_mnemonic": "vmulosh",
        "opcode": "000100 ..... ..... ..... 00101 001000",
        "formatted_opcode": "000100---------------00101001000",
        "instruction_format": "VX",
        "full_name": "Vector Multiply Odd Signed Halfword"
    },
    "vmulosw": {
        "mnemonic": "vmulosw",
        "formatted_mnemonic": "vmulosw",
        "opcode": "000100 ..... ..... ..... 00110 001000",
        "formatted_opcode": "000100---------------00110001000",
        "instruction_format": "VX",
        "full_name": "Vector Multiply Odd Signed Word"
    },
    "vmuleub": {
        "mnemonic": "vmuleub",
        "formatted_mnemonic": "vmuleub",
        "opcode": "000100 ..... ..... ..... 01000 001000",
        "formatted_opcode": "000100---------------01000001000",
        "instruction_format": "VX",
        "full_name": "Vector Multiply Even Unsigned Byte"
    },
    "vmuleuh": {
        "mnemonic": "vmuleuh",
        "formatted_mnemonic": "vmuleuh",
        "opcode": "000100 ..... ..... ..... 01001 001000",
        "formatted_opcode": "000100---------------01001001000",
        "instruction_format": "VX",
        "full_name": "Vector Multiply Even Unsigned Halfword"
    },
    "vmuleuw": {
        "mnemonic": "vmuleuw",
        "formatted_mnemonic": "vmuleuw",
        "opcode": "000100 ..... ..... ..... 01010 001000",
        "formatted_opcode": "000100---------------01010001000",
        "instruction_format": "VX",
        "full_name": "Vector Multiply Even Unsigned Word"
    },
    "vmulesb": {
        "mnemonic": "vmulesb",
        "formatted_mnemonic": "vmulesb",
        "opcode": "000100 ..... ..... ..... 01100 001000",
        "formatted_opcode": "000100---------------01100001000",
        "instruction_format": "VX",
        "full_name": "Vector Multiply Even Signed Byte"
    },
    "vmulesh": {
        "mnemonic": "vmulesh",
        "formatted_mnemonic": "vmulesh",
        "opcode": "000100 ..... ..... ..... 01101 001000",
        "formatted_opcode": "000100---------------01101001000",
        "instruction_format": "VX",
        "full_name": "Vector Multiply Even Signed Halfword"
    },
    "vmulesw": {
        "mnemonic": "vmulesw",
        "formatted_mnemonic": "vmulesw",
        "opcode": "000100 ..... ..... ..... 01110 001000",
        "formatted_opcode": "000100---------------01110001000",
        "instruction_format": "VX",
        "full_name": "Vector Multiply Even Signed Word"
    },
    "vpmsumb": {
        "mnemonic": "vpmsumb",
        "formatted_mnemonic": "vpmsumb",
        "opcode": "000100 ..... ..... ..... 10000 001000",
        "formatted_opcode": "000100---------------10000001000",
        "instruction_format": "VX",
        "full_name": "Vector Polynomial Multiply-Sum Byte"
    },
    "vpmsumh": {
        "mnemonic": "vpmsumh",
        "formatted_mnemonic": "vpmsumh",
        "opcode": "000100 ..... ..... ..... 10001 001000",
        "formatted_opcode": "000100---------------10001001000",
        "instruction_format": "VX",
        "full_name": "Vector Polynomial Multiply-Sum Halfword"
    },
    "vpmsumw": {
        "mnemonic": "vpmsumw",
        "formatted_mnemonic": "vpmsumw",
        "opcode": "000100 ..... ..... ..... 10010 001000",
        "formatted_opcode": "000100---------------10010001000",
        "instruction_format": "VX",
        "full_name": "Vector Polynomial Multiply-Sum Word"
    },
    "vpmsumd": {
        "mnemonic": "vpmsumd",
        "formatted_mnemonic": "vpmsumd",
        "opcode": "000100 ..... ..... ..... 10011 001000",
        "formatted_opcode": "000100---------------10011001000",
        "instruction_format": "VX",
        "full_name": "Vector Polynomial Multiply-Sum Doubleword"
    },
    "vcipher": {
        "mnemonic": "vcipher",
        "formatted_mnemonic": "vcipher",
        "opcode": "000100 ..... ..... ..... 10100 001000",
        "formatted_opcode": "000100---------------10100001000",
        "instruction_format": "VX",
        "full_name": "Vector AES Cipher"
    },
    "vncipher": {
        "mnemonic": "vncipher",
        "formatted_mnemonic": "vncipher",
        "opcode": "000100 ..... ..... ..... 10101 001000",
        "formatted_opcode": "000100---------------10101001000",
        "instruction_format": "VX",
        "full_name": "Vector AES Inverse Cipher"
    },
    "vsbox": {
        "mnemonic": "vsbox",
        "formatted_mnemonic": "vsbox",
        "opcode": "000100 ..... ..... ///// 10111 001000",
        "formatted_opcode": "000100---------------10111001000",
        "instruction_format": "VX",
        "full_name": "Vector AES S-Box"
    },
    "vsum4ubs": {
        "mnemonic": "vsum4ubs",
        "formatted_mnemonic": "vsum4ubs",
        "opcode": "000100 ..... ..... ..... 11000 001000",
        "formatted_opcode": "000100---------------11000001000",
        "instruction_format": "VX",
        "full_name": "Vector Sum across Quarter Unsigned Byte Saturate"
    },
    "vsum4shs": {
        "mnemonic": "vsum4shs",
        "formatted_mnemonic": "vsum4shs",
        "opcode": "000100 ..... ..... ..... 11001 001000",
        "formatted_opcode": "000100---------------11001001000",
        "instruction_format": "VX",
        "full_name": "Vector Sum across Quarter Signed Halfword Saturate"
    },
    "vsum2sws": {
        "mnemonic": "vsum2sws",
        "formatted_mnemonic": "vsum2sws",
        "opcode": "000100 ..... ..... ..... 11010 001000",
        "formatted_opcode": "000100---------------11010001000",
        "instruction_format": "VX",
        "full_name": "Vector Sum across Half Signed Word Saturate"
    },
    "vsum4sbs": {
        "mnemonic": "vsum4sbs",
        "formatted_mnemonic": "vsum4sbs",
        "opcode": "000100 ..... ..... ..... 11100 001000",
        "formatted_opcode": "000100---------------11100001000",
        "instruction_format": "VX",
        "full_name": "Vector Sum across Quarter Signed Byte Saturate"
    },
    "vsumsws": {
        "mnemonic": "vsumsws",
        "formatted_mnemonic": "vsumsws",
        "opcode": "000100 ..... ..... ..... 11110 001000",
        "formatted_opcode": "000100---------------11110001000",
        "instruction_format": "VX",
        "full_name": "Vector Sum across Signed Word Saturate"
    },
    "vmuluwm": {
        "mnemonic": "vmuluwm",
        "formatted_mnemonic": "vmuluwm",
        "opcode": "000100 ..... ..... ..... 00010 001001",
        "formatted_opcode": "000100---------------00010001001",
        "instruction_format": "VX",
        "full_name": "Vector Multiply Unsigned Word Modulo"
    },
    "vcipherlast": {
        "mnemonic": "vcipherlast",
        "formatted_mnemonic": "vcipherlast",
        "opcode": "000100 ..... ..... ..... 10100 001001",
        "formatted_opcode": "000100---------------10100001001",
        "instruction_format": "VX",
        "full_name": "Vector AES Cipher Last"
    },
    "vncipherlast": {
        "mnemonic": "vncipherlast",
        "formatted_mnemonic": "vncipherlast",
        "opcode": "000100 ..... ..... ..... 10101 001001",
        "formatted_opcode": "000100---------------10101001001",
        "instruction_format": "VX",
        "full_name": "Vector AES Inverse Cipher Last"
    },
    "vaddfp": {
        "mnemonic": "vaddfp",
        "formatted_mnemonic": "vaddfp",
        "opcode": "000100 ..... ..... ..... 00000 001010",
        "formatted_opcode": "000100---------------00000001010",
        "instruction_format": "VX",
        "full_name": "Vector Add Floating-Point"
    },
    "vsubfp": {
        "mnemonic": "vsubfp",
        "formatted_mnemonic": "vsubfp",
        "opcode": "000100 ..... ..... ..... 00001 001010",
        "formatted_opcode": "000100---------------00001001010",
        "instruction_format": "VX",
        "full_name": "Vector Subtract Floating-Point"
    },
    "vrefp": {
        "mnemonic": "vrefp",
        "formatted_mnemonic": "vrefp",
        "opcode": "000100 ..... ///// ..... 00100 001010",
        "formatted_opcode": "000100---------------00100001010",
        "instruction_format": "VX",
        "full_name": "Vector Reciprocal Estimate Floating-Point"
    },
    "vrsqrtefp": {
        "mnemonic": "vrsqrtefp",
        "formatted_mnemonic": "vrsqrtefp",
        "opcode": "000100 ..... ///// ..... 00101 001010",
        "formatted_opcode": "000100---------------00101001010",
        "instruction_format": "VX",
        "full_name": "Vector Reciprocal Square Root Estimate Floating-Point"
    },
    "vexptefp": {
        "mnemonic": "vexptefp",
        "formatted_mnemonic": "vexptefp",
        "opcode": "000100 ..... ///// ..... 00110 001010",
        "formatted_opcode": "000100---------------00110001010",
        "instruction_format": "VX",
        "full_name": "Vector 2 Raised to the Exponent Estimate Floating-Point"
    },
    "vlogefp": {
        "mnemonic": "vlogefp",
        "formatted_mnemonic": "vlogefp",
        "opcode": "000100 ..... ..... ..... 00111 001010",
        "formatted_opcode": "000100---------------00111001010",
        "instruction_format": "VX",
        "full_name": "Vector Log Base 2 Estimate Floating-Point"
    },
    "vrfin": {
        "mnemonic": "vrfin",
        "formatted_mnemonic": "vrfin",
        "opcode": "000100 ..... ///// ..... 01000 001010",
        "formatted_opcode": "000100---------------01000001010",
        "instruction_format": "VX",
        "full_name": "Vector Round to Floating-Point Integral Nearest"
    },
    "vrfiz": {
        "mnemonic": "vrfiz",
        "formatted_mnemonic": "vrfiz",
        "opcode": "000100 ..... ///// ..... 01001 001010",
        "formatted_opcode": "000100---------------01001001010",
        "instruction_format": "VX",
        "full_name": "Vector Round to Floating-Point Integral toward Zero"
    },
    "vrfip": {
        "mnemonic": "vrfip",
        "formatted_mnemonic": "vrfip",
        "opcode": "000100 ..... ///// ..... 01010 001010",
        "formatted_opcode": "000100---------------01010001010",
        "instruction_format": "VX",
        "full_name": "Vector Round to Floating-Point Integral toward +Infinity"
    },
    "vrfim": {
        "mnemonic": "vrfim",
        "formatted_mnemonic": "vrfim",
        "opcode": "000100 ..... ///// ..... 01011 001010",
        "formatted_opcode": "000100---------------01011001010",
        "instruction_format": "VX",
        "full_name": "Vector Round to Floating-Point Integral toward -Infinity"
    },
    "vcfux": {
        "mnemonic": "vcfux",
        "formatted_mnemonic": "vcfux",
        "opcode": "000100 ..... ..... ..... 01100 001010",
        "formatted_opcode": "000100---------------01100001010",
        "instruction_format": "VX",
        "full_name": "Vector Convert with round to nearest Unsigned Word format to FP"
    },
    "vcfsx": {
        "mnemonic": "vcfsx",
        "formatted_mnemonic": "vcfsx",
        "opcode": "000100 ..... ..... ..... 01101 001010",
        "formatted_opcode": "000100---------------01101001010",
        "instruction_format": "VX",
        "full_name": "Vector Convert with round to nearest Signed Word format to FP"
    },
    "vctuxs": {
        "mnemonic": "vctuxs",
        "formatted_mnemonic": "vctuxs",
        "opcode": "000100 ..... ..... ..... 01110 001010",
        "formatted_opcode": "000100---------------01110001010",
        "instruction_format": "VX",
        "full_name": "Vector Convert with round to zero FP To Unsigned Word format Saturate"
    },
    "vctsxs": {
        "mnemonic": "vctsxs",
        "formatted_mnemonic": "vctsxs",
        "opcode": "000100 ..... ..... ..... 01111 001010",
        "formatted_opcode": "000100---------------01111001010",
        "instruction_format": "VX",
        "full_name": "Vector Convert with round to zero FP To Signed Word format Saturate"
    },
    "vmaxfp": {
        "mnemonic": "vmaxfp",
        "formatted_mnemonic": "vmaxfp",
        "opcode": "000100 ..... ..... ..... 10000 001010",
        "formatted_opcode": "000100---------------10000001010",
        "instruction_format": "VX",
        "full_name": "Vector Maximum Floating-Point"
    },
    "vminfp": {
        "mnemonic": "vminfp",
        "formatted_mnemonic": "vminfp",
        "opcode": "000100 ..... ..... ..... 10001 001010",
        "formatted_opcode": "000100---------------10001001010",
        "instruction_format": "VX",
        "full_name": "Vector Minimum Floating-Point"
    },
    "vmrghb": {
        "mnemonic": "vmrghb",
        "formatted_mnemonic": "vmrghb",
        "opcode": "000100 ..... ..... ..... 00000 001100",
        "formatted_opcode": "000100---------------00000001100",
        "instruction_format": "VX",
        "full_name": "Vector Merge High Byte"
    },
    "vmrghh": {
        "mnemonic": "vmrghh",
        "formatted_mnemonic": "vmrghh",
        "opcode": "000100 ..... ..... ..... 00001 001100",
        "formatted_opcode": "000100---------------00001001100",
        "instruction_format": "VX",
        "full_name": "Vector Merge High Halfword"
    },
    "vmrghw": {
        "mnemonic": "vmrghw",
        "formatted_mnemonic": "vmrghw",
        "opcode": "000100 ..... ..... ..... 00010 001100",
        "formatted_opcode": "000100---------------00010001100",
        "instruction_format": "VX",
        "full_name": "Vector Merge High Word"
    },
    "vmrglb": {
        "mnemonic": "vmrglb",
        "formatted_mnemonic": "vmrglb",
        "opcode": "000100 ..... ..... ..... 00100 001100",
        "formatted_opcode": "000100---------------00100001100",
        "instruction_format": "VX",
        "full_name": "Vector Merge Low Byte"
    },
    "vmrglh": {
        "mnemonic": "vmrglh",
        "formatted_mnemonic": "vmrglh",
        "opcode": "000100 ..... ..... ..... 00101 001100",
        "formatted_opcode": "000100---------------00101001100",
        "instruction_format": "VX",
        "full_name": "Vector Merge Low Halfword"
    },
    "vmrglw": {
        "mnemonic": "vmrglw",
        "formatted_mnemonic": "vmrglw",
        "opcode": "000100 ..... ..... ..... 00110 001100",
        "formatted_opcode": "000100---------------00110001100",
        "instruction_format": "VX",
        "full_name": "Vector Merge Low Word"
    },
    "vspltb": {
        "mnemonic": "vspltb",
        "formatted_mnemonic": "vspltb",
        "opcode": "000100 ..... /.... ..... 01000 001100",
        "formatted_opcode": "000100---------------01000001100",
        "instruction_format": "VX",
        "full_name": "Vector Splat Byte"
    },
    "vsplth": {
        "mnemonic": "vsplth",
        "formatted_mnemonic": "vsplth",
        "opcode": "000100 ..... //... ..... 01001 001100",
        "formatted_opcode": "000100---------------01001001100",
        "instruction_format": "VX",
        "full_name": "Vector Splat Halfword"
    },
    "vspltw": {
        "mnemonic": "vspltw",
        "formatted_mnemonic": "vspltw",
        "opcode": "000100 ..... ///.. ..... 01010 001100",
        "formatted_opcode": "000100---------------01010001100",
        "instruction_format": "VX",
        "full_name": "Vector Splat Word"
    },
    "vspltisb": {
        "mnemonic": "vspltisb",
        "formatted_mnemonic": "vspltisb",
        "opcode": "000100 ..... ..... ///// 01100 001100",
        "formatted_opcode": "000100---------------01100001100",
        "instruction_format": "VX",
        "full_name": "Vector Splat Immediate Signed Byte"
    },
    "vspltish": {
        "mnemonic": "vspltish",
        "formatted_mnemonic": "vspltish",
        "opcode": "000100 ..... ..... ///// 01101 001100",
        "formatted_opcode": "000100---------------01101001100",
        "instruction_format": "VX",
        "full_name": "Vector Splat Immediate Signed Halfword"
    },
    "vspltisw": {
        "mnemonic": "vspltisw",
        "formatted_mnemonic": "vspltisw",
        "opcode": "000100 ..... ..... ///// 01110 001100",
        "formatted_opcode": "000100---------------01110001100",
        "instruction_format": "VX",
        "full_name": "Vector Splat Immediate Signed Word"
    },
    "vslo": {
        "mnemonic": "vslo",
        "formatted_mnemonic": "vslo",
        "opcode": "000100 ..... ..... ..... 10000 001100",
        "formatted_opcode": "000100---------------10000001100",
        "instruction_format": "VX",
        "full_name": "Vector Shift Left by Octet"
    },
    "vsro": {
        "mnemonic": "vsro",
        "formatted_mnemonic": "vsro",
        "opcode": "000100 ..... ..... ..... 10001 001100",
        "formatted_opcode": "000100---------------10001001100",
        "instruction_format": "VX",
        "full_name": "Vector Shift Right by Octet"
    },
    "vgbbd": {
        "mnemonic": "vgbbd",
        "formatted_mnemonic": "vgbbd",
        "opcode": "000100 ..... ///// ..... 10100 001100",
        "formatted_opcode": "000100---------------10100001100",
        "instruction_format": "VX",
        "full_name": "Vector Gather Bits by Byte by Doubleword"
    },
    "vbpermq": {
        "mnemonic": "vbpermq",
        "formatted_mnemonic": "vbpermq",
        "opcode": "000100 ..... ..... ..... 10101 001100",
        "formatted_opcode": "000100---------------10101001100",
        "instruction_format": "VX",
        "full_name": "Vector Bit Permute Quadword"
    },
    "vbpermd": {
        "mnemonic": "vbpermd",
        "formatted_mnemonic": "vbpermd",
        "opcode": "000100 ..... ..... ..... 10111 001100",
        "formatted_opcode": "000100---------------10111001100",
        "instruction_format": "VX",
        "full_name": "Vector Bit Permute Doubleword"
    },
    "vmrgow": {
        "mnemonic": "vmrgow",
        "formatted_mnemonic": "vmrgow",
        "opcode": "000100 ..... ..... ..... 11010 001100",
        "formatted_opcode": "000100---------------11010001100",
        "instruction_format": "VX",
        "full_name": "Vector Merge Odd Word"
    },
    "vmrgew": {
        "mnemonic": "vmrgew",
        "formatted_mnemonic": "vmrgew",
        "opcode": "000100 ..... ..... ..... 11110 001100",
        "formatted_opcode": "000100---------------11110001100",
        "instruction_format": "VX",
        "full_name": "Vector Merge Even Word"
    },
    "vextractub": {
        "mnemonic": "vextractub",
        "formatted_mnemonic": "vextractub",
        "opcode": "000100 ..... /.... ..... 01000 001101",
        "formatted_opcode": "000100---------------01000001101",
        "instruction_format": "VX",
        "full_name": "Vector Extract Unsigned Byte"
    },
    "vextractuh": {
        "mnemonic": "vextractuh",
        "formatted_mnemonic": "vextractuh",
        "opcode": "000100 ..... /.... ..... 01001 001101",
        "formatted_opcode": "000100---------------01001001101",
        "instruction_format": "VX",
        "full_name": "Vector Extract Unsigned Halfword"
    },
    "vextractuw": {
        "mnemonic": "vextractuw",
        "formatted_mnemonic": "vextractuw",
        "opcode": "000100 ..... /.... ..... 01010 001101",
        "formatted_opcode": "000100---------------01010001101",
        "instruction_format": "VX",
        "full_name": "Vector Extract Unsigned Word"
    },
    "vextractd": {
        "mnemonic": "vextractd",
        "formatted_mnemonic": "vextractd",
        "opcode": "000100 ..... /.... ..... 01011 001101",
        "formatted_opcode": "000100---------------01011001101",
        "instruction_format": "VX",
        "full_name": "Vector Extract Doubleword"
    },
    "vinsertb": {
        "mnemonic": "vinsertb",
        "formatted_mnemonic": "vinsertb",
        "opcode": "000100 ..... /.... ..... 01100 001101",
        "formatted_opcode": "000100---------------01100001101",
        "instruction_format": "VX",
        "full_name": "Vector Insert Byte"
    },
    "vinserth": {
        "mnemonic": "vinserth",
        "formatted_mnemonic": "vinserth",
        "opcode": "000100 ..... /.... ..... 01101 001101",
        "formatted_opcode": "000100---------------01101001101",
        "instruction_format": "VX",
        "full_name": "Vector Insert Halfword"
    },
    "vinsertw": {
        "mnemonic": "vinsertw",
        "formatted_mnemonic": "vinsertw",
        "opcode": "000100 ..... /.... ..... 01110 001101",
        "formatted_opcode": "000100---------------01110001101",
        "instruction_format": "VX",
        "full_name": "Vector Insert Word"
    },
    "vinsertd": {
        "mnemonic": "vinsertd",
        "formatted_mnemonic": "vinsertd",
        "opcode": "000100 ..... /.... ..... 01111 001101",
        "formatted_opcode": "000100---------------01111001101",
        "instruction_format": "VX",
        "full_name": "Vector Insert Doubleword"
    },
    "vextublx": {
        "mnemonic": "vextublx",
        "formatted_mnemonic": "vextublx",
        "opcode": "000100 ..... ..... ..... 11000 001101",
        "formatted_opcode": "000100---------------11000001101",
        "instruction_format": "VX",
        "full_name": "Vector Extract Unsigned Byte Left-Indexed"
    },
    "vextuhlx": {
        "mnemonic": "vextuhlx",
        "formatted_mnemonic": "vextuhlx",
        "opcode": "000100 ..... ..... ..... 11001 001101",
        "formatted_opcode": "000100---------------11001001101",
        "instruction_format": "VX",
        "full_name": "Vector Extract Unsigned Halfword Left-Indexed"
    },
    "vextuwlx": {
        "mnemonic": "vextuwlx",
        "formatted_mnemonic": "vextuwlx",
        "opcode": "000100 ..... ..... ..... 11010 001101",
        "formatted_opcode": "000100---------------11010001101",
        "instruction_format": "VX",
        "full_name": "Vector Extract Unsigned Word Left-Indexed"
    },
    "vextubrx": {
        "mnemonic": "vextubrx",
        "formatted_mnemonic": "vextubrx",
        "opcode": "000100 ..... ..... ..... 11100 001101",
        "formatted_opcode": "000100---------------11100001101",
        "instruction_format": "VX",
        "full_name": "Vector Extract Unsigned Byte Right-Indexed"
    },
    "vextuhrx": {
        "mnemonic": "vextuhrx",
        "formatted_mnemonic": "vextuhrx",
        "opcode": "000100 ..... ..... ..... 11101 001101",
        "formatted_opcode": "000100---------------11101001101",
        "instruction_format": "VX",
        "full_name": "Vector Extract Unsigned Halfword Right-Indexed"
    },
    "vextuwrx": {
        "mnemonic": "vextuwrx",
        "formatted_mnemonic": "vextuwrx",
        "opcode": "000100 ..... ..... ..... 11110 001101",
        "formatted_opcode": "000100---------------11110001101",
        "instruction_format": "VX",
        "full_name": "Vector Extract Unsigned Word Right-Indexed"
    },
    "vpkuhum": {
        "mnemonic": "vpkuhum",
        "formatted_mnemonic": "vpkuhum",
        "opcode": "000100 ..... ..... ..... 00000 001110",
        "formatted_opcode": "000100---------------00000001110",
        "instruction_format": "VX",
        "full_name": "Vector Pack Unsigned Halfword Unsigned Modulo"
    },
    "vpkuwum": {
        "mnemonic": "vpkuwum",
        "formatted_mnemonic": "vpkuwum",
        "opcode": "000100 ..... ..... ..... 00001 001110",
        "formatted_opcode": "000100---------------00001001110",
        "instruction_format": "VX",
        "full_name": "Vector Pack Unsigned Word Unsigned Modulo"
    },
    "vpkuhus": {
        "mnemonic": "vpkuhus",
        "formatted_mnemonic": "vpkuhus",
        "opcode": "000100 ..... ..... ..... 00010 001110",
        "formatted_opcode": "000100---------------00010001110",
        "instruction_format": "VX",
        "full_name": "Vector Pack Unsigned Halfword Unsigned Saturate"
    },
    "vpkuwus": {
        "mnemonic": "vpkuwus",
        "formatted_mnemonic": "vpkuwus",
        "opcode": "000100 ..... ..... ..... 00011 001110",
        "formatted_opcode": "000100---------------00011001110",
        "instruction_format": "VX",
        "full_name": "Vector Pack Unsigned Word Unsigned Saturate"
    },
    "vpkshus": {
        "mnemonic": "vpkshus",
        "formatted_mnemonic": "vpkshus",
        "opcode": "000100 ..... ..... ..... 00100 001110",
        "formatted_opcode": "000100---------------00100001110",
        "instruction_format": "VX",
        "full_name": "Vector Pack Signed Halfword Unsigned Saturate"
    },
    "vpkswus": {
        "mnemonic": "vpkswus",
        "formatted_mnemonic": "vpkswus",
        "opcode": "000100 ..... ..... ..... 00101 001110",
        "formatted_opcode": "000100---------------00101001110",
        "instruction_format": "VX",
        "full_name": "Vector Pack Signed Word Unsigned Saturate"
    },
    "vpkshss": {
        "mnemonic": "vpkshss",
        "formatted_mnemonic": "vpkshss",
        "opcode": "000100 ..... ..... ..... 00110 001110",
        "formatted_opcode": "000100---------------00110001110",
        "instruction_format": "VX",
        "full_name": "Vector Pack Signed Halfword Signed Saturate"
    },
    "vpkswss": {
        "mnemonic": "vpkswss",
        "formatted_mnemonic": "vpkswss",
        "opcode": "000100 ..... ..... ..... 00111 001110",
        "formatted_opcode": "000100---------------00111001110",
        "instruction_format": "VX",
        "full_name": "Vector Pack Signed Word Signed Saturate"
    },
    "vupkhsb": {
        "mnemonic": "vupkhsb",
        "formatted_mnemonic": "vupkhsb",
        "opcode": "000100 ..... ///// ..... 01000 001110",
        "formatted_opcode": "000100---------------01000001110",
        "instruction_format": "VX",
        "full_name": "Vector Unpack High Signed Byte"
    },
    "vupkhsh": {
        "mnemonic": "vupkhsh",
        "formatted_mnemonic": "vupkhsh",
        "opcode": "000100 ..... ///// ..... 01001 001110",
        "formatted_opcode": "000100---------------01001001110",
        "instruction_format": "VX",
        "full_name": "Vector Unpack High Signed Halfword"
    },
    "vupklsb": {
        "mnemonic": "vupklsb",
        "formatted_mnemonic": "vupklsb",
        "opcode": "000100 ..... ///// ..... 01010 001110",
        "formatted_opcode": "000100---------------01010001110",
        "instruction_format": "VX",
        "full_name": "Vector Unpack Low Signed Byte"
    },
    "vupklsh": {
        "mnemonic": "vupklsh",
        "formatted_mnemonic": "vupklsh",
        "opcode": "000100 ..... ///// ..... 01011 001110",
        "formatted_opcode": "000100---------------01011001110",
        "instruction_format": "VX",
        "full_name": "Vector Unpack Low Signed Halfword"
    },
    "vpkpx": {
        "mnemonic": "vpkpx",
        "formatted_mnemonic": "vpkpx",
        "opcode": "000100 ..... ..... ..... 01100 001110",
        "formatted_opcode": "000100---------------01100001110",
        "instruction_format": "VX",
        "full_name": "Vector Pack Pixel"
    },
    "vupkhpx": {
        "mnemonic": "vupkhpx",
        "formatted_mnemonic": "vupkhpx",
        "opcode": "000100 ..... ///// ..... 01101 001110",
        "formatted_opcode": "000100---------------01101001110",
        "instruction_format": "VX",
        "full_name": "Vector Unpack High Pixel"
    },
    "vupklpx": {
        "mnemonic": "vupklpx",
        "formatted_mnemonic": "vupklpx",
        "opcode": "000100 ..... ///// ..... 01111 001110",
        "formatted_opcode": "000100---------------01111001110",
        "instruction_format": "VX",
        "full_name": "Vector Unpack Low Pixel"
    },
    "vpkudum": {
        "mnemonic": "vpkudum",
        "formatted_mnemonic": "vpkudum",
        "opcode": "000100 ..... ..... ..... 10001 001110",
        "formatted_opcode": "000100---------------10001001110",
        "instruction_format": "VX",
        "full_name": "Vector Pack Unsigned Doubleword Unsigned Modulo"
    },
    "vpkudus": {
        "mnemonic": "vpkudus",
        "formatted_mnemonic": "vpkudus",
        "opcode": "000100 ..... ..... ..... 10011 001110",
        "formatted_opcode": "000100---------------10011001110",
        "instruction_format": "VX",
        "full_name": "Vector Pack Unsigned Doubleword Unsigned Saturate"
    },
    "vpksdus": {
        "mnemonic": "vpksdus",
        "formatted_mnemonic": "vpksdus",
        "opcode": "000100 ..... ..... ..... 10101 001110",
        "formatted_opcode": "000100---------------10101001110",
        "instruction_format": "VX",
        "full_name": "Vector Pack Signed Doubleword Unsigned Saturate"
    },
    "vpksdss": {
        "mnemonic": "vpksdss",
        "formatted_mnemonic": "vpksdss",
        "opcode": "000100 ..... ..... ..... 10111 001110",
        "formatted_opcode": "000100---------------10111001110",
        "instruction_format": "VX",
        "full_name": "Vector Pack Signed Doubleword Signed Saturate"
    },
    "vupkhsw": {
        "mnemonic": "vupkhsw",
        "formatted_mnemonic": "vupkhsw",
        "opcode": "000100 ..... ///// ..... 11001 001110",
        "formatted_opcode": "000100---------------11001001110",
        "instruction_format": "VX",
        "full_name": "Vector Unpack High Signed Word"
    },
    "vupklsw": {
        "mnemonic": "vupklsw",
        "formatted_mnemonic": "vupklsw",
        "opcode": "000100 ..... ///// ..... 11011 001110",
        "formatted_opcode": "000100---------------11011001110",
        "instruction_format": "VX",
        "full_name": "Vector Unpack Low Signed Word"
    },
    "vmhaddshs": {
        "mnemonic": "vmhaddshs",
        "formatted_mnemonic": "vmhaddshs",
        "opcode": "000100 ..... ..... ..... ..... 100000",
        "formatted_opcode": "000100--------------------100000",
        "instruction_format": "VA",
        "full_name": "Vector Multiply-High-Add Signed Halfword Saturate"
    },
    "vmhraddshs": {
        "mnemonic": "vmhraddshs",
        "formatted_mnemonic": "vmhraddshs",
        "opcode": "000100 ..... ..... ..... ..... 100001",
        "formatted_opcode": "000100--------------------100001",
        "instruction_format": "VA",
        "full_name": "Vector Multiply-High-Round-Add Signed Halfword Saturate"
    },
    "vmladduhm": {
        "mnemonic": "vmladduhm",
        "formatted_mnemonic": "vmladduhm",
        "opcode": "000100 ..... ..... ..... ..... 100010",
        "formatted_opcode": "000100--------------------100010",
        "instruction_format": "VA",
        "full_name": "Vector Multiply-Low-Add Unsigned Halfword Modulo"
    },
    "vmsumudm": {
        "mnemonic": "vmsumudm",
        "formatted_mnemonic": "vmsumudm",
        "opcode": "000100 ..... ..... ..... ..... 100011",
        "formatted_opcode": "000100--------------------100011",
        "instruction_format": "VA",
        "full_name": "Vector Multiply-Sum Unsigned Doubleword Modulo"
    },
    "vmsumubm": {
        "mnemonic": "vmsumubm",
        "formatted_mnemonic": "vmsumubm",
        "opcode": "000100 ..... ..... ..... ..... 100100",
        "formatted_opcode": "000100--------------------100100",
        "instruction_format": "VA",
        "full_name": "Vector Multiply-Sum Unsigned Byte Modulo"
    },
    "vmsummbm": {
        "mnemonic": "vmsummbm",
        "formatted_mnemonic": "vmsummbm",
        "opcode": "000100 ..... ..... ..... ..... 100101",
        "formatted_opcode": "000100--------------------100101",
        "instruction_format": "VA",
        "full_name": "Vector Multiply-Sum Mixed Byte Modulo"
    },
    "vmsumuhm": {
        "mnemonic": "vmsumuhm",
        "formatted_mnemonic": "vmsumuhm",
        "opcode": "000100 ..... ..... ..... ..... 100110",
        "formatted_opcode": "000100--------------------100110",
        "instruction_format": "VA",
        "full_name": "Vector Multiply-Sum Unsigned Halfword Modulo"
    },
    "vmsumuhs": {
        "mnemonic": "vmsumuhs",
        "formatted_mnemonic": "vmsumuhs",
        "opcode": "000100 ..... ..... ..... ..... 100111",
        "formatted_opcode": "000100--------------------100111",
        "instruction_format": "VA",
        "full_name": "Vector Multiply-Sum Unsigned Halfword Saturate"
    },
    "vmsumshm": {
        "mnemonic": "vmsumshm",
        "formatted_mnemonic": "vmsumshm",
        "opcode": "000100 ..... ..... ..... ..... 101000",
        "formatted_opcode": "000100--------------------101000",
        "instruction_format": "VA",
        "full_name": "Vector Multiply-Sum Signed Halfword Modulo"
    },
    "vmsumshs": {
        "mnemonic": "vmsumshs",
        "formatted_mnemonic": "vmsumshs",
        "opcode": "000100 ..... ..... ..... ..... 101001",
        "formatted_opcode": "000100--------------------101001",
        "instruction_format": "VA",
        "full_name": "Vector Multiply-Sum Signed Halfword Saturate"
    },
    "vsel": {
        "mnemonic": "vsel",
        "formatted_mnemonic": "vsel",
        "opcode": "000100 ..... ..... ..... ..... 101010",
        "formatted_opcode": "000100--------------------101010",
        "instruction_format": "VA",
        "full_name": "Vector Select"
    },
    "vperm": {
        "mnemonic": "vperm",
        "formatted_mnemonic": "vperm",
        "opcode": "000100 ..... ..... ..... ..... 101011",
        "formatted_opcode": "000100--------------------101011",
        "instruction_format": "VA",
        "full_name": "Vector Permute"
    },
    "vsldoi": {
        "mnemonic": "vsldoi",
        "formatted_mnemonic": "vsldoi",
        "opcode": "000100 ..... ..... ..... /.... 101100",
        "formatted_opcode": "000100--------------------101100",
        "instruction_format": "VA",
        "full_name": "Vector Shift Left Double by Octet Immediate"
    },
    "vpermxor": {
        "mnemonic": "vpermxor",
        "formatted_mnemonic": "vpermxor",
        "opcode": "000100 ..... ..... ..... ..... 101101",
        "formatted_opcode": "000100--------------------101101",
        "instruction_format": "VA",
        "full_name": "Vector Permute & Exclusive-OR"
    },
    "vmaddfp": {
        "mnemonic": "vmaddfp",
        "formatted_mnemonic": "vmaddfp",
        "opcode": "000100 ..... ..... ..... ..... 101110",
        "formatted_opcode": "000100--------------------101110",
        "instruction_format": "VA",
        "full_name": "Vector Multiply-Add Floating-Point"
    },
    "vnmsubfp": {
        "mnemonic": "vnmsubfp",
        "formatted_mnemonic": "vnmsubfp",
        "opcode": "000100 ..... ..... ..... ..... 101111",
        "formatted_opcode": "000100--------------------101111",
        "instruction_format": "VA",
        "full_name": "Vector Negative Multiply-Subtract Floating-Point"
    },
    "maddhd": {
        "mnemonic": "maddhd",
        "formatted_mnemonic": "maddhd",
        "opcode": "000100 ..... ..... ..... ..... 110000",
        "formatted_opcode": "000100--------------------110000",
        "instruction_format": "VA",
        "full_name": "Multiply-Add High Doubleword"
    },
    "maddhdu": {
        "mnemonic": "maddhdu",
        "formatted_mnemonic": "maddhdu",
        "opcode": "000100 ..... ..... ..... ..... 110001",
        "formatted_opcode": "000100--------------------110001",
        "instruction_format": "VA",
        "full_name": "Multiply-Add High Doubleword Unsigned"
    },
    "maddld": {
        "mnemonic": "maddld",
        "formatted_mnemonic": "maddld",
        "opcode": "000100 ..... ..... ..... ..... 110011",
        "formatted_opcode": "000100--------------------110011",
        "instruction_format": "VA",
        "full_name": "Multiply-Add Low Doubleword"
    },
    "vpermr": {
        "mnemonic": "vpermr",
        "formatted_mnemonic": "vpermr",
        "opcode": "000100 ..... ..... ..... ..... 111011",
        "formatted_opcode": "000100--------------------111011",
        "instruction_format": "VA",
        "full_name": "Vector Permute Right-indexed"
    },
    "vaddeuqm": {
        "mnemonic": "vaddeuqm",
        "formatted_mnemonic": "vaddeuqm",
        "opcode": "000100 ..... ..... ..... ..... 111100",
        "formatted_opcode": "000100--------------------111100",
        "instruction_format": "VA",
        "full_name": "Vector Add Extended Unsigned Quadword Modulo"
    },
    "vaddecuq": {
        "mnemonic": "vaddecuq",
        "formatted_mnemonic": "vaddecuq",
        "opcode": "000100 ..... ..... ..... ..... 111101",
        "formatted_opcode": "000100--------------------111101",
        "instruction_format": "VA",
        "full_name": "Vector Add Extended & write Carry Unsigned Quadword"
    },
    "vsubeuqm": {
        "mnemonic": "vsubeuqm",
        "formatted_mnemonic": "vsubeuqm",
        "opcode": "000100 ..... ..... ..... ..... 111110",
        "formatted_opcode": "000100--------------------111110",
        "instruction_format": "VA",
        "full_name": "Vector Subtract Extended Unsigned Quadword Modulo"
    },
    "vsubecuq": {
        "mnemonic": "vsubecuq",
        "formatted_mnemonic": "vsubecuq",
        "opcode": "000100 ..... ..... ..... ..... 111111",
        "formatted_opcode": "000100--------------------111111",
        "instruction_format": "VA",
        "full_name": "Vector Subtract Extended & write Carry Unsigned Quadword"
    },
    "mulli": {
        "mnemonic": "mulli",
        "formatted_mnemonic": "mulli",
        "opcode": "000111 ..... ..... ..... ..... ......",
        "formatted_opcode": "000111--------------------------",
        "instruction_format": "D",
        "full_name": "Multiply Low Immediate"
    },
    "subfic": {
        "mnemonic": "subfic",
        "formatted_mnemonic": "subfic",
        "opcode": "001000 ..... ..... ..... ..... ......",
        "formatted_opcode": "001000--------------------------",
        "instruction_format": "D",
        "full_name": "Subtract From Immediate Carrying"
    },
    "cmpli": {
        "mnemonic": "cmpli",
        "formatted_mnemonic": "cmpli",
        "opcode": "001010 .../. ..... ..... ..... ......",
        "formatted_opcode": "001010--------------------------",
        "instruction_format": "D",
        "full_name": "Compare Logical Immediate"
    },
    "cmpi": {
        "mnemonic": "cmpi",
        "formatted_mnemonic": "cmpi",
        "opcode": "001011 .../. ..... ..... ..... ......",
        "formatted_opcode": "001011--------------------------",
        "instruction_format": "D",
        "full_name": "Compare Immediate"
    },
    "addic": {
        "mnemonic": "addic",
        "formatted_mnemonic": "addic",
        "opcode": "001100 ..... ..... ..... ..... ......",
        "formatted_opcode": "001100--------------------------",
        "instruction_format": "D",
        "full_name": "Add Immediate Carrying"
    },
    "addic.": {
        "mnemonic": "addic.",
        "formatted_mnemonic": "addic_dot",
        "opcode": "001101 ..... ..... ..... ..... ......",
        "formatted_opcode": "001101--------------------------",
        "instruction_format": "D",
        "full_name": "Add Immediate Carrying & record"
    },
    "addi": {
        "mnemonic": "addi",
        "formatted_mnemonic": "addi",
        "opcode": "001110 ..... ..... ..... ..... ......",
        "formatted_opcode": "001110--------------------------",
        "instruction_format": "D",
        "full_name": "Add Immediate"
    },
    "addis": {
        "mnemonic": "addis",
        "formatted_mnemonic": "addis",
        "opcode": "001111 ..... ..... ..... ..... ......",
        "formatted_opcode": "001111--------------------------",
        "instruction_format": "D",
        "full_name": "Add Immediate Shifted"
    },
    "bc[l][a]": {
        "mnemonic": "bc[l][a]",
        "formatted_mnemonic": "bc_l_a",
        "opcode": "010000 ..... ..... ..... ..... ......",
        "formatted_opcode": "010000--------------------------",
        "instruction_format": "B",
        "full_name": "Branch Conditional [& Link] [Absolute]"
    },
    "scv": {
        "mnemonic": "scv",
        "formatted_mnemonic": "scv",
        "opcode": "010001 ///// ///// ////. ..... .///01",
        "formatted_opcode": "010001------------------------01",
        "instruction_format": "SC",
        "full_name": "System Call Vectored"
    },
    "sc": {
        "mnemonic": "sc",
        "formatted_mnemonic": "sc",
        "opcode": "010001 ///// ///// ////. ..... .///1/",
        "formatted_opcode": "010001------------------------1-",
        "instruction_format": "SC",
        "full_name": "System Call"
    },
    "b[l][a]": {
        "mnemonic": "b[l][a]",
        "formatted_mnemonic": "b_l_a",
        "opcode": "010010 ..... ..... ..... ..... ......",
        "formatted_opcode": "010010--------------------------",
        "instruction_format": "I",
        "full_name": "Branch [& Link] [Absolute]"
    },
    "mcrf": {
        "mnemonic": "mcrf",
        "formatted_mnemonic": "mcrf",
        "opcode": "010011 ...// ...// ///// 00000 00000/",
        "formatted_opcode": "010011---------------0000000000-",
        "instruction_format": "XL",
        "full_name": "Move CR Field"
    },
    "crnor": {
        "mnemonic": "crnor",
        "formatted_mnemonic": "crnor",
        "opcode": "010011 ..... ..... ..... 00001 00001/",
        "formatted_opcode": "010011---------------0000100001-",
        "instruction_format": "XL",
        "full_name": "CR NOR"
    },
    "crandc": {
        "mnemonic": "crandc",
        "formatted_mnemonic": "crandc",
        "opcode": "010011 ..... ..... ..... 00100 00001/",
        "formatted_opcode": "010011---------------0010000001-",
        "instruction_format": "XL",
        "full_name": "CR AND with Complement"
    },
    "crxor": {
        "mnemonic": "crxor",
        "formatted_mnemonic": "crxor",
        "opcode": "010011 ..... ..... ..... 00110 00001/",
        "formatted_opcode": "010011---------------0011000001-",
        "instruction_format": "XL",
        "full_name": "CR XOR"
    },
    "crnand": {
        "mnemonic": "crnand",
        "formatted_mnemonic": "crnand",
        "opcode": "010011 ..... ..... ..... 00111 00001/",
        "formatted_opcode": "010011---------------0011100001-",
        "instruction_format": "XL",
        "full_name": "CR NAND"
    },
    "crand": {
        "mnemonic": "crand",
        "formatted_mnemonic": "crand",
        "opcode": "010011 ..... ..... ..... 01000 00001/",
        "formatted_opcode": "010011---------------0100000001-",
        "instruction_format": "XL",
        "full_name": "CR AND"
    },
    "creqv": {
        "mnemonic": "creqv",
        "formatted_mnemonic": "creqv",
        "opcode": "010011 ..... ..... ..... 01001 00001/",
        "formatted_opcode": "010011---------------0100100001-",
        "instruction_format": "XL",
        "full_name": "CR Equivalent"
    },
    "crorc": {
        "mnemonic": "crorc",
        "formatted_mnemonic": "crorc",
        "opcode": "010011 ..... ..... ..... 01101 00001/",
        "formatted_opcode": "010011---------------0110100001-",
        "instruction_format": "XL",
        "full_name": "CR OR with Complement"
    },
    "cror": {
        "mnemonic": "cror",
        "formatted_mnemonic": "cror",
        "opcode": "010011 ..... ..... ..... 01110 00001/",
        "formatted_opcode": "010011---------------0111000001-",
        "instruction_format": "XL",
        "full_name": "CR OR"
    },
    "addpcis": {
        "mnemonic": "addpcis",
        "formatted_mnemonic": "addpcis",
        "opcode": "010011 ..... ..... ..... ..... 00010.",
        "formatted_opcode": "010011--------------------00010-",
        "instruction_format": "DX",
        "full_name": "Add PC Immediate Shifted"
    },
    "bclr[l]": {
        "mnemonic": "bclr[l]",
        "formatted_mnemonic": "bclr_l",
        "opcode": "010011 ..... ..... ///.. 00000 10000.",
        "formatted_opcode": "010011---------------0000010000-",
        "instruction_format": "XL",
        "full_name": "Branch Conditional to LR [& Link]"
    },
    "bcctr[l]": {
        "mnemonic": "bcctr[l]",
        "formatted_mnemonic": "bcctr_l",
        "opcode": "010011 ..... ..... ///.. 10000 10000.",
        "formatted_opcode": "010011---------------1000010000-",
        "instruction_format": "XL",
        "full_name": "Branch Conditional to CTR [& Link]"
    },
    "bctar[l]": {
        "mnemonic": "bctar[l]",
        "formatted_mnemonic": "bctar_l",
        "opcode": "010011 ..... ..... ///.. 10001 10000.",
        "formatted_opcode": "010011---------------1000110000-",
        "instruction_format": "XL",
        "full_name": "Branch Conditional to BTAR [& Link]"
    },
    "rfid": {
        "mnemonic": "rfid",
        "formatted_mnemonic": "rfid",
        "opcode": "010011 ///// ///// ///// 00000 10010/",
        "formatted_opcode": "010011---------------0000010010-",
        "instruction_format": "XL",
        "full_name": "Return from Interrupt Doubleword"
    },
    "rfscv": {
        "mnemonic": "rfscv",
        "formatted_mnemonic": "rfscv",
        "opcode": "010011 ///// ///// ///// 00010 10010/",
        "formatted_opcode": "010011---------------0001010010-",
        "instruction_format": "XL",
        "full_name": "Return From System Call Vectored"
    },
    "rfebb": {
        "mnemonic": "rfebb",
        "formatted_mnemonic": "rfebb",
        "opcode": "010011 ///// ///// ////. 00100 10010/",
        "formatted_opcode": "010011---------------0010010010-",
        "instruction_format": "XL",
        "full_name": "Return from Event Based Branch"
    },
    "hrfid": {
        "mnemonic": "hrfid",
        "formatted_mnemonic": "hrfid",
        "opcode": "010011 ///// ///// ///// 01000 10010/",
        "formatted_opcode": "010011---------------0100010010-",
        "instruction_format": "XL",
        "full_name": "Return From Interrupt Doubleword Hypervisor"
    },
    "stop": {
        "mnemonic": "stop",
        "formatted_mnemonic": "stop",
        "opcode": "010011 ///// ///// ///// 01011 10010/",
        "formatted_opcode": "010011---------------0101110010-",
        "instruction_format": "XL",
        "full_name": "Stop"
    },
    "isync": {
        "mnemonic": "isync",
        "formatted_mnemonic": "isync",
        "opcode": "010011 ///// ///// ///// 00100 10110/",
        "formatted_opcode": "010011---------------0010010110-",
        "instruction_format": "XL",
        "full_name": "Instruction Synchronize"
    },
    "rlwimi[.]": {
        "mnemonic": "rlwimi[.]",
        "formatted_mnemonic": "rlwimi_dot",
        "opcode": "010100 ..... ..... ..... ..... ......",
        "formatted_opcode": "010100--------------------------",
        "instruction_format": "M",
        "full_name": "Rotate Left Word Immediate then Mask Insert"
    },
    "rlwinm[.]": {
        "mnemonic": "rlwinm[.]",
        "formatted_mnemonic": "rlwinm_dot",
        "opcode": "010101 ..... ..... ..... ..... ......",
        "formatted_opcode": "010101--------------------------",
        "instruction_format": "M",
        "full_name": "Rotate Left Word Immediate then AND with Mask"
    },
    "rlwnm[.]": {
        "mnemonic": "rlwnm[.]",
        "formatted_mnemonic": "rlwnm_dot",
        "opcode": "010111 ..... ..... ..... ..... ......",
        "formatted_opcode": "010111--------------------------",
        "instruction_format": "M",
        "full_name": "Rotate Left Word then AND with Mask"
    },
    "ori": {
        "mnemonic": "ori",
        "formatted_mnemonic": "ori",
        "opcode": "011000 ..... ..... ..... ..... ......",
        "formatted_opcode": "011000--------------------------",
        "instruction_format": "D",
        "full_name": "OR Immediate"
    },
    "oris": {
        "mnemonic": "oris",
        "formatted_mnemonic": "oris",
        "opcode": "011001 ..... ..... ..... ..... ......",
        "formatted_opcode": "011001--------------------------",
        "instruction_format": "D",
        "full_name": "OR Immediate Shifted"
    },
    "xnop": {
        "mnemonic": "xnop",
        "formatted_mnemonic": "xnop",
        "opcode": "011010 00000 00000 00000 00000 000000",
        "formatted_opcode": "01101000000000000000000000000000",
        "instruction_format": "D",
        "full_name": "Executed No Operation"
    },
    "xori": {
        "mnemonic": "xori",
        "formatted_mnemonic": "xori",
        "opcode": "011010 ..... ..... ..... ..... ......",
        "formatted_opcode": "011010--------------------------",
        "instruction_format": "D",
        "full_name": "XOR Immediate"
    },
    "xoris": {
        "mnemonic": "xoris",
        "formatted_mnemonic": "xoris",
        "opcode": "011011 ..... ..... ..... ..... ......",
        "formatted_opcode": "011011--------------------------",
        "instruction_format": "D",
        "full_name": "XOR Immediate Shifted"
    },
    "andi.": {
        "mnemonic": "andi.",
        "formatted_mnemonic": "andi_dot",
        "opcode": "011100 ..... ..... ..... ..... ......",
        "formatted_opcode": "011100--------------------------",
        "instruction_format": "D",
        "full_name": "AND Immediate & record"
    },
    "andis.": {
        "mnemonic": "andis.",
        "formatted_mnemonic": "andis_dot",
        "opcode": "011101 ..... ..... ..... ..... ......",
        "formatted_opcode": "011101--------------------------",
        "instruction_format": "D",
        "full_name": "AND Immediate Shifted & record"
    },
    "rldicl[.]": {
        "mnemonic": "rldicl[.]",
        "formatted_mnemonic": "rldicl_dot",
        "opcode": "011110 ..... ..... ..... ..... .000..",
        "formatted_opcode": "011110---------------------000--",
        "instruction_format": "MD",
        "full_name": "Rotate Left Doubleword Immediate then Clear Left"
    },
    "rldicr[.]": {
        "mnemonic": "rldicr[.]",
        "formatted_mnemonic": "rldicr_dot",
        "opcode": "011110 ..... ..... ..... ..... .001..",
        "formatted_opcode": "011110---------------------001--",
        "instruction_format": "MD",
        "full_name": "Rotate Left Doubleword Immediate then Clear Right"
    },
    "rldic[.]": {
        "mnemonic": "rldic[.]",
        "formatted_mnemonic": "rldic_dot",
        "opcode": "011110 ..... ..... ..... ..... .010..",
        "formatted_opcode": "011110---------------------010--",
        "instruction_format": "MD",
        "full_name": "Rotate Left Doubleword Immediate then Clear"
    },
    "rldimi[.]": {
        "mnemonic": "rldimi[.]",
        "formatted_mnemonic": "rldimi_dot",
        "opcode": "011110 ..... ..... ..... ..... .011..",
        "formatted_opcode": "011110---------------------011--",
        "instruction_format": "MD",
        "full_name": "Rotate Left Doubleword Immediate then Mask Insert"
    },
    "rldcl[.]": {
        "mnemonic": "rldcl[.]",
        "formatted_mnemonic": "rldcl_dot",
        "opcode": "011110 ..... ..... ..... ..... .1000.",
        "formatted_opcode": "011110---------------------1000-",
        "instruction_format": "MDS",
        "full_name": "Rotate Left Doubleword then Clear Left"
    },
    "rldcr[.]": {
        "mnemonic": "rldcr[.]",
        "formatted_mnemonic": "rldcr_dot",
        "opcode": "011110 ..... ..... ..... ..... .1001.",
        "formatted_opcode": "011110---------------------1001-",
        "instruction_format": "MDS",
        "full_name": "Rotate Left Doubleword then Clear Right"
    },
    "cmp": {
        "mnemonic": "cmp",
        "formatted_mnemonic": "cmp",
        "opcode": "011111 .../. ..... ..... 00000 00000/",
        "formatted_opcode": "011111---------------0000000000-",
        "instruction_format": "X",
        "full_name": "Compare"
    },
    "cmpl": {
        "mnemonic": "cmpl",
        "formatted_mnemonic": "cmpl",
        "opcode": "011111 .../. ..... ..... 00001 00000/",
        "formatted_opcode": "011111---------------0000100000-",
        "instruction_format": "X",
        "full_name": "Compare Logical"
    },
    "setb": {
        "mnemonic": "setb",
        "formatted_mnemonic": "setb",
        "opcode": "011111 ..... ...// ///// 00100 000000",
        "formatted_opcode": "011111---------------00100000000",
        "instruction_format": "VX",
        "full_name": "Set Boolean"
    },
    "cmprb": {
        "mnemonic": "cmprb",
        "formatted_mnemonic": "cmprb",
        "opcode": "011111 .../. ..... ..... 00110 00000/",
        "formatted_opcode": "011111---------------0011000000-",
        "instruction_format": "X",
        "full_name": "Compare Ranged Byte"
    },
    "cmpeqb": {
        "mnemonic": "cmpeqb",
        "formatted_mnemonic": "cmpeqb",
        "opcode": "011111 ...// ..... ..... 00111 00000/",
        "formatted_opcode": "011111---------------0011100000-",
        "instruction_format": "X",
        "full_name": "Compare Equal Byte"
    },
    "mcrxrx": {
        "mnemonic": "mcrxrx",
        "formatted_mnemonic": "mcrxrx",
        "opcode": "011111 ...// ///// ///// 10010 00000/",
        "formatted_opcode": "011111---------------1001000000-",
        "instruction_format": "X",
        "full_name": "Move XER to CR Extended"
    },
    "tw": {
        "mnemonic": "tw",
        "formatted_mnemonic": "tw",
        "opcode": "011111 ..... ..... ..... 00000 00100/",
        "formatted_opcode": "011111---------------0000000100-",
        "instruction_format": "X",
        "full_name": "Trap Word"
    },
    "td": {
        "mnemonic": "td",
        "formatted_mnemonic": "td",
        "opcode": "011111 ..... ..... ..... 00010 00100/",
        "formatted_opcode": "011111---------------0001000100-",
        "instruction_format": "X",
        "full_name": "Trap Doubleword"
    },
    "lvsl": {
        "mnemonic": "lvsl",
        "formatted_mnemonic": "lvsl",
        "opcode": "011111 ..... ..... ..... 00000 00110/",
        "formatted_opcode": "011111---------------0000000110-",
        "instruction_format": "X",
        "full_name": "Load Vector for Shift Left"
    },
    "lvsr": {
        "mnemonic": "lvsr",
        "formatted_mnemonic": "lvsr",
        "opcode": "011111 ..... ..... ..... 00001 00110/",
        "formatted_opcode": "011111---------------0000100110-",
        "instruction_format": "X",
        "full_name": "Load Vector for Shift Right"
    },
    "lwat": {
        "mnemonic": "lwat",
        "formatted_mnemonic": "lwat",
        "opcode": "011111 ..... ..... ..... 10010 00110/",
        "formatted_opcode": "011111---------------1001000110-",
        "instruction_format": "X",
        "full_name": "Load Word ATomic"
    },
    "ldat": {
        "mnemonic": "ldat",
        "formatted_mnemonic": "ldat",
        "opcode": "011111 ..... ..... ..... 10011 00110/",
        "formatted_opcode": "011111---------------1001100110-",
        "instruction_format": "X",
        "full_name": "Load Doubleword ATomic"
    },
    "stwat": {
        "mnemonic": "stwat",
        "formatted_mnemonic": "stwat",
        "opcode": "011111 ..... ..... ..... 10110 00110/",
        "formatted_opcode": "011111---------------1011000110-",
        "instruction_format": "X",
        "full_name": "Store Word ATomic"
    },
    "stdat": {
        "mnemonic": "stdat",
        "formatted_mnemonic": "stdat",
        "opcode": "011111 ..... ..... ..... 10111 00110/",
        "formatted_opcode": "011111---------------1011100110-",
        "instruction_format": "X",
        "full_name": "Store Doubleword ATomic"
    },
    "copy": {
        "mnemonic": "copy",
        "formatted_mnemonic": "copy",
        "opcode": "011111 ////. ..... ..... 11000 00110/",
        "formatted_opcode": "011111---------------1100000110-",
        "instruction_format": "X",
        "full_name": "Copy"
    },
    "cp_abort": {
        "mnemonic": "cp_abort",
        "formatted_mnemonic": "cp_abort",
        "opcode": "011111 ///// ///// ///// 11010 00110/",
        "formatted_opcode": "011111---------------1101000110-",
        "instruction_format": "X",
        "full_name": "CP_Abort"
    },
    "paste[.]": {
        "mnemonic": "paste[.]",
        "formatted_mnemonic": "paste_dot",
        "opcode": "011111 ////. ..... ..... 11100 00110.",
        "formatted_opcode": "011111---------------1110000110-",
        "instruction_format": "X",
        "full_name": "Paste"
    },
    "lvebx": {
        "mnemonic": "lvebx",
        "formatted_mnemonic": "lvebx",
        "opcode": "011111 ..... ..... ..... 00000 00111/",
        "formatted_opcode": "011111---------------0000000111-",
        "instruction_format": "X",
        "full_name": "Load Vector Element Byte Indexed"
    },
    "lvehx": {
        "mnemonic": "lvehx",
        "formatted_mnemonic": "lvehx",
        "opcode": "011111 ..... ..... ..... 00001 00111/",
        "formatted_opcode": "011111---------------0000100111-",
        "instruction_format": "X",
        "full_name": "Load Vector Element Halfword Indexed"
    },
    "lvewx": {
        "mnemonic": "lvewx",
        "formatted_mnemonic": "lvewx",
        "opcode": "011111 ..... ..... ..... 00010 00111/",
        "formatted_opcode": "011111---------------0001000111-",
        "instruction_format": "X",
        "full_name": "Load Vector Element Word Indexed"
    },
    "lvx": {
        "mnemonic": "lvx",
        "formatted_mnemonic": "lvx",
        "opcode": "011111 ..... ..... ..... 00011 00111/",
        "formatted_opcode": "011111---------------0001100111-",
        "instruction_format": "X",
        "full_name": "Load Vector Indexed"
    },
    "stvebx": {
        "mnemonic": "stvebx",
        "formatted_mnemonic": "stvebx",
        "opcode": "011111 ..... ..... ..... 00100 00111/",
        "formatted_opcode": "011111---------------0010000111-",
        "instruction_format": "X",
        "full_name": "Store Vector Element Byte Indexed"
    },
    "stvehx": {
        "mnemonic": "stvehx",
        "formatted_mnemonic": "stvehx",
        "opcode": "011111 ..... ..... ..... 00101 00111/",
        "formatted_opcode": "011111---------------0010100111-",
        "instruction_format": "X",
        "full_name": "Store Vector Element Halfword Indexed"
    },
    "stvewx": {
        "mnemonic": "stvewx",
        "formatted_mnemonic": "stvewx",
        "opcode": "011111 ..... ..... ..... 00110 00111/",
        "formatted_opcode": "011111---------------0011000111-",
        "instruction_format": "X",
        "full_name": "Store Vector Element Word Indexed"
    },
    "stvx": {
        "mnemonic": "stvx",
        "formatted_mnemonic": "stvx",
        "opcode": "011111 ..... ..... ..... 00111 00111/",
        "formatted_opcode": "011111---------------0011100111-",
        "instruction_format": "X",
        "full_name": "Store Vector Indexed"
    },
    "lvxl": {
        "mnemonic": "lvxl",
        "formatted_mnemonic": "lvxl",
        "opcode": "011111 ..... ..... ..... 01011 00111/",
        "formatted_opcode": "011111---------------0101100111-",
        "instruction_format": "X",
        "full_name": "Load Vector Indexed Last"
    },
    "stvxl": {
        "mnemonic": "stvxl",
        "formatted_mnemonic": "stvxl",
        "opcode": "011111 ..... ..... ..... 01111 00111/",
        "formatted_opcode": "011111---------------0111100111-",
        "instruction_format": "X",
        "full_name": "Store Vector Indexed Last"
    },
    "subfc[o][.]": {
        "mnemonic": "subfc[o][.]",
        "formatted_mnemonic": "subfc_o_dot",
        "opcode": "011111 ..... ..... ..... .0000 01000.",
        "formatted_opcode": "011111----------------000001000-",
        "instruction_format": "XO",
        "full_name": "Subtract From Carrying"
    },
    "subf[o][.]": {
        "mnemonic": "subf[o][.]",
        "formatted_mnemonic": "subf_o_dot",
        "opcode": "011111 ..... ..... ..... .0001 01000.",
        "formatted_opcode": "011111----------------000101000-",
        "instruction_format": "XO",
        "full_name": "Subtract From"
    },
    "neg[o][.]": {
        "mnemonic": "neg[o][.]",
        "formatted_mnemonic": "neg_o_dot",
        "opcode": "011111 ..... ..... ///// .0011 01000.",
        "formatted_opcode": "011111----------------001101000-",
        "instruction_format": "XO",
        "full_name": "Negate"
    },
    "subfe[o][.]": {
        "mnemonic": "subfe[o][.]",
        "formatted_mnemonic": "subfe_o_dot",
        "opcode": "011111 ..... ..... ..... .0100 01000.",
        "formatted_opcode": "011111----------------010001000-",
        "instruction_format": "XO",
        "full_name": "Subtract From Extended"
    },
    "subfze[o][.]": {
        "mnemonic": "subfze[o][.]",
        "formatted_mnemonic": "subfze_o_dot",
        "opcode": "011111 ..... ..... ///// .0110 01000.",
        "formatted_opcode": "011111----------------011001000-",
        "instruction_format": "XO",
        "full_name": "Subtract From Zero Extended"
    },
    "subfme[o][.]": {
        "mnemonic": "subfme[o][.]",
        "formatted_mnemonic": "subfme_o_dot",
        "opcode": "011111 ..... ..... ///// .0111 01000.",
        "formatted_opcode": "011111----------------011101000-",
        "instruction_format": "XO",
        "full_name": "Subtract From Minus One Extended"
    },
    "mulhdu[.]": {
        "mnemonic": "mulhdu[.]",
        "formatted_mnemonic": "mulhdu_dot",
        "opcode": "011111 ..... ..... ..... /0000 01001.",
        "formatted_opcode": "011111----------------000001001-",
        "instruction_format": "XO",
        "full_name": "Multiply High Doubleword Unsigned"
    },
    "mulhd[.]": {
        "mnemonic": "mulhd[.]",
        "formatted_mnemonic": "mulhd_dot",
        "opcode": "011111 ..... ..... ..... /0010 01001.",
        "formatted_opcode": "011111----------------001001001-",
        "instruction_format": "XO",
        "full_name": "Multiply High Doubleword"
    },
    "mulld[o][.]": {
        "mnemonic": "mulld[o][.]",
        "formatted_mnemonic": "mulld_o_dot",
        "opcode": "011111 ..... ..... ..... .0111 01001.",
        "formatted_opcode": "011111----------------011101001-",
        "instruction_format": "XO",
        "full_name": "Multiply Low Doubleword"
    },
    "modud": {
        "mnemonic": "modud",
        "formatted_mnemonic": "modud",
        "opcode": "011111 ..... ..... ..... 01000 01001/",
        "formatted_opcode": "011111---------------0100001001-",
        "instruction_format": "X",
        "full_name": "Modulo Unsigned Doubleword"
    },
    "divdeu[o][.]": {
        "mnemonic": "divdeu[o][.]",
        "formatted_mnemonic": "divdeu_o_dot",
        "opcode": "011111 ..... ..... ..... .1100 01001.",
        "formatted_opcode": "011111----------------110001001-",
        "instruction_format": "XO",
        "full_name": "Divide Doubleword Extended Unsigned"
    },
    "divde[o][.]": {
        "mnemonic": "divde[o][.]",
        "formatted_mnemonic": "divde_o_dot",
        "opcode": "011111 ..... ..... ..... .1101 01001.",
        "formatted_opcode": "011111----------------110101001-",
        "instruction_format": "XO",
        "full_name": "Divide Doubleword Extended"
    },
    "divdu[o][.]": {
        "mnemonic": "divdu[o][.]",
        "formatted_mnemonic": "divdu_o_dot",
        "opcode": "011111 ..... ..... ..... .1110 01001.",
        "formatted_opcode": "011111----------------111001001-",
        "instruction_format": "XO",
        "full_name": "Divide Doubleword Unsigned"
    },
    "divd[o][.]": {
        "mnemonic": "divd[o][.]",
        "formatted_mnemonic": "divd_o_dot",
        "opcode": "011111 ..... ..... ..... .1111 01001.",
        "formatted_opcode": "011111----------------111101001-",
        "instruction_format": "XO",
        "full_name": "Divide Doubleword"
    },
    "modsd": {
        "mnemonic": "modsd",
        "formatted_mnemonic": "modsd",
        "opcode": "011111 ..... ..... ..... 11000 01001/",
        "formatted_opcode": "011111---------------1100001001-",
        "instruction_format": "X",
        "full_name": "Modulo Signed Doubleword"
    },
    "addc[o][.]": {
        "mnemonic": "addc[o][.]",
        "formatted_mnemonic": "addc_o_dot",
        "opcode": "011111 ..... ..... ..... .0000 01010.",
        "formatted_opcode": "011111----------------000001010-",
        "instruction_format": "XO",
        "full_name": "Add Carrying"
    },
    "addg6s": {
        "mnemonic": "addg6s",
        "formatted_mnemonic": "addg6s",
        "opcode": "011111 ..... ..... ..... /0010 01010/",
        "formatted_opcode": "011111----------------001001010-",
        "instruction_format": "XO",
        "full_name": "Add & Generate Sixes"
    },
    "adde[o][.]": {
        "mnemonic": "adde[o][.]",
        "formatted_mnemonic": "adde_o_dot",
        "opcode": "011111 ..... ..... ..... .0100 01010.",
        "formatted_opcode": "011111----------------010001010-",
        "instruction_format": "XO",
        "full_name": "Add Extended"
    },
    "addex": {
        "mnemonic": "addex",
        "formatted_mnemonic": "addex",
        "opcode": "011111 ..... ..... ..... ..101 01010/",
        "formatted_opcode": "011111-----------------10101010-",
        "instruction_format": "X",
        "full_name": "Add Extended using alternate carry"
    },
    "addze[o][.]": {
        "mnemonic": "addze[o][.]",
        "formatted_mnemonic": "addze_o_dot",
        "opcode": "011111 ..... ..... ///// .0110 01010.",
        "formatted_opcode": "011111----------------011001010-",
        "instruction_format": "XO",
        "full_name": "Add to Zero Extended"
    },
    "addme[o][.]": {
        "mnemonic": "addme[o][.]",
        "formatted_mnemonic": "addme_o_dot",
        "opcode": "011111 ..... ..... ///// .0111 01010.",
        "formatted_opcode": "011111----------------011101010-",
        "instruction_format": "XO",
        "full_name": "Add to Minus One Extended"
    },
    "add[o][.]": {
        "mnemonic": "add[o][.]",
        "formatted_mnemonic": "add_o_dot",
        "opcode": "011111 ..... ..... ..... .1000 01010.",
        "formatted_opcode": "011111----------------100001010-",
        "instruction_format": "XO",
        "full_name": "Add"
    },
    "mulhwu[.]": {
        "mnemonic": "mulhwu[.]",
        "formatted_mnemonic": "mulhwu_dot",
        "opcode": "011111 ..... ..... ..... /0000 01011.",
        "formatted_opcode": "011111----------------000001011-",
        "instruction_format": "XO",
        "full_name": "Multiply High Word Unsigned"
    },
    "mulhw[.]": {
        "mnemonic": "mulhw[.]",
        "formatted_mnemonic": "mulhw_dot",
        "opcode": "011111 ..... ..... ..... /0010 01011.",
        "formatted_opcode": "011111----------------001001011-",
        "instruction_format": "XO",
        "full_name": "Multiply High Word"
    },
    "mullw[o][.]": {
        "mnemonic": "mullw[o][.]",
        "formatted_mnemonic": "mullw_o_dot",
        "opcode": "011111 ..... ..... ..... .0111 01011.",
        "formatted_opcode": "011111----------------011101011-",
        "instruction_format": "XO",
        "full_name": "Multiply Low Word"
    },
    "moduw": {
        "mnemonic": "moduw",
        "formatted_mnemonic": "moduw",
        "opcode": "011111 ..... ..... ..... 01000 01011/",
        "formatted_opcode": "011111---------------0100001011-",
        "instruction_format": "X",
        "full_name": "Modulo Unsigned Word"
    },
    "divweu[o][.]": {
        "mnemonic": "divweu[o][.]",
        "formatted_mnemonic": "divweu_o_dot",
        "opcode": "011111 ..... ..... ..... .1100 01011.",
        "formatted_opcode": "011111----------------110001011-",
        "instruction_format": "XO",
        "full_name": "Divide Word Extended Unsigned"
    },
    "divwe[o][.]": {
        "mnemonic": "divwe[o][.]",
        "formatted_mnemonic": "divwe_o_dot",
        "opcode": "011111 ..... ..... ..... .1101 01011.",
        "formatted_opcode": "011111----------------110101011-",
        "instruction_format": "XO",
        "full_name": "Divide Word Extended"
    },
    "divwu[o][.]": {
        "mnemonic": "divwu[o][.]",
        "formatted_mnemonic": "divwu_o_dot",
        "opcode": "011111 ..... ..... ..... .1110 01011.",
        "formatted_opcode": "011111----------------111001011-",
        "instruction_format": "XO",
        "full_name": "Divide Word Unsigned"
    },
    "divw[o][.]": {
        "mnemonic": "divw[o][.]",
        "formatted_mnemonic": "divw_o_dot",
        "opcode": "011111 ..... ..... ..... .1111 01011.",
        "formatted_opcode": "011111----------------111101011-",
        "instruction_format": "XO",
        "full_name": "Divide Word"
    },
    "modsw": {
        "mnemonic": "modsw",
        "formatted_mnemonic": "modsw",
        "opcode": "011111 ..... ..... ..... 11000 01011/",
        "formatted_opcode": "011111---------------1100001011-",
        "instruction_format": "X",
        "full_name": "Modulo Signed Word"
    },
    "lxsiwzx": {
        "mnemonic": "lxsiwzx",
        "formatted_mnemonic": "lxsiwzx",
        "opcode": "011111 ..... ..... ..... 00000 01100.",
        "formatted_opcode": "011111---------------0000001100-",
        "instruction_format": "X",
        "full_name": "Load VSX Scalar as Integer Word & Zero Indexed"
    },
    "lxsiwax": {
        "mnemonic": "lxsiwax",
        "formatted_mnemonic": "lxsiwax",
        "opcode": "011111 ..... ..... ..... 00010 01100.",
        "formatted_opcode": "011111---------------0001001100-",
        "instruction_format": "X",
        "full_name": "Load VSX Scalar as Integer Word Algebraic Indexed"
    },
    "stxsiwx": {
        "mnemonic": "stxsiwx",
        "formatted_mnemonic": "stxsiwx",
        "opcode": "011111 ..... ..... ..... 00100 01100.",
        "formatted_opcode": "011111---------------0010001100-",
        "instruction_format": "X",
        "full_name": "Store VSX Scalar as Integer Word Indexed"
    },
    "lxvx": {
        "mnemonic": "lxvx",
        "formatted_mnemonic": "lxvx",
        "opcode": "011111 ..... ..... ..... 01000 01100.",
        "formatted_opcode": "011111---------------0100001100-",
        "instruction_format": "X",
        "full_name": "Load VSX Vector Indexed"
    },
    "lxvdsx": {
        "mnemonic": "lxvdsx",
        "formatted_mnemonic": "lxvdsx",
        "opcode": "011111 ..... ..... ..... 01010 01100.",
        "formatted_opcode": "011111---------------0101001100-",
        "instruction_format": "X",
        "full_name": "Load VSX Vector Doubleword & Splat Indexed"
    },
    "lxvwsx": {
        "mnemonic": "lxvwsx",
        "formatted_mnemonic": "lxvwsx",
        "opcode": "011111 ..... ..... ..... 01011 01100.",
        "formatted_opcode": "011111---------------0101101100-",
        "instruction_format": "X",
        "full_name": "Load VSX Vector Word & Splat Indexed"
    },
    "stxvx": {
        "mnemonic": "stxvx",
        "formatted_mnemonic": "stxvx",
        "opcode": "011111 ..... ..... ..... 01100 01100.",
        "formatted_opcode": "011111---------------0110001100-",
        "instruction_format": "X",
        "full_name": "Store VSX Vector Indexed"
    },
    "lxsspx": {
        "mnemonic": "lxsspx",
        "formatted_mnemonic": "lxsspx",
        "opcode": "011111 ..... ..... ..... 10000 01100.",
        "formatted_opcode": "011111---------------1000001100-",
        "instruction_format": "X",
        "full_name": "Load VSX Scalar Single-Precision Indexed"
    },
    "lxsdx": {
        "mnemonic": "lxsdx",
        "formatted_mnemonic": "lxsdx",
        "opcode": "011111 ..... ..... ..... 10010 01100.",
        "formatted_opcode": "011111---------------1001001100-",
        "instruction_format": "X",
        "full_name": "Load VSX Scalar Doubleword Indexed"
    },
    "stxsspx": {
        "mnemonic": "stxsspx",
        "formatted_mnemonic": "stxsspx",
        "opcode": "011111 ..... ..... ..... 10100 01100.",
        "formatted_opcode": "011111---------------1010001100-",
        "instruction_format": "X",
        "full_name": "Store VSX Scalar Single-Precision Indexed"
    },
    "stxsdx": {
        "mnemonic": "stxsdx",
        "formatted_mnemonic": "stxsdx",
        "opcode": "011111 ..... ..... ..... 10110 01100.",
        "formatted_opcode": "011111---------------1011001100-",
        "instruction_format": "X",
        "full_name": "Store VSX Scalar Doubleword Indexed"
    },
    "lxvw4x": {
        "mnemonic": "lxvw4x",
        "formatted_mnemonic": "lxvw4x",
        "opcode": "011111 ..... ..... ..... 11000 01100.",
        "formatted_opcode": "011111---------------1100001100-",
        "instruction_format": "X",
        "full_name": "Load VSX Vector Word*4 Indexed"
    },
    "lxvh8x": {
        "mnemonic": "lxvh8x",
        "formatted_mnemonic": "lxvh8x",
        "opcode": "011111 ..... ..... ..... 11001 01100.",
        "formatted_opcode": "011111---------------1100101100-",
        "instruction_format": "X",
        "full_name": "Load VSX Vector Halfword*8 Indexed"
    },
    "lxvd2x": {
        "mnemonic": "lxvd2x",
        "formatted_mnemonic": "lxvd2x",
        "opcode": "011111 ..... ..... ..... 11010 01100.",
        "formatted_opcode": "011111---------------1101001100-",
        "instruction_format": "X",
        "full_name": "Load VSX Vector Doubleword*2 Indexed"
    },
    "lxvb16x": {
        "mnemonic": "lxvb16x",
        "formatted_mnemonic": "lxvb16x",
        "opcode": "011111 ..... ..... ..... 11011 01100.",
        "formatted_opcode": "011111---------------1101101100-",
        "instruction_format": "X",
        "full_name": "Load VSX Vector Byte*16 Indexed"
    },
    "stxvw4x": {
        "mnemonic": "stxvw4x",
        "formatted_mnemonic": "stxvw4x",
        "opcode": "011111 ..... ..... ..... 11100 01100.",
        "formatted_opcode": "011111---------------1110001100-",
        "instruction_format": "X",
        "full_name": "Store VSX Vector Word*4 Indexed"
    },
    "stxvh8x": {
        "mnemonic": "stxvh8x",
        "formatted_mnemonic": "stxvh8x",
        "opcode": "011111 ..... ..... ..... 11101 01100.",
        "formatted_opcode": "011111---------------1110101100-",
        "instruction_format": "X",
        "full_name": "Store VSX Vector Halfword*8 Indexed"
    },
    "stxvd2x": {
        "mnemonic": "stxvd2x",
        "formatted_mnemonic": "stxvd2x",
        "opcode": "011111 ..... ..... ..... 11110 01100.",
        "formatted_opcode": "011111---------------1111001100-",
        "instruction_format": "X",
        "full_name": "Store VSX Vector Doubleword*2 Indexed"
    },
    "stxvb16x": {
        "mnemonic": "stxvb16x",
        "formatted_mnemonic": "stxvb16x",
        "opcode": "011111 ..... ..... ..... 11111 01100.",
        "formatted_opcode": "011111---------------1111101100-",
        "instruction_format": "X",
        "full_name": "Store VSX Vector Byte*16 Indexed"
    },
    "lxvl": {
        "mnemonic": "lxvl",
        "formatted_mnemonic": "lxvl",
        "opcode": "011111 ..... ..... ..... 01000 01101.",
        "formatted_opcode": "011111---------------0100001101-",
        "instruction_format": "X",
        "full_name": "Load VSX Vector with Length"
    },
    "lxvll": {
        "mnemonic": "lxvll",
        "formatted_mnemonic": "lxvll",
        "opcode": "011111 ..... ..... ..... 01001 01101.",
        "formatted_opcode": "011111---------------0100101101-",
        "instruction_format": "X",
        "full_name": "Load VSX Vector Left-justified with Length"
    },
    "stxvl": {
        "mnemonic": "stxvl",
        "formatted_mnemonic": "stxvl",
        "opcode": "011111 ..... ..... ..... 01100 01101.",
        "formatted_opcode": "011111---------------0110001101-",
        "instruction_format": "X",
        "full_name": "Store VSX Vector with Length"
    },
    "stxvll": {
        "mnemonic": "stxvll",
        "formatted_mnemonic": "stxvll",
        "opcode": "011111 ..... ..... ..... 01101 01101.",
        "formatted_opcode": "011111---------------0110101101-",
        "instruction_format": "X",
        "full_name": "Store VSX Vector Left-justified with Length"
    },
    "lxsibzx": {
        "mnemonic": "lxsibzx",
        "formatted_mnemonic": "lxsibzx",
        "opcode": "011111 ..... ..... ..... 11000 01101.",
        "formatted_opcode": "011111---------------1100001101-",
        "instruction_format": "X",
        "full_name": "Load VSX Scalar as Integer Byte & Zero Indexed"
    },
    "lxsihzx": {
        "mnemonic": "lxsihzx",
        "formatted_mnemonic": "lxsihzx",
        "opcode": "011111 ..... ..... ..... 11001 01101.",
        "formatted_opcode": "011111---------------1100101101-",
        "instruction_format": "X",
        "full_name": "Load VSX Scalar as Integer Halfword & Zero Indexed"
    },
    "stxsibx": {
        "mnemonic": "stxsibx",
        "formatted_mnemonic": "stxsibx",
        "opcode": "011111 ..... ..... ..... 11100 01101.",
        "formatted_opcode": "011111---------------1110001101-",
        "instruction_format": "X",
        "full_name": "Store VSX Scalar as Integer Byte Indexed"
    },
    "stxsihx": {
        "mnemonic": "stxsihx",
        "formatted_mnemonic": "stxsihx",
        "opcode": "011111 ..... ..... ..... 11101 01101.",
        "formatted_opcode": "011111---------------1110101101-",
        "instruction_format": "X",
        "full_name": "Store VSX Scalar as Integer Halfword Indexed"
    },
    "msgsndp": {
        "mnemonic": "msgsndp",
        "formatted_mnemonic": "msgsndp",
        "opcode": "011111 ///// ///// ..... 00100 01110/",
        "formatted_opcode": "011111---------------0010001110-",
        "instruction_format": "X",
        "full_name": "Message Send Privileged"
    },
    "msgclrp": {
        "mnemonic": "msgclrp",
        "formatted_mnemonic": "msgclrp",
        "opcode": "011111 ///// ///// ..... 00101 01110/",
        "formatted_opcode": "011111---------------0010101110-",
        "instruction_format": "X",
        "full_name": "Message Clear Privileged"
    },
    "msgsnd": {
        "mnemonic": "msgsnd",
        "formatted_mnemonic": "msgsnd",
        "opcode": "011111 ///// ///// ..... 00110 01110/",
        "formatted_opcode": "011111---------------0011001110-",
        "instruction_format": "X",
        "full_name": "Message Send"
    },
    "msgclr": {
        "mnemonic": "msgclr",
        "formatted_mnemonic": "msgclr",
        "opcode": "011111 ///// ///// ..... 00111 01110/",
        "formatted_opcode": "011111---------------0011101110-",
        "instruction_format": "X",
        "full_name": "Message Clear"
    },
    "mfbhrbe": {
        "mnemonic": "mfbhrbe",
        "formatted_mnemonic": "mfbhrbe",
        "opcode": "011111 ..... ..... ..... 01001 01110/",
        "formatted_opcode": "011111---------------0100101110-",
        "instruction_format": "X",
        "full_name": "Move From BHRB"
    },
    "clrbhrb": {
        "mnemonic": "clrbhrb",
        "formatted_mnemonic": "clrbhrb",
        "opcode": "011111 ///// ///// ///// 01101 01110/",
        "formatted_opcode": "011111---------------0110101110-",
        "instruction_format": "X",
        "full_name": "Clear BHRB"
    },
    "tend.": {
        "mnemonic": "tend.",
        "formatted_mnemonic": "tend_dot",
        "opcode": "011111 .//// ///// ///// 10101 01110/",
        "formatted_opcode": "011111---------------1010101110-",
        "instruction_format": "X",
        "full_name": "Transaction End & record"
    },
    "tcheck": {
        "mnemonic": "tcheck",
        "formatted_mnemonic": "tcheck",
        "opcode": "011111 ...// ///// ///// 10110 01110/",
        "formatted_opcode": "011111---------------1011001110-",
        "instruction_format": "X",
        "full_name": "Transaction Check & record"
    },
    "tsr.": {
        "mnemonic": "tsr.",
        "formatted_mnemonic": "tsr_dot",
        "opcode": "011111 ////. ///// ///// 10111 01110/",
        "formatted_opcode": "011111---------------1011101110-",
        "instruction_format": "X",
        "full_name": "Transaction Suspend or Resume & record"
    },
    "tbegin.": {
        "mnemonic": "tbegin.",
        "formatted_mnemonic": "tbegin_dot",
        "opcode": "011111 .///. ///// ///// 10100 011101",
        "formatted_opcode": "011111---------------10100011101",
        "instruction_format": "X",
        "full_name": "Transaction Begin & record"
    },
    "tabortwc.": {
        "mnemonic": "tabortwc.",
        "formatted_mnemonic": "tabortwc_dot",
        "opcode": "011111 ..... ..... ..... 11000 011101",
        "formatted_opcode": "011111---------------11000011101",
        "instruction_format": "X",
        "full_name": "Transaction Abort Word Conditional & record"
    },
    "tabortdc.": {
        "mnemonic": "tabortdc.",
        "formatted_mnemonic": "tabortdc_dot",
        "opcode": "011111 ..... ..... ..... 11001 011101",
        "formatted_opcode": "011111---------------11001011101",
        "instruction_format": "X",
        "full_name": "Transaction Abort Doubleword Conditional & record"
    },
    "tabortwci.": {
        "mnemonic": "tabortwci.",
        "formatted_mnemonic": "tabortwci_dot",
        "opcode": "011111 ..... ..... ..... 11010 011101",
        "formatted_opcode": "011111---------------11010011101",
        "instruction_format": "X",
        "full_name": "Transaction Abort Word Conditional Immediate & record"
    },
    "tabortdci.": {
        "mnemonic": "tabortdci.",
        "formatted_mnemonic": "tabortdci_dot",
        "opcode": "011111 ..... ..... ..... 11011 011101",
        "formatted_opcode": "011111---------------11011011101",
        "instruction_format": "X",
        "full_name": "Transaction Abort Doubleword Conditional Immediate & record"
    },
    "tabort.": {
        "mnemonic": "tabort.",
        "formatted_mnemonic": "tabort_dot",
        "opcode": "011111 ///// ..... ///// 11100 011101",
        "formatted_opcode": "011111---------------11100011101",
        "instruction_format": "X",
        "full_name": "Transaction Abort & record"
    },
    "treclaim.": {
        "mnemonic": "treclaim.",
        "formatted_mnemonic": "treclaim_dot",
        "opcode": "011111 ///// ..... ///// 11101 011101",
        "formatted_opcode": "011111---------------11101011101",
        "instruction_format": "X",
        "full_name": "Transaction Reclaim & record"
    },
    "trechkpt.": {
        "mnemonic": "trechkpt.",
        "formatted_mnemonic": "trechkpt_dot",
        "opcode": "011111 ///// ///// ///// 11111 011101",
        "formatted_opcode": "011111---------------11111011101",
        "instruction_format": "X",
        "full_name": "Transaction Recheckpoint & record"
    },
    "isel": {
        "mnemonic": "isel",
        "formatted_mnemonic": "isel",
        "opcode": "011111 ..... ..... ..... ..... 01111/",
        "formatted_opcode": "011111--------------------01111-",
        "instruction_format": "A",
        "full_name": "Integer Select"
    },
    "mtcrf": {
        "mnemonic": "mtcrf",
        "formatted_mnemonic": "mtcrf",
        "opcode": "011111 ..... 0.... ..../ 00100 10000/",
        "formatted_opcode": "011111-----0---------0010010000-",
        "instruction_format": "XFX",
        "full_name": "Move To CR Fields"
    },
    "mtocrf": {
        "mnemonic": "mtocrf",
        "formatted_mnemonic": "mtocrf",
        "opcode": "011111 ..... 1.... ..../ 00100 10000/",
        "formatted_opcode": "011111-----1---------0010010000-",
        "instruction_format": "XFX",
        "full_name": "Move To One CR Field"
    },
    "mtmsr": {
        "mnemonic": "mtmsr",
        "formatted_mnemonic": "mtmsr",
        "opcode": "011111 ..... ////. ///// 00100 10010/",
        "formatted_opcode": "011111---------------0010010010-",
        "instruction_format": "X",
        "full_name": "Move To MSR"
    },
    "mtmsrd": {
        "mnemonic": "mtmsrd",
        "formatted_mnemonic": "mtmsrd",
        "opcode": "011111 ..... ////. ///// 00101 10010/",
        "formatted_opcode": "011111---------------0010110010-",
        "instruction_format": "X",
        "full_name": "Move To MSR Doubleword"
    },
    "tlbiel": {
        "mnemonic": "tlbiel",
        "formatted_mnemonic": "tlbiel",
        "opcode": "011111 ..... /.... ..... 01000 10010/",
        "formatted_opcode": "011111---------------0100010010-",
        "instruction_format": "X",
        "full_name": "TLB Invalidate Entry Local"
    },
    "tlbie": {
        "mnemonic": "tlbie",
        "formatted_mnemonic": "tlbie",
        "opcode": "011111 ..... /.... ..... 01001 10010/",
        "formatted_opcode": "011111---------------0100110010-",
        "instruction_format": "X",
        "full_name": "TLB Invalidate Entry"
    },
    "slbsync": {
        "mnemonic": "slbsync",
        "formatted_mnemonic": "slbsync",
        "opcode": "011111 ///// ///// ///// 01010 10010/",
        "formatted_opcode": "011111---------------0101010010-",
        "instruction_format": "X",
        "full_name": "SLB Synchronize"
    },
    "slbmte": {
        "mnemonic": "slbmte",
        "formatted_mnemonic": "slbmte",
        "opcode": "011111 ..... ///// ..... 01100 10010/",
        "formatted_opcode": "011111---------------0110010010-",
        "instruction_format": "X",
        "full_name": "SLB Move To Entry"
    },
    "slbie": {
        "mnemonic": "slbie",
        "formatted_mnemonic": "slbie",
        "opcode": "011111 ///// ///// ..... 01101 10010/",
        "formatted_opcode": "011111---------------0110110010-",
        "instruction_format": "X",
        "full_name": "SLB Invalidate Entry"
    },
    "slbieg": {
        "mnemonic": "slbieg",
        "formatted_mnemonic": "slbieg",
        "opcode": "011111 ..... ///// ..... 01110 10010/",
        "formatted_opcode": "011111---------------0111010010-",
        "instruction_format": "X",
        "full_name": "SLB Invalidate Entry Global"
    },
    "slbia": {
        "mnemonic": "slbia",
        "formatted_mnemonic": "slbia",
        "opcode": "011111 //... ///// ///// 01111 10010/",
        "formatted_opcode": "011111---------------0111110010-",
        "instruction_format": "X",
        "full_name": "SLB Invalidate All"
    },
    "slbiag": {
        "mnemonic": "slbiag",
        "formatted_mnemonic": "slbiag",
        "opcode": "011111 ..... ///// ..... 11010 10010/",
        "formatted_opcode": "011111---------------1101010010-",
        "instruction_format": "X",
        "full_name": "SLB Invalidate All Global"
    },
    "mfcr": {
        "mnemonic": "mfcr",
        "formatted_mnemonic": "mfcr",
        "opcode": "011111 ..... 0//// ///// 00000 10011/",
        "formatted_opcode": "011111-----0---------0000010011-",
        "instruction_format": "XFX",
        "full_name": "Move From CR"
    },
    "mfocrf": {
        "mnemonic": "mfocrf",
        "formatted_mnemonic": "mfocrf",
        "opcode": "011111 ..... 1.... ..../ 00000 10011/",
        "formatted_opcode": "011111-----1---------0000010011-",
        "instruction_format": "XFX",
        "full_name": "Move From One CR Field"
    },
    "mfvsrd": {
        "mnemonic": "mfvsrd",
        "formatted_mnemonic": "mfvsrd",
        "opcode": "011111 ..... ..... ///// 00001 10011.",
        "formatted_opcode": "011111---------------0000110011-",
        "instruction_format": "XX1",
        "full_name": "Move From VSR Doubleword"
    },
    "mfmsr": {
        "mnemonic": "mfmsr",
        "formatted_mnemonic": "mfmsr",
        "opcode": "011111 ..... ///// ///// 00010 10011/",
        "formatted_opcode": "011111---------------0001010011-",
        "instruction_format": "X",
        "full_name": "Move From MSR"
    },
    "mfvsrwz": {
        "mnemonic": "mfvsrwz",
        "formatted_mnemonic": "mfvsrwz",
        "opcode": "011111 ..... ..... ///// 00011 10011.",
        "formatted_opcode": "011111---------------0001110011-",
        "instruction_format": "XX1",
        "full_name": "Move From VSR Word & Zero"
    },
    "mtvsrd": {
        "mnemonic": "mtvsrd",
        "formatted_mnemonic": "mtvsrd",
        "opcode": "011111 ..... ..... ///// 00101 10011.",
        "formatted_opcode": "011111---------------0010110011-",
        "instruction_format": "XX1",
        "full_name": "Move To VSR Doubleword"
    },
    "mtvsrwa": {
        "mnemonic": "mtvsrwa",
        "formatted_mnemonic": "mtvsrwa",
        "opcode": "011111 ..... ..... ///// 00110 10011.",
        "formatted_opcode": "011111---------------0011010011-",
        "instruction_format": "XX1",
        "full_name": "Move To VSR Word Algebraic"
    },
    "mtvsrwz": {
        "mnemonic": "mtvsrwz",
        "formatted_mnemonic": "mtvsrwz",
        "opcode": "011111 ..... ..... ///// 00111 10011.",
        "formatted_opcode": "011111---------------0011110011-",
        "instruction_format": "XX1",
        "full_name": "Move To VSR Word & Zero"
    },
    "mfvsrld": {
        "mnemonic": "mfvsrld",
        "formatted_mnemonic": "mfvsrld",
        "opcode": "011111 ..... ..... ///// 01001 10011.",
        "formatted_opcode": "011111---------------0100110011-",
        "instruction_format": "XX1",
        "full_name": "Move From VSR Lower Doubleword"
    },
    "mfspr": {
        "mnemonic": "mfspr",
        "formatted_mnemonic": "mfspr",
        "opcode": "011111 ..... ..... ..... 01010 10011/",
        "formatted_opcode": "011111---------------0101010011-",
        "instruction_format": "X",
        "full_name": "Move From SPR"
    },
    "mftb": {
        "mnemonic": "mftb",
        "formatted_mnemonic": "mftb",
        "opcode": "011111 ..... ..... ..... 01011 10011/",
        "formatted_opcode": "011111---------------0101110011-",
        "instruction_format": "X",
        "full_name": "Move From Time Base"
    },
    "mtvsrws": {
        "mnemonic": "mtvsrws",
        "formatted_mnemonic": "mtvsrws",
        "opcode": "011111 ..... ..... ///// 01100 10011.",
        "formatted_opcode": "011111---------------0110010011-",
        "instruction_format": "XX1",
        "full_name": "Move To VSR Word & Splat"
    },
    "mtvsrdd": {
        "mnemonic": "mtvsrdd",
        "formatted_mnemonic": "mtvsrdd",
        "opcode": "011111 ..... ..... ..... 01101 10011.",
        "formatted_opcode": "011111---------------0110110011-",
        "instruction_format": "XX1",
        "full_name": "Move To VSR Double Doubleword"
    },
    "mtspr": {
        "mnemonic": "mtspr",
        "formatted_mnemonic": "mtspr",
        "opcode": "011111 ..... ..... ..... 01110 10011/",
        "formatted_opcode": "011111---------------0111010011-",
        "instruction_format": "X",
        "full_name": "Move To SPR"
    },
    "darn": {
        "mnemonic": "darn",
        "formatted_mnemonic": "darn",
        "opcode": "011111 ..... ///.. ///// 10111 10011/",
        "formatted_opcode": "011111---------------1011110011-",
        "instruction_format": "X",
        "full_name": "Deliver A Random Number"
    },
    "slbmfev": {
        "mnemonic": "slbmfev",
        "formatted_mnemonic": "slbmfev",
        "opcode": "011111 ..... ///// ..... 11010 10011/",
        "formatted_opcode": "011111---------------1101010011-",
        "instruction_format": "X",
        "full_name": "SLB Move From Entry VSID"
    },
    "slbmfee": {
        "mnemonic": "slbmfee",
        "formatted_mnemonic": "slbmfee",
        "opcode": "011111 ..... ///// ..... 11100 10011/",
        "formatted_opcode": "011111---------------1110010011-",
        "instruction_format": "X",
        "full_name": "SLB Move From Entry ESID"
    },
    "slbfee.": {
        "mnemonic": "slbfee.",
        "formatted_mnemonic": "slbfee_dot",
        "opcode": "011111 ..... ///// ..... 11110 100111",
        "formatted_opcode": "011111---------------11110100111",
        "instruction_format": "X",
        "full_name": "SLB Find Entry ESID & record"
    },
    "lwarx": {
        "mnemonic": "lwarx",
        "formatted_mnemonic": "lwarx",
        "opcode": "011111 ..... ..... ..... 00000 10100/",
        "formatted_opcode": "011111---------------0000010100-",
        "instruction_format": "X",
        "full_name": "Load Word & Reserve Indexed"
    },
    "lbarx": {
        "mnemonic": "lbarx",
        "formatted_mnemonic": "lbarx",
        "opcode": "011111 ..... ..... ..... 00001 10100.",
        "formatted_opcode": "011111---------------0000110100-",
        "instruction_format": "X",
        "full_name": "Load Byte And Reserve Indexed"
    },
    "ldarx": {
        "mnemonic": "ldarx",
        "formatted_mnemonic": "ldarx",
        "opcode": "011111 ..... ..... ..... 00010 10100/",
        "formatted_opcode": "011111---------------0001010100-",
        "instruction_format": "X",
        "full_name": "Load Doubleword And Reserve Indexed"
    },
    "lharx": {
        "mnemonic": "lharx",
        "formatted_mnemonic": "lharx",
        "opcode": "011111 ..... ..... ..... 00011 10100.",
        "formatted_opcode": "011111---------------0001110100-",
        "instruction_format": "X",
        "full_name": "Load Halfword And Reserve Indexed Xform"
    },
    "lqarx": {
        "mnemonic": "lqarx",
        "formatted_mnemonic": "lqarx",
        "opcode": "011111 ..... ..... ..... 01000 10100.",
        "formatted_opcode": "011111---------------0100010100-",
        "instruction_format": "X",
        "full_name": "Load Quadword And Reserve Indexed"
    },
    "ldbrx": {
        "mnemonic": "ldbrx",
        "formatted_mnemonic": "ldbrx",
        "opcode": "011111 ..... ..... ..... 10000 10100/",
        "formatted_opcode": "011111---------------1000010100-",
        "instruction_format": "X",
        "full_name": "Load Doubleword Byte-Reverse Indexed"
    },
    "stdbrx": {
        "mnemonic": "stdbrx",
        "formatted_mnemonic": "stdbrx",
        "opcode": "011111 ..... ..... ..... 10100 10100/",
        "formatted_opcode": "011111---------------1010010100-",
        "instruction_format": "X",
        "full_name": "Store Doubleword Byte-Reverse Indexed"
    },
    "ldx": {
        "mnemonic": "ldx",
        "formatted_mnemonic": "ldx",
        "opcode": "011111 ..... ..... ..... 00000 10101/",
        "formatted_opcode": "011111---------------0000010101-",
        "instruction_format": "X",
        "full_name": "Load Doubleword Indexed"
    },
    "ldux": {
        "mnemonic": "ldux",
        "formatted_mnemonic": "ldux",
        "opcode": "011111 ..... ..... ..... 00001 10101/",
        "formatted_opcode": "011111---------------0000110101-",
        "instruction_format": "X",
        "full_name": "Load Doubleword with Update Indexed"
    },
    "stdx": {
        "mnemonic": "stdx",
        "formatted_mnemonic": "stdx",
        "opcode": "011111 ..... ..... ..... 00100 10101/",
        "formatted_opcode": "011111---------------0010010101-",
        "instruction_format": "X",
        "full_name": "Store Doubleword Indexed"
    },
    "stdux": {
        "mnemonic": "stdux",
        "formatted_mnemonic": "stdux",
        "opcode": "011111 ..... ..... ..... 00101 10101/",
        "formatted_opcode": "011111---------------0010110101-",
        "instruction_format": "X",
        "full_name": "Store Doubleword with Update Indexed"
    },
    "lwax": {
        "mnemonic": "lwax",
        "formatted_mnemonic": "lwax",
        "opcode": "011111 ..... ..... ..... 01010 10101/",
        "formatted_opcode": "011111---------------0101010101-",
        "instruction_format": "X",
        "full_name": "Load Word Algebraic Indexed"
    },
    "lwaux": {
        "mnemonic": "lwaux",
        "formatted_mnemonic": "lwaux",
        "opcode": "011111 ..... ..... ..... 01011 10101/",
        "formatted_opcode": "011111---------------0101110101-",
        "instruction_format": "X",
        "full_name": "Load Word Algebraic with Update Indexed"
    },
    "lswx": {
        "mnemonic": "lswx",
        "formatted_mnemonic": "lswx",
        "opcode": "011111 ..... ..... ..... 10000 10101/",
        "formatted_opcode": "011111---------------1000010101-",
        "instruction_format": "X",
        "full_name": "Load String Word Indexed"
    },
    "lswi": {
        "mnemonic": "lswi",
        "formatted_mnemonic": "lswi",
        "opcode": "011111 ..... ..... ..... 10010 10101/",
        "formatted_opcode": "011111---------------1001010101-",
        "instruction_format": "X",
        "full_name": "Load String Word Immediate"
    },
    "stswx": {
        "mnemonic": "stswx",
        "formatted_mnemonic": "stswx",
        "opcode": "011111 ..... ..... ..... 10100 10101/",
        "formatted_opcode": "011111---------------1010010101-",
        "instruction_format": "X",
        "full_name": "Store String Word Indexed"
    },
    "stswi": {
        "mnemonic": "stswi",
        "formatted_mnemonic": "stswi",
        "opcode": "011111 ..... ..... ..... 10110 10101/",
        "formatted_opcode": "011111---------------1011010101-",
        "instruction_format": "X",
        "full_name": "Store String Word Immediate"
    },
    "lwzcix": {
        "mnemonic": "lwzcix",
        "formatted_mnemonic": "lwzcix",
        "opcode": "011111 ..... ..... ..... 11000 10101/",
        "formatted_opcode": "011111---------------1100010101-",
        "instruction_format": "X",
        "full_name": "Load Word & Zero Caching Inhibited Indexed"
    },
    "lhzcix": {
        "mnemonic": "lhzcix",
        "formatted_mnemonic": "lhzcix",
        "opcode": "011111 ..... ..... ..... 11001 10101/",
        "formatted_opcode": "011111---------------1100110101-",
        "instruction_format": "X",
        "full_name": "Load Halfword & Zero Caching Inhibited Indexed"
    },
    "lbzcix": {
        "mnemonic": "lbzcix",
        "formatted_mnemonic": "lbzcix",
        "opcode": "011111 ..... ..... ..... 11010 10101/",
        "formatted_opcode": "011111---------------1101010101-",
        "instruction_format": "X",
        "full_name": "Load Byte & Zero Caching Inhibited Indexed"
    },
    "ldcix": {
        "mnemonic": "ldcix",
        "formatted_mnemonic": "ldcix",
        "opcode": "011111 ..... ..... ..... 11011 10101/",
        "formatted_opcode": "011111---------------1101110101-",
        "instruction_format": "X",
        "full_name": "Load Doubleword Caching Inhibited Indexed"
    },
    "stwcix": {
        "mnemonic": "stwcix",
        "formatted_mnemonic": "stwcix",
        "opcode": "011111 ..... ..... ..... 11100 10101/",
        "formatted_opcode": "011111---------------1110010101-",
        "instruction_format": "X",
        "full_name": "Store Word Caching Inhibited Indexed"
    },
    "sthcix": {
        "mnemonic": "sthcix",
        "formatted_mnemonic": "sthcix",
        "opcode": "011111 ..... ..... ..... 11101 10101/",
        "formatted_opcode": "011111---------------1110110101-",
        "instruction_format": "X",
        "full_name": "Store Halfword Caching Inhibited Indexed"
    },
    "stbcix": {
        "mnemonic": "stbcix",
        "formatted_mnemonic": "stbcix",
        "opcode": "011111 ..... ..... ..... 11110 10101/",
        "formatted_opcode": "011111---------------1111010101-",
        "instruction_format": "X",
        "full_name": "Store Byte Caching Inhibited Indexed"
    },
    "stdcix": {
        "mnemonic": "stdcix",
        "formatted_mnemonic": "stdcix",
        "opcode": "011111 ..... ..... ..... 11111 10101/",
        "formatted_opcode": "011111---------------1111110101-",
        "instruction_format": "X",
        "full_name": "Store Doubleword Caching Inhibited Indexed"
    },
    "icbt": {
        "mnemonic": "icbt",
        "formatted_mnemonic": "icbt",
        "opcode": "011111 /.... ..... ..... 00000 10110/",
        "formatted_opcode": "011111---------------0000010110-",
        "instruction_format": "X",
        "full_name": "Instruction Cache Block Touch"
    },
    "dcbst": {
        "mnemonic": "dcbst",
        "formatted_mnemonic": "dcbst",
        "opcode": "011111 ///// ..... ..... 00001 10110/",
        "formatted_opcode": "011111---------------0000110110-",
        "instruction_format": "X",
        "full_name": "Data Cache Block Store"
    },
    "dcbf": {
        "mnemonic": "dcbf",
        "formatted_mnemonic": "dcbf",
        "opcode": "011111 ///.. ..... ..... 00010 10110/",
        "formatted_opcode": "011111---------------0001010110-",
        "instruction_format": "X",
        "full_name": "Data Cache Block Flush"
    },
    "dcbtst": {
        "mnemonic": "dcbtst",
        "formatted_mnemonic": "dcbtst",
        "opcode": "011111 ..... ..... ..... 00111 10110/",
        "formatted_opcode": "011111---------------0011110110-",
        "instruction_format": "X",
        "full_name": "Data Cache Block Touch for Store"
    },
    "dcbt": {
        "mnemonic": "dcbt",
        "formatted_mnemonic": "dcbt",
        "opcode": "011111 ..... ..... ..... 01000 10110/",
        "formatted_opcode": "011111---------------0100010110-",
        "instruction_format": "X",
        "full_name": "Data Cache Block Touch"
    },
    "lwbrx": {
        "mnemonic": "lwbrx",
        "formatted_mnemonic": "lwbrx",
        "opcode": "011111 ..... ..... ..... 10000 10110/",
        "formatted_opcode": "011111---------------1000010110-",
        "instruction_format": "X",
        "full_name": "Load Word Byte-Reverse Indexed"
    },
    "tlbsync": {
        "mnemonic": "tlbsync",
        "formatted_mnemonic": "tlbsync",
        "opcode": "011111 ///// ///// ///// 10001 10110/",
        "formatted_opcode": "011111---------------1000110110-",
        "instruction_format": "X",
        "full_name": "TLB Synchronize"
    },
    "sync": {
        "mnemonic": "sync",
        "formatted_mnemonic": "sync",
        "opcode": "011111 ///.. ///// ///// 10010 10110/",
        "formatted_opcode": "011111---------------1001010110-",
        "instruction_format": "X",
        "full_name": "Synchronize"
    },
    "stwbrx": {
        "mnemonic": "stwbrx",
        "formatted_mnemonic": "stwbrx",
        "opcode": "011111 ..... ..... ..... 10100 10110/",
        "formatted_opcode": "011111---------------1010010110-",
        "instruction_format": "X",
        "full_name": "Store Word Byte-Reverse Indexed"
    },
    "lhbrx": {
        "mnemonic": "lhbrx",
        "formatted_mnemonic": "lhbrx",
        "opcode": "011111 ..... ..... ..... 11000 10110/",
        "formatted_opcode": "011111---------------1100010110-",
        "instruction_format": "X",
        "full_name": "Load Halfword Byte-Reverse Indexed"
    },
    "eieio": {
        "mnemonic": "eieio",
        "formatted_mnemonic": "eieio",
        "opcode": "011111 ///// ///// ///// 11010 10110/",
        "formatted_opcode": "011111---------------1101010110-",
        "instruction_format": "X",
        "full_name": "Enforce In-order Execution of I/O"
    },
    "msgsync": {
        "mnemonic": "msgsync",
        "formatted_mnemonic": "msgsync",
        "opcode": "011111 ///// ///// ///// 11011 10110/",
        "formatted_opcode": "011111---------------1101110110-",
        "instruction_format": "X",
        "full_name": "Message Synchronize"
    },
    "sthbrx": {
        "mnemonic": "sthbrx",
        "formatted_mnemonic": "sthbrx",
        "opcode": "011111 ..... ..... ..... 11100 10110/",
        "formatted_opcode": "011111---------------1110010110-",
        "instruction_format": "X",
        "full_name": "Store Halfword Byte-Reverse Indexed"
    },
    "icbi": {
        "mnemonic": "icbi",
        "formatted_mnemonic": "icbi",
        "opcode": "011111 ///// ..... ..... 11110 10110/",
        "formatted_opcode": "011111---------------1111010110-",
        "instruction_format": "X",
        "full_name": "Instruction Cache Block Invalidate"
    },
    "dcbz": {
        "mnemonic": "dcbz",
        "formatted_mnemonic": "dcbz",
        "opcode": "011111 ///// ..... ..... 11111 10110/",
        "formatted_opcode": "011111---------------1111110110-",
        "instruction_format": "X",
        "full_name": "Data Cache Block Zero"
    },
    "stwcx.": {
        "mnemonic": "stwcx.",
        "formatted_mnemonic": "stwcx_dot",
        "opcode": "011111 ..... ..... ..... 00100 101101",
        "formatted_opcode": "011111---------------00100101101",
        "instruction_format": "X",
        "full_name": "Store Word Conditional Indexed & record"
    },
    "stqcx.": {
        "mnemonic": "stqcx.",
        "formatted_mnemonic": "stqcx_dot",
        "opcode": "011111 ..... ..... ..... 00101 101101",
        "formatted_opcode": "011111---------------00101101101",
        "instruction_format": "X",
        "full_name": "Store Quadword Conditional Indexed & record"
    },
    "stdcx.": {
        "mnemonic": "stdcx.",
        "formatted_mnemonic": "stdcx_dot",
        "opcode": "011111 ..... ..... ..... 00110 101101",
        "formatted_opcode": "011111---------------00110101101",
        "instruction_format": "X",
        "full_name": "Store Doubleword Conditional Indexed & record"
    },
    "stbcx.": {
        "mnemonic": "stbcx.",
        "formatted_mnemonic": "stbcx_dot",
        "opcode": "011111 ..... ..... ..... 10101 101101",
        "formatted_opcode": "011111---------------10101101101",
        "instruction_format": "X",
        "full_name": "Store Byte Conditional Indexed & record"
    },
    "sthcx.": {
        "mnemonic": "sthcx.",
        "formatted_mnemonic": "sthcx_dot",
        "opcode": "011111 ..... ..... ..... 10110 101101",
        "formatted_opcode": "011111---------------10110101101",
        "instruction_format": "X",
        "full_name": "Store Halfword Conditional Indexed & record"
    },
    "lwzx": {
        "mnemonic": "lwzx",
        "formatted_mnemonic": "lwzx",
        "opcode": "011111 ..... ..... ..... 00000 10111/",
        "formatted_opcode": "011111---------------0000010111-",
        "instruction_format": "X",
        "full_name": "Load Word & Zero Indexed"
    },
    "lwzux": {
        "mnemonic": "lwzux",
        "formatted_mnemonic": "lwzux",
        "opcode": "011111 ..... ..... ..... 00001 10111/",
        "formatted_opcode": "011111---------------0000110111-",
        "instruction_format": "X",
        "full_name": "Load Word & Zero with Update Indexed"
    },
    "lbzx": {
        "mnemonic": "lbzx",
        "formatted_mnemonic": "lbzx",
        "opcode": "011111 ..... ..... ..... 00010 10111/",
        "formatted_opcode": "011111---------------0001010111-",
        "instruction_format": "X",
        "full_name": "Load Byte & Zero Indexed"
    },
    "lbzux": {
        "mnemonic": "lbzux",
        "formatted_mnemonic": "lbzux",
        "opcode": "011111 ..... ..... ..... 00011 10111/",
        "formatted_opcode": "011111---------------0001110111-",
        "instruction_format": "X",
        "full_name": "Load Byte & Zero with Update Indexed"
    },
    "stwx": {
        "mnemonic": "stwx",
        "formatted_mnemonic": "stwx",
        "opcode": "011111 ..... ..... ..... 00100 10111/",
        "formatted_opcode": "011111---------------0010010111-",
        "instruction_format": "X",
        "full_name": "Store Word Indexed"
    },
    "stwux": {
        "mnemonic": "stwux",
        "formatted_mnemonic": "stwux",
        "opcode": "011111 ..... ..... ..... 00101 10111/",
        "formatted_opcode": "011111---------------0010110111-",
        "instruction_format": "X",
        "full_name": "Store Word with Update Indexed"
    },
    "stbx": {
        "mnemonic": "stbx",
        "formatted_mnemonic": "stbx",
        "opcode": "011111 ..... ..... ..... 00110 10111/",
        "formatted_opcode": "011111---------------0011010111-",
        "instruction_format": "X",
        "full_name": "Store Byte Indexed"
    },
    "stbux": {
        "mnemonic": "stbux",
        "formatted_mnemonic": "stbux",
        "opcode": "011111 ..... ..... ..... 00111 10111/",
        "formatted_opcode": "011111---------------0011110111-",
        "instruction_format": "X",
        "full_name": "Store Byte with Update Indexed"
    },
    "lhzx": {
        "mnemonic": "lhzx",
        "formatted_mnemonic": "lhzx",
        "opcode": "011111 ..... ..... ..... 01000 10111/",
        "formatted_opcode": "011111---------------0100010111-",
        "instruction_format": "X",
        "full_name": "Load Halfword & Zero Indexed"
    },
    "lhzux": {
        "mnemonic": "lhzux",
        "formatted_mnemonic": "lhzux",
        "opcode": "011111 ..... ..... ..... 01001 10111/",
        "formatted_opcode": "011111---------------0100110111-",
        "instruction_format": "X",
        "full_name": "Load Halfword & Zero with Update Indexed"
    },
    "lhax": {
        "mnemonic": "lhax",
        "formatted_mnemonic": "lhax",
        "opcode": "011111 ..... ..... ..... 01010 10111/",
        "formatted_opcode": "011111---------------0101010111-",
        "instruction_format": "X",
        "full_name": "Load Halfword Algebraic Indexed"
    },
    "lhaux": {
        "mnemonic": "lhaux",
        "formatted_mnemonic": "lhaux",
        "opcode": "011111 ..... ..... ..... 01011 10111/",
        "formatted_opcode": "011111---------------0101110111-",
        "instruction_format": "X",
        "full_name": "Load Halfword Algebraic with Update Indexed"
    },
    "sthx": {
        "mnemonic": "sthx",
        "formatted_mnemonic": "sthx",
        "opcode": "011111 ..... ..... ..... 01100 10111/",
        "formatted_opcode": "011111---------------0110010111-",
        "instruction_format": "X",
        "full_name": "Store Halfword Indexed"
    },
    "sthux": {
        "mnemonic": "sthux",
        "formatted_mnemonic": "sthux",
        "opcode": "011111 ..... ..... ..... 01101 10111/",
        "formatted_opcode": "011111---------------0110110111-",
        "instruction_format": "X",
        "full_name": "Store Halfword with Update Indexed"
    },
    "lfsx": {
        "mnemonic": "lfsx",
        "formatted_mnemonic": "lfsx",
        "opcode": "011111 ..... ..... ..... 10000 10111/",
        "formatted_opcode": "011111---------------1000010111-",
        "instruction_format": "X",
        "full_name": "Load Floating Single Indexed"
    },
    "lfsux": {
        "mnemonic": "lfsux",
        "formatted_mnemonic": "lfsux",
        "opcode": "011111 ..... ..... ..... 10001 10111/",
        "formatted_opcode": "011111---------------1000110111-",
        "instruction_format": "X",
        "full_name": "Load Floating Single with Update Indexed"
    },
    "lfdx": {
        "mnemonic": "lfdx",
        "formatted_mnemonic": "lfdx",
        "opcode": "011111 ..... ..... ..... 10010 10111/",
        "formatted_opcode": "011111---------------1001010111-",
        "instruction_format": "X",
        "full_name": "Load Floating Double Indexed"
    },
    "lfdux": {
        "mnemonic": "lfdux",
        "formatted_mnemonic": "lfdux",
        "opcode": "011111 ..... ..... ..... 10011 10111/",
        "formatted_opcode": "011111---------------1001110111-",
        "instruction_format": "X",
        "full_name": "Load Floating Double with Update Indexed"
    },
    "stfsx": {
        "mnemonic": "stfsx",
        "formatted_mnemonic": "stfsx",
        "opcode": "011111 ..... ..... ..... 10100 10111/",
        "formatted_opcode": "011111---------------1010010111-",
        "instruction_format": "X",
        "full_name": "Store Floating Single Indexed"
    },
    "stfsux": {
        "mnemonic": "stfsux",
        "formatted_mnemonic": "stfsux",
        "opcode": "011111 ..... ..... ..... 10101 10111/",
        "formatted_opcode": "011111---------------1010110111-",
        "instruction_format": "X",
        "full_name": "Store Floating Single with Update Indexed"
    },
    "stfdx": {
        "mnemonic": "stfdx",
        "formatted_mnemonic": "stfdx",
        "opcode": "011111 ..... ..... ..... 10110 10111/",
        "formatted_opcode": "011111---------------1011010111-",
        "instruction_format": "X",
        "full_name": "Store Floating Double Indexed"
    },
    "stfdux": {
        "mnemonic": "stfdux",
        "formatted_mnemonic": "stfdux",
        "opcode": "011111 ..... ..... ..... 10111 10111/",
        "formatted_opcode": "011111---------------1011110111-",
        "instruction_format": "X",
        "full_name": "Store Floating Double with Update Indexed"
    },
    "lfdpx": {
        "mnemonic": "lfdpx",
        "formatted_mnemonic": "lfdpx",
        "opcode": "011111 ..... ..... ..... 11000 10111/",
        "formatted_opcode": "011111---------------1100010111-",
        "instruction_format": "X",
        "full_name": "Load Floating Double Pair Indexed"
    },
    "lfiwax": {
        "mnemonic": "lfiwax",
        "formatted_mnemonic": "lfiwax",
        "opcode": "011111 ..... ..... ..... 11010 10111/",
        "formatted_opcode": "011111---------------1101010111-",
        "instruction_format": "X",
        "full_name": "Load Floating as Integer Word Algebraic Indexed"
    },
    "lfiwzx": {
        "mnemonic": "lfiwzx",
        "formatted_mnemonic": "lfiwzx",
        "opcode": "011111 ..... ..... ..... 11011 10111/",
        "formatted_opcode": "011111---------------1101110111-",
        "instruction_format": "X",
        "full_name": "Load Floating as Integer Word & Zero Indexed"
    },
    "stfdpx": {
        "mnemonic": "stfdpx",
        "formatted_mnemonic": "stfdpx",
        "opcode": "011111 ..... ..... ..... 11100 10111/",
        "formatted_opcode": "011111---------------1110010111-",
        "instruction_format": "X",
        "full_name": "Store Floating Double Pair Indexed"
    },
    "stfiwx": {
        "mnemonic": "stfiwx",
        "formatted_mnemonic": "stfiwx",
        "opcode": "011111 ..... ..... ..... 11110 10111/",
        "formatted_opcode": "011111---------------1111010111-",
        "instruction_format": "X",
        "full_name": "Store Floating as Integer Word Indexed"
    },
    "slw[.]": {
        "mnemonic": "slw[.]",
        "formatted_mnemonic": "slw_dot",
        "opcode": "011111 ..... ..... ..... 00000 11000.",
        "formatted_opcode": "011111---------------0000011000-",
        "instruction_format": "X",
        "full_name": "Shift Left Word"
    },
    "srw[.]": {
        "mnemonic": "srw[.]",
        "formatted_mnemonic": "srw_dot",
        "opcode": "011111 ..... ..... ..... 10000 11000.",
        "formatted_opcode": "011111---------------1000011000-",
        "instruction_format": "X",
        "full_name": "Shift Right Word"
    },
    "sraw[.]": {
        "mnemonic": "sraw[.]",
        "formatted_mnemonic": "sraw_dot",
        "opcode": "011111 ..... ..... ..... 11000 11000.",
        "formatted_opcode": "011111---------------1100011000-",
        "instruction_format": "X",
        "full_name": "Shift Right Algebraic Word"
    },
    "srawi[.]": {
        "mnemonic": "srawi[.]",
        "formatted_mnemonic": "srawi_dot",
        "opcode": "011111 ..... ..... ..... 11001 11000.",
        "formatted_opcode": "011111---------------1100111000-",
        "instruction_format": "X",
        "full_name": "Shift Right Algebraic Word Immediate"
    },
    "cntlzw[.]": {
        "mnemonic": "cntlzw[.]",
        "formatted_mnemonic": "cntlzw_dot",
        "opcode": "011111 ..... ..... ///// 00000 11010.",
        "formatted_opcode": "011111---------------0000011010-",
        "instruction_format": "X",
        "full_name": "Count Leading Zeros Word"
    },
    "cntlzd[.]": {
        "mnemonic": "cntlzd[.]",
        "formatted_mnemonic": "cntlzd_dot",
        "opcode": "011111 ..... ..... ///// 00001 11010.",
        "formatted_opcode": "011111---------------0000111010-",
        "instruction_format": "X",
        "full_name": "Count Leading Zeros Doubleword"
    },
    "popcntb": {
        "mnemonic": "popcntb",
        "formatted_mnemonic": "popcntb",
        "opcode": "011111 ..... ..... ///// 00011 11010/",
        "formatted_opcode": "011111---------------0001111010-",
        "instruction_format": "X",
        "full_name": "Population Count Byte"
    },
    "prtyw": {
        "mnemonic": "prtyw",
        "formatted_mnemonic": "prtyw",
        "opcode": "011111 ..... ..... ///// 00100 11010/",
        "formatted_opcode": "011111---------------0010011010-",
        "instruction_format": "X",
        "full_name": "Parity Word"
    },
    "prtyd": {
        "mnemonic": "prtyd",
        "formatted_mnemonic": "prtyd",
        "opcode": "011111 ..... ..... ///// 00101 11010/",
        "formatted_opcode": "011111---------------0010111010-",
        "instruction_format": "X",
        "full_name": "Parity Doubleword"
    },
    "cdtbcd": {
        "mnemonic": "cdtbcd",
        "formatted_mnemonic": "cdtbcd",
        "opcode": "011111 ..... ..... ///// 01000 11010/",
        "formatted_opcode": "011111---------------0100011010-",
        "instruction_format": "X",
        "full_name": "Convert Declets To Binary Coded Decimal"
    },
    "cbcdtd": {
        "mnemonic": "cbcdtd",
        "formatted_mnemonic": "cbcdtd",
        "opcode": "011111 ..... ..... ///// 01001 11010/",
        "formatted_opcode": "011111---------------0100111010-",
        "instruction_format": "X",
        "full_name": "Convert Binary Coded Decimal To Declets"
    },
    "popcntw": {
        "mnemonic": "popcntw",
        "formatted_mnemonic": "popcntw",
        "opcode": "011111 ..... ..... ///// 01011 11010/",
        "formatted_opcode": "011111---------------0101111010-",
        "instruction_format": "X",
        "full_name": "Population Count Words"
    },
    "popcntd": {
        "mnemonic": "popcntd",
        "formatted_mnemonic": "popcntd",
        "opcode": "011111 ..... ..... ///// 01111 11010/",
        "formatted_opcode": "011111---------------0111111010-",
        "instruction_format": "X",
        "full_name": "Population Count Doubleword"
    },
    "cnttzw[.]": {
        "mnemonic": "cnttzw[.]",
        "formatted_mnemonic": "cnttzw_dot",
        "opcode": "011111 ..... ..... ///// 10000 11010.",
        "formatted_opcode": "011111---------------1000011010-",
        "instruction_format": "X",
        "full_name": "Count Trailing Zeros Word"
    },
    "cnttzd[.]": {
        "mnemonic": "cnttzd[.]",
        "formatted_mnemonic": "cnttzd_dot",
        "opcode": "011111 ..... ..... ///// 10001 11010.",
        "formatted_opcode": "011111---------------1000111010-",
        "instruction_format": "X",
        "full_name": "Count Trailing Zeros Doubleword"
    },
    "srad[.]": {
        "mnemonic": "srad[.]",
        "formatted_mnemonic": "srad_dot",
        "opcode": "011111 ..... ..... ..... 11000 11010.",
        "formatted_opcode": "011111---------------1100011010-",
        "instruction_format": "X",
        "full_name": "Shift Right Algebraic Doubleword"
    },
    "sradi[.]": {
        "mnemonic": "sradi[.]",
        "formatted_mnemonic": "sradi_dot",
        "opcode": "011111 ..... ..... ..... 11001 1101..",
        "formatted_opcode": "011111---------------110011101--",
        "instruction_format": "XS",
        "full_name": "Shift Right Algebraic Doubleword Immediate"
    },
    "extswsli[.]": {
        "mnemonic": "extswsli[.]",
        "formatted_mnemonic": "extswsli_dot",
        "opcode": "011111 ..... ..... ..... 11011 1101..",
        "formatted_opcode": "011111---------------110111101--",
        "instruction_format": "XS",
        "full_name": "Extend Sign Word & Shift Left Immediate"
    },
    "extsh[.]": {
        "mnemonic": "extsh[.]",
        "formatted_mnemonic": "extsh_dot",
        "opcode": "011111 ..... ..... ///// 11100 11010.",
        "formatted_opcode": "011111---------------1110011010-",
        "instruction_format": "X",
        "full_name": "Extend Sign Halfword"
    },
    "extsb[.]": {
        "mnemonic": "extsb[.]",
        "formatted_mnemonic": "extsb_dot",
        "opcode": "011111 ..... ..... ///// 11101 11010.",
        "formatted_opcode": "011111---------------1110111010-",
        "instruction_format": "X",
        "full_name": "Extend Sign Byte"
    },
    "extsw[.]": {
        "mnemonic": "extsw[.]",
        "formatted_mnemonic": "extsw_dot",
        "opcode": "011111 ..... ..... ///// 11110 11010.",
        "formatted_opcode": "011111---------------1111011010-",
        "instruction_format": "X",
        "full_name": "Extend Sign Word"
    },
    "sld[.]": {
        "mnemonic": "sld[.]",
        "formatted_mnemonic": "sld_dot",
        "opcode": "011111 ..... ..... ..... 00000 11011.",
        "formatted_opcode": "011111---------------0000011011-",
        "instruction_format": "X",
        "full_name": "Shift Left Doubleword"
    },
    "srd[.]": {
        "mnemonic": "srd[.]",
        "formatted_mnemonic": "srd_dot",
        "opcode": "011111 ..... ..... ..... 10000 11011.",
        "formatted_opcode": "011111---------------1000011011-",
        "instruction_format": "X",
        "full_name": "Shift Right Doubleword"
    },
    "and[.]": {
        "mnemonic": "and[.]",
        "formatted_mnemonic": "and_dot",
        "opcode": "011111 ..... ..... ..... 00000 11100.",
        "formatted_opcode": "011111---------------0000011100-",
        "instruction_format": "X",
        "full_name": "AND"
    },
    "andc[.]": {
        "mnemonic": "andc[.]",
        "formatted_mnemonic": "andc_dot",
        "opcode": "011111 ..... ..... ..... 00001 11100.",
        "formatted_opcode": "011111---------------0000111100-",
        "instruction_format": "X",
        "full_name": "AND with Complement"
    },
    "nor[.]": {
        "mnemonic": "nor[.]",
        "formatted_mnemonic": "nor_dot",
        "opcode": "011111 ..... ..... ..... 00011 11100.",
        "formatted_opcode": "011111---------------0001111100-",
        "instruction_format": "X",
        "full_name": "NOR"
    },
    "bpermd": {
        "mnemonic": "bpermd",
        "formatted_mnemonic": "bpermd",
        "opcode": "011111 ..... ..... ..... 00111 11100/",
        "formatted_opcode": "011111---------------0011111100-",
        "instruction_format": "X",
        "full_name": "Bit Permute Doubleword"
    },
    "eqv[.]": {
        "mnemonic": "eqv[.]",
        "formatted_mnemonic": "eqv_dot",
        "opcode": "011111 ..... ..... ..... 01000 11100.",
        "formatted_opcode": "011111---------------0100011100-",
        "instruction_format": "X",
        "full_name": "Equivalent"
    },
    "xor[.]": {
        "mnemonic": "xor[.]",
        "formatted_mnemonic": "xor_dot",
        "opcode": "011111 ..... ..... ..... 01001 11100.",
        "formatted_opcode": "011111---------------0100111100-",
        "instruction_format": "X",
        "full_name": "XOR"
    },
    "orc[.]": {
        "mnemonic": "orc[.]",
        "formatted_mnemonic": "orc_dot",
        "opcode": "011111 ..... ..... ..... 01100 11100.",
        "formatted_opcode": "011111---------------0110011100-",
        "instruction_format": "X",
        "full_name": "OR with Complement"
    },
    "or[.]": {
        "mnemonic": "or[.]",
        "formatted_mnemonic": "or_dot",
        "opcode": "011111 ..... ..... ..... 01101 11100.",
        "formatted_opcode": "011111---------------0110111100-",
        "instruction_format": "X",
        "full_name": "OR"
    },
    "nand[.]": {
        "mnemonic": "nand[.]",
        "formatted_mnemonic": "nand_dot",
        "opcode": "011111 ..... ..... ..... 01110 11100.",
        "formatted_opcode": "011111---------------0111011100-",
        "instruction_format": "X",
        "full_name": "NAND"
    },
    "cmpb": {
        "mnemonic": "cmpb",
        "formatted_mnemonic": "cmpb",
        "opcode": "011111 ..... ..... ..... 01111 11100/",
        "formatted_opcode": "011111---------------0111111100-",
        "instruction_format": "X",
        "full_name": "Compare Byte"
    },
    "wait": {
        "mnemonic": "wait",
        "formatted_mnemonic": "wait",
        "opcode": "011111 ///.. ///// ///// 00000 11110/",
        "formatted_opcode": "011111---------------0000011110-",
        "instruction_format": "X",
        "full_name": "Wait for Interrupt"
    },
    "lwz": {
        "mnemonic": "lwz",
        "formatted_mnemonic": "lwz",
        "opcode": "100000 ..... ..... ..... ..... ......",
        "formatted_opcode": "100000--------------------------",
        "instruction_format": "D",
        "full_name": "Load Word & Zero"
    },
    "lwzu": {
        "mnemonic": "lwzu",
        "formatted_mnemonic": "lwzu",
        "opcode": "100001 ..... ..... ..... ..... ......",
        "formatted_opcode": "100001--------------------------",
        "instruction_format": "D",
        "full_name": "Load Word & Zero with Update"
    },
    "lbz": {
        "mnemonic": "lbz",
        "formatted_mnemonic": "lbz",
        "opcode": "100010 ..... ..... ..... ..... ......",
        "formatted_opcode": "100010--------------------------",
        "instruction_format": "D",
        "full_name": "Load Byte & Zero"
    },
    "lbzu": {
        "mnemonic": "lbzu",
        "formatted_mnemonic": "lbzu",
        "opcode": "100011 ..... ..... ..... ..... ......",
        "formatted_opcode": "100011--------------------------",
        "instruction_format": "D",
        "full_name": "Load Byte & Zero with Update"
    },
    "stw": {
        "mnemonic": "stw",
        "formatted_mnemonic": "stw",
        "opcode": "100100 ..... ..... ..... ..... ......",
        "formatted_opcode": "100100--------------------------",
        "instruction_format": "D",
        "full_name": "Store Word"
    },
    "stwu": {
        "mnemonic": "stwu",
        "formatted_mnemonic": "stwu",
        "opcode": "100101 ..... ..... ..... ..... ......",
        "formatted_opcode": "100101--------------------------",
        "instruction_format": "D",
        "full_name": "Store Word with Update"
    },
    "stb": {
        "mnemonic": "stb",
        "formatted_mnemonic": "stb",
        "opcode": "100110 ..... ..... ..... ..... ......",
        "formatted_opcode": "100110--------------------------",
        "instruction_format": "D",
        "full_name": "Store Byte"
    },
    "stbu": {
        "mnemonic": "stbu",
        "formatted_mnemonic": "stbu",
        "opcode": "100111 ..... ..... ..... ..... ......",
        "formatted_opcode": "100111--------------------------",
        "instruction_format": "D",
        "full_name": "Store Byte with Update"
    },
    "lhz": {
        "mnemonic": "lhz",
        "formatted_mnemonic": "lhz",
        "opcode": "101000 ..... ..... ..... ..... ......",
        "formatted_opcode": "101000--------------------------",
        "instruction_format": "D",
        "full_name": "Load Halfword & Zero"
    },
    "lhzu": {
        "mnemonic": "lhzu",
        "formatted_mnemonic": "lhzu",
        "opcode": "101001 ..... ..... ..... ..... ......",
        "formatted_opcode": "101001--------------------------",
        "instruction_format": "D",
        "full_name": "Load Halfword & Zero with Update"
    },
    "lha": {
        "mnemonic": "lha",
        "formatted_mnemonic": "lha",
        "opcode": "101010 ..... ..... ..... ..... ......",
        "formatted_opcode": "101010--------------------------",
        "instruction_format": "D",
        "full_name": "Load Halfword Algebraic"
    },
    "lhau": {
        "mnemonic": "lhau",
        "formatted_mnemonic": "lhau",
        "opcode": "101011 ..... ..... ..... ..... ......",
        "formatted_opcode": "101011--------------------------",
        "instruction_format": "D",
        "full_name": "Load Halfword Algebraic with Update"
    },
    "sth": {
        "mnemonic": "sth",
        "formatted_mnemonic": "sth",
        "opcode": "101100 ..... ..... ..... ..... ......",
        "formatted_opcode": "101100--------------------------",
        "instruction_format": "D",
        "full_name": "Store Halfword"
    },
    "sthu": {
        "mnemonic": "sthu",
        "formatted_mnemonic": "sthu",
        "opcode": "101101 ..... ..... ..... ..... ......",
        "formatted_opcode": "101101--------------------------",
        "instruction_format": "D",
        "full_name": "Store Halfword with Update"
    },
    "lmw": {
        "mnemonic": "lmw",
        "formatted_mnemonic": "lmw",
        "opcode": "101110 ..... ..... ..... ..... ......",
        "formatted_opcode": "101110--------------------------",
        "instruction_format": "D",
        "full_name": "Load Multiple Word"
    },
    "stmw": {
        "mnemonic": "stmw",
        "formatted_mnemonic": "stmw",
        "opcode": "101111 ..... ..... ..... ..... ......",
        "formatted_opcode": "101111--------------------------",
        "instruction_format": "D",
        "full_name": "Store Multiple Word"
    },
    "lfs": {
        "mnemonic": "lfs",
        "formatted_mnemonic": "lfs",
        "opcode": "110000 ..... ..... ..... ..... ......",
        "formatted_opcode": "110000--------------------------",
        "instruction_format": "D",
        "full_name": "Load Floating Single"
    },
    "lfsu": {
        "mnemonic": "lfsu",
        "formatted_mnemonic": "lfsu",
        "opcode": "110001 ..... ..... ..... ..... ......",
        "formatted_opcode": "110001--------------------------",
        "instruction_format": "D",
        "full_name": "Load Floating Single with Update"
    },
    "lfd": {
        "mnemonic": "lfd",
        "formatted_mnemonic": "lfd",
        "opcode": "110010 ..... ..... ..... ..... ......",
        "formatted_opcode": "110010--------------------------",
        "instruction_format": "D",
        "full_name": "Load Floating Double"
    },
    "lfdu": {
        "mnemonic": "lfdu",
        "formatted_mnemonic": "lfdu",
        "opcode": "110011 ..... ..... ..... ..... ......",
        "formatted_opcode": "110011--------------------------",
        "instruction_format": "D",
        "full_name": "Load Floating Double with Update"
    },
    "stfs": {
        "mnemonic": "stfs",
        "formatted_mnemonic": "stfs",
        "opcode": "110100 ..... ..... ..... ..... ......",
        "formatted_opcode": "110100--------------------------",
        "instruction_format": "D",
        "full_name": "Store Floating Single"
    },
    "stfsu": {
        "mnemonic": "stfsu",
        "formatted_mnemonic": "stfsu",
        "opcode": "110101 ..... ..... ..... ..... ......",
        "formatted_opcode": "110101--------------------------",
        "instruction_format": "D",
        "full_name": "Store Floating Single with Update"
    },
    "stfd": {
        "mnemonic": "stfd",
        "formatted_mnemonic": "stfd",
        "opcode": "110110 ..... ..... ..... ..... ......",
        "formatted_opcode": "110110--------------------------",
        "instruction_format": "D",
        "full_name": "Store Floating Double"
    },
    "stfdu": {
        "mnemonic": "stfdu",
        "formatted_mnemonic": "stfdu",
        "opcode": "110111 ..... ..... ..... ..... ......",
        "formatted_opcode": "110111--------------------------",
        "instruction_format": "D",
        "full_name": "Store Floating Double with Update"
    },
    "lq": {
        "mnemonic": "lq",
        "formatted_mnemonic": "lq",
        "opcode": "111000 ..... ..... ..... ..... ......",
        "formatted_opcode": "111000--------------------------",
        "instruction_format": "DQ",
        "full_name": "Load Quadword"
    },
    "lfdp": {
        "mnemonic": "lfdp",
        "formatted_mnemonic": "lfdp",
        "opcode": "111001 ..... ..... ..... ..... ....00",
        "formatted_opcode": "111001------------------------00",
        "instruction_format": "DS",
        "full_name": "Load Floating Double Pair"
    },
    "lxsd": {
        "mnemonic": "lxsd",
        "formatted_mnemonic": "lxsd",
        "opcode": "111001 ..... ..... ..... ..... ....10",
        "formatted_opcode": "111001------------------------10",
        "instruction_format": "DS",
        "full_name": "Load VSX Scalar Doubleword"
    },
    "lxssp": {
        "mnemonic": "lxssp",
        "formatted_mnemonic": "lxssp",
        "opcode": "111001 ..... ..... ..... ..... ....11",
        "formatted_opcode": "111001------------------------11",
        "instruction_format": "DS",
        "full_name": "Load VSX Scalar Single"
    },
    "ld": {
        "mnemonic": "ld",
        "formatted_mnemonic": "ld",
        "opcode": "111010 ..... ..... ..... ..... ....00",
        "formatted_opcode": "111010------------------------00",
        "instruction_format": "DS",
        "full_name": "Load Doubleword"
    },
    "ldu": {
        "mnemonic": "ldu",
        "formatted_mnemonic": "ldu",
        "opcode": "111010 ..... ..... ..... ..... ....01",
        "formatted_opcode": "111010------------------------01",
        "instruction_format": "DS",
        "full_name": "Load Doubleword with Update"
    },
    "lwa": {
        "mnemonic": "lwa",
        "formatted_mnemonic": "lwa",
        "opcode": "111010 ..... ..... ..... ..... ....10",
        "formatted_opcode": "111010------------------------10",
        "instruction_format": "DS",
        "full_name": "Load Word Algebraic"
    },
    "dadd[.]": {
        "mnemonic": "dadd[.]",
        "formatted_mnemonic": "dadd_dot",
        "opcode": "111011 ..... ..... ..... 00000 00010.",
        "formatted_opcode": "111011---------------0000000010-",
        "instruction_format": "X",
        "full_name": "DFP Add"
    },
    "dmul[.]": {
        "mnemonic": "dmul[.]",
        "formatted_mnemonic": "dmul_dot",
        "opcode": "111011 ..... ..... ..... 00001 00010.",
        "formatted_opcode": "111011---------------0000100010-",
        "instruction_format": "X",
        "full_name": "DFP Multiply"
    },
    "dscli[.]": {
        "mnemonic": "dscli[.]",
        "formatted_mnemonic": "dscli_dot",
        "opcode": "111011 ..... ..... ..... .0010 00010.",
        "formatted_opcode": "111011----------------001000010-",
        "instruction_format": "Z22",
        "full_name": "DFP Shift Significand Left Immediate"
    },
    "dscri[.]": {
        "mnemonic": "dscri[.]",
        "formatted_mnemonic": "dscri_dot",
        "opcode": "111011 ..... ..... ..... .0011 00010.",
        "formatted_opcode": "111011----------------001100010-",
        "instruction_format": "Z22",
        "full_name": "DFP Shift Significand Right Immediate"
    },
    "dcmpo": {
        "mnemonic": "dcmpo",
        "formatted_mnemonic": "dcmpo",
        "opcode": "111011 ...// ..... ..... 00100 00010/",
        "formatted_opcode": "111011---------------0010000010-",
        "instruction_format": "X",
        "full_name": "DFP Compare Ordered"
    },
    "dtstex": {
        "mnemonic": "dtstex",
        "formatted_mnemonic": "dtstex",
        "opcode": "111011 ...// ..... ..... 00101 00010/",
        "formatted_opcode": "111011---------------0010100010-",
        "instruction_format": "X",
        "full_name": "DFP Test Exponent"
    },
    "dtstdc": {
        "mnemonic": "dtstdc",
        "formatted_mnemonic": "dtstdc",
        "opcode": "111011 ...// ..... ..... .0110 00010/",
        "formatted_opcode": "111011----------------011000010-",
        "instruction_format": "Z22",
        "full_name": "DFP Test Data Class"
    },
    "dtstdg": {
        "mnemonic": "dtstdg",
        "formatted_mnemonic": "dtstdg",
        "opcode": "111011 ...// ..... ..... .0111 00010/",
        "formatted_opcode": "111011----------------011100010-",
        "instruction_format": "Z22",
        "full_name": "DFP Test Data Group"
    },
    "dctdp[.]": {
        "mnemonic": "dctdp[.]",
        "formatted_mnemonic": "dctdp_dot",
        "opcode": "111011 ..... ///// ..... 01000 00010.",
        "formatted_opcode": "111011---------------0100000010-",
        "instruction_format": "X",
        "full_name": "DFP Convert To DFP Long"
    },
    "dctfix[.]": {
        "mnemonic": "dctfix[.]",
        "formatted_mnemonic": "dctfix_dot",
        "opcode": "111011 ..... ///// ..... 01001 00010.",
        "formatted_opcode": "111011---------------0100100010-",
        "instruction_format": "X",
        "full_name": "DFP Convert To Fixed"
    },
    "ddedpd[.]": {
        "mnemonic": "ddedpd[.]",
        "formatted_mnemonic": "ddedpd_dot",
        "opcode": "111011 ..... ../// ..... 01010 00010.",
        "formatted_opcode": "111011---------------0101000010-",
        "instruction_format": "X",
        "full_name": "DFP Decode DPD To BCD"
    },
    "dxex[.]": {
        "mnemonic": "dxex[.]",
        "formatted_mnemonic": "dxex_dot",
        "opcode": "111011 ..... ///// ..... 01011 00010.",
        "formatted_opcode": "111011---------------0101100010-",
        "instruction_format": "X",
        "full_name": "DFP Extract Exponent"
    },
    "dsub[.]": {
        "mnemonic": "dsub[.]",
        "formatted_mnemonic": "dsub_dot",
        "opcode": "111011 ..... ..... ..... 10000 00010.",
        "formatted_opcode": "111011---------------1000000010-",
        "instruction_format": "X",
        "full_name": "DFP Subtract"
    },
    "ddiv[.]": {
        "mnemonic": "ddiv[.]",
        "formatted_mnemonic": "ddiv_dot",
        "opcode": "111011 ..... ..... ..... 10001 00010.",
        "formatted_opcode": "111011---------------1000100010-",
        "instruction_format": "X",
        "full_name": "DFP Divide"
    },
    "dcmpu": {
        "mnemonic": "dcmpu",
        "formatted_mnemonic": "dcmpu",
        "opcode": "111011 ...// ..... ..... 10100 00010/",
        "formatted_opcode": "111011---------------1010000010-",
        "instruction_format": "X",
        "full_name": "DFP Compare Unordered"
    },
    "dtstsf": {
        "mnemonic": "dtstsf",
        "formatted_mnemonic": "dtstsf",
        "opcode": "111011 ...// ..... ..... 10101 00010/",
        "formatted_opcode": "111011---------------1010100010-",
        "instruction_format": "X",
        "full_name": "DFP Test Significance"
    },
    "drsp[.]": {
        "mnemonic": "drsp[.]",
        "formatted_mnemonic": "drsp_dot",
        "opcode": "111011 ..... ///// ..... 11000 00010.",
        "formatted_opcode": "111011---------------1100000010-",
        "instruction_format": "X",
        "full_name": "DFP Round To DFP Short"
    },
    "dcffix[.]": {
        "mnemonic": "dcffix[.]",
        "formatted_mnemonic": "dcffix_dot",
        "opcode": "111011 ..... ///// ..... 11001 00010.",
        "formatted_opcode": "111011---------------1100100010-",
        "instruction_format": "X",
        "full_name": "DFP Convert From Fixed"
    },
    "denbcd[.]": {
        "mnemonic": "denbcd[.]",
        "formatted_mnemonic": "denbcd_dot",
        "opcode": "111011 ..... .//// ..... 11010 00010.",
        "formatted_opcode": "111011---------------1101000010-",
        "instruction_format": "X",
        "full_name": "DFP Encode BCD To DPD"
    },
    "diex[.]": {
        "mnemonic": "diex[.]",
        "formatted_mnemonic": "diex_dot",
        "opcode": "111011 ..... ..... ..... 11011 00010.",
        "formatted_opcode": "111011---------------1101100010-",
        "instruction_format": "X",
        "full_name": "DFP Insert Exponent"
    },
    "dqua[.]": {
        "mnemonic": "dqua[.]",
        "formatted_mnemonic": "dqua_dot",
        "opcode": "111011 ..... ..... ..... ..000 00011.",
        "formatted_opcode": "111011-----------------00000011-",
        "instruction_format": "Z23",
        "full_name": "DFP Quantize"
    },
    "drrnd[.]": {
        "mnemonic": "drrnd[.]",
        "formatted_mnemonic": "drrnd_dot",
        "opcode": "111011 ..... ..... ..... ..001 00011.",
        "formatted_opcode": "111011-----------------00100011-",
        "instruction_format": "Z23",
        "full_name": "DFP Reround"
    },
    "dquai[.]": {
        "mnemonic": "dquai[.]",
        "formatted_mnemonic": "dquai_dot",
        "opcode": "111011 ..... ..... ..... ..010 00011.",
        "formatted_opcode": "111011-----------------01000011-",
        "instruction_format": "Z23",
        "full_name": "DFP Quantize Immediate"
    },
    "drintx[.]": {
        "mnemonic": "drintx[.]",
        "formatted_mnemonic": "drintx_dot",
        "opcode": "111011 ..... ////. ..... ..011 00011.",
        "formatted_opcode": "111011-----------------01100011-",
        "instruction_format": "Z23",
        "full_name": "DFP Round To FP Integer With Inexact"
    },
    "drintn[.]": {
        "mnemonic": "drintn[.]",
        "formatted_mnemonic": "drintn_dot",
        "opcode": "111011 ..... ////. ..... ..111 00011.",
        "formatted_opcode": "111011-----------------11100011-",
        "instruction_format": "Z23",
        "full_name": "DFP Round To FP Integer Without Inexact"
    },
    "dtstsfi": {
        "mnemonic": "dtstsfi",
        "formatted_mnemonic": "dtstsfi",
        "opcode": "111011 ...// ..... ..... 10101 00011/",
        "formatted_opcode": "111011---------------1010100011-",
        "instruction_format": "X",
        "full_name": "DFP Test Significance Immediate"
    },
    "fcfids[.]": {
        "mnemonic": "fcfids[.]",
        "formatted_mnemonic": "fcfids_dot",
        "opcode": "111011 ..... ///// ..... 11010 01110.",
        "formatted_opcode": "111011---------------1101001110-",
        "instruction_format": "X",
        "full_name": "Floating Convert with round Signed Doubleword to Single-Precision format"
    },
    "fcfidus[.]": {
        "mnemonic": "fcfidus[.]",
        "formatted_mnemonic": "fcfidus_dot",
        "opcode": "111011 ..... ///// ..... 11110 01110.",
        "formatted_opcode": "111011---------------1111001110-",
        "instruction_format": "X",
        "full_name": "Floating Convert with round Unsigned Doubleword to Single-Precision format"
    },
    "fdivs[.]": {
        "mnemonic": "fdivs[.]",
        "formatted_mnemonic": "fdivs_dot",
        "opcode": "111011 ..... ..... ..... ///// 10010.",
        "formatted_opcode": "111011--------------------10010-",
        "instruction_format": "A",
        "full_name": "Floating Divide Single"
    },
    "fsubs[.]": {
        "mnemonic": "fsubs[.]",
        "formatted_mnemonic": "fsubs_dot",
        "opcode": "111011 ..... ..... ..... ///// 10100.",
        "formatted_opcode": "111011--------------------10100-",
        "instruction_format": "A",
        "full_name": "Floating Subtract Single"
    },
    "fadds[.]": {
        "mnemonic": "fadds[.]",
        "formatted_mnemonic": "fadds_dot",
        "opcode": "111011 ..... ..... ..... ///// 10101.",
        "formatted_opcode": "111011--------------------10101-",
        "instruction_format": "A",
        "full_name": "Floating Add Single"
    },
    "fsqrts[.]": {
        "mnemonic": "fsqrts[.]",
        "formatted_mnemonic": "fsqrts_dot",
        "opcode": "111011 ..... ///// ..... ///// 10110.",
        "formatted_opcode": "111011--------------------10110-",
        "instruction_format": "A",
        "full_name": "Floating Square Root Single"
    },
    "fres[.]": {
        "mnemonic": "fres[.]",
        "formatted_mnemonic": "fres_dot",
        "opcode": "111011 ..... ///// ..... ///// 11000.",
        "formatted_opcode": "111011--------------------11000-",
        "instruction_format": "A",
        "full_name": "Floating Reciprocal Estimate Single"
    },
    "fmuls[.]": {
        "mnemonic": "fmuls[.]",
        "formatted_mnemonic": "fmuls_dot",
        "opcode": "111011 ..... ..... ///// ..... 11001.",
        "formatted_opcode": "111011--------------------11001-",
        "instruction_format": "A",
        "full_name": "Floating Multiply Single"
    },
    "frsqrtes[.]": {
        "mnemonic": "frsqrtes[.]",
        "formatted_mnemonic": "frsqrtes_dot",
        "opcode": "111011 ..... ///// ..... ///// 11010.",
        "formatted_opcode": "111011--------------------11010-",
        "instruction_format": "A",
        "full_name": "Floating Reciprocal Square Root Estimate Single"
    },
    "fmsubs[.]": {
        "mnemonic": "fmsubs[.]",
        "formatted_mnemonic": "fmsubs_dot",
        "opcode": "111011 ..... ..... ..... ..... 11100.",
        "formatted_opcode": "111011--------------------11100-",
        "instruction_format": "A",
        "full_name": "Floating Multiply-Subtract Single"
    },
    "fmadds[.]": {
        "mnemonic": "fmadds[.]",
        "formatted_mnemonic": "fmadds_dot",
        "opcode": "111011 ..... ..... ..... ..... 11101.",
        "formatted_opcode": "111011--------------------11101-",
        "instruction_format": "A",
        "full_name": "Floating Multiply-Add Single"
    },
    "fnmsubs[.]": {
        "mnemonic": "fnmsubs[.]",
        "formatted_mnemonic": "fnmsubs_dot",
        "opcode": "111011 ..... ..... ..... ..... 11110.",
        "formatted_opcode": "111011--------------------11110-",
        "instruction_format": "A",
        "full_name": "Floating Negative Multiply-Subtract Single"
    },
    "fnmadds[.]": {
        "mnemonic": "fnmadds[.]",
        "formatted_mnemonic": "fnmadds_dot",
        "opcode": "111011 ..... ..... ..... ..... 11111.",
        "formatted_opcode": "111011--------------------11111-",
        "instruction_format": "A",
        "full_name": "Floating Negative Multiply-Add Single"
    },
    "xsaddsp": {
        "mnemonic": "xsaddsp",
        "formatted_mnemonic": "xsaddsp",
        "opcode": "111100 ..... ..... ..... 00000 000...",
        "formatted_opcode": "111100---------------00000000---",
        "instruction_format": "XX3",
        "full_name": "VSX Scalar Add Single-Precision"
    },
    "xssubsp": {
        "mnemonic": "xssubsp",
        "formatted_mnemonic": "xssubsp",
        "opcode": "111100 ..... ..... ..... 00001 000...",
        "formatted_opcode": "111100---------------00001000---",
        "instruction_format": "XX3",
        "full_name": "VSX Scalar Subtract Single-Precision"
    },
    "xsmulsp": {
        "mnemonic": "xsmulsp",
        "formatted_mnemonic": "xsmulsp",
        "opcode": "111100 ..... ..... ..... 00010 000...",
        "formatted_opcode": "111100---------------00010000---",
        "instruction_format": "XX3",
        "full_name": "VSX Scalar Multiply Single-Precision"
    },
    "xsdivsp": {
        "mnemonic": "xsdivsp",
        "formatted_mnemonic": "xsdivsp",
        "opcode": "111100 ..... ..... ..... 00011 000...",
        "formatted_opcode": "111100---------------00011000---",
        "instruction_format": "XX3",
        "full_name": "VSX Scalar Divide Single-Precision"
    },
    "xsadddp": {
        "mnemonic": "xsadddp",
        "formatted_mnemonic": "xsadddp",
        "opcode": "111100 ..... ..... ..... 00100 000...",
        "formatted_opcode": "111100---------------00100000---",
        "instruction_format": "XX3",
        "full_name": "VSX Scalar Add Double-Precision"
    },
    "xssubdp": {
        "mnemonic": "xssubdp",
        "formatted_mnemonic": "xssubdp",
        "opcode": "111100 ..... ..... ..... 00101 000...",
        "formatted_opcode": "111100---------------00101000---",
        "instruction_format": "XX3",
        "full_name": "VSX Scalar Subtract Double-Precision"
    },
    "xsmuldp": {
        "mnemonic": "xsmuldp",
        "formatted_mnemonic": "xsmuldp",
        "opcode": "111100 ..... ..... ..... 00110 000...",
        "formatted_opcode": "111100---------------00110000---",
        "instruction_format": "XX3",
        "full_name": "VSX Scalar Multiply Double-Precision"
    },
    "xsdivdp": {
        "mnemonic": "xsdivdp",
        "formatted_mnemonic": "xsdivdp",
        "opcode": "111100 ..... ..... ..... 00111 000...",
        "formatted_opcode": "111100---------------00111000---",
        "instruction_format": "XX3",
        "full_name": "VSX Scalar Divide Double-Precision"
    },
    "xvaddsp": {
        "mnemonic": "xvaddsp",
        "formatted_mnemonic": "xvaddsp",
        "opcode": "111100 ..... ..... ..... 01000 000...",
        "formatted_opcode": "111100---------------01000000---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Add Single-Precision"
    },
    "xvsubsp": {
        "mnemonic": "xvsubsp",
        "formatted_mnemonic": "xvsubsp",
        "opcode": "111100 ..... ..... ..... 01001 000...",
        "formatted_opcode": "111100---------------01001000---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Subtract Single-Precision"
    },
    "xvmulsp": {
        "mnemonic": "xvmulsp",
        "formatted_mnemonic": "xvmulsp",
        "opcode": "111100 ..... ..... ..... 01010 000...",
        "formatted_opcode": "111100---------------01010000---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Multiply Single-Precision"
    },
    "xvdivsp": {
        "mnemonic": "xvdivsp",
        "formatted_mnemonic": "xvdivsp",
        "opcode": "111100 ..... ..... ..... 01011 000...",
        "formatted_opcode": "111100---------------01011000---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Divide Single-Precision"
    },
    "xvadddp": {
        "mnemonic": "xvadddp",
        "formatted_mnemonic": "xvadddp",
        "opcode": "111100 ..... ..... ..... 01100 000...",
        "formatted_opcode": "111100---------------01100000---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Add Double-Precision"
    },
    "xvsubdp": {
        "mnemonic": "xvsubdp",
        "formatted_mnemonic": "xvsubdp",
        "opcode": "111100 ..... ..... ..... 01101 000...",
        "formatted_opcode": "111100---------------01101000---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Subtract Double-Precision"
    },
    "xvmuldp": {
        "mnemonic": "xvmuldp",
        "formatted_mnemonic": "xvmuldp",
        "opcode": "111100 ..... ..... ..... 01110 000...",
        "formatted_opcode": "111100---------------01110000---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Multiply Double-Precision"
    },
    "xvdivdp": {
        "mnemonic": "xvdivdp",
        "formatted_mnemonic": "xvdivdp",
        "opcode": "111100 ..... ..... ..... 01111 000...",
        "formatted_opcode": "111100---------------01111000---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Divide Double-Precision"
    },
    "xsmaxcdp": {
        "mnemonic": "xsmaxcdp",
        "formatted_mnemonic": "xsmaxcdp",
        "opcode": "111100 ..... ..... ..... 10000 000...",
        "formatted_opcode": "111100---------------10000000---",
        "instruction_format": "XX3",
        "full_name": "VSX Scalar Maximum Type-C Double-Precision"
    },
    "xsmincdp": {
        "mnemonic": "xsmincdp",
        "formatted_mnemonic": "xsmincdp",
        "opcode": "111100 ..... ..... ..... 10001 000...",
        "formatted_opcode": "111100---------------10001000---",
        "instruction_format": "XX3",
        "full_name": "VSX Scalar Minimum Type-C Double-Precision"
    },
    "xsmaxjdp": {
        "mnemonic": "xsmaxjdp",
        "formatted_mnemonic": "xsmaxjdp",
        "opcode": "111100 ..... ..... ..... 10010 000...",
        "formatted_opcode": "111100---------------10010000---",
        "instruction_format": "XX3",
        "full_name": "VSX Scalar Maximum Type-J Double-Precision"
    },
    "xsminjdp": {
        "mnemonic": "xsminjdp",
        "formatted_mnemonic": "xsminjdp",
        "opcode": "111100 ..... ..... ..... 10011 000...",
        "formatted_opcode": "111100---------------10011000---",
        "instruction_format": "XX3",
        "full_name": "VSX Scalar Minimum Type-J Double-Precision"
    },
    "xsmaxdp": {
        "mnemonic": "xsmaxdp",
        "formatted_mnemonic": "xsmaxdp",
        "opcode": "111100 ..... ..... ..... 10100 000...",
        "formatted_opcode": "111100---------------10100000---",
        "instruction_format": "XX3",
        "full_name": "VSX Scalar Maximum Double-Precision"
    },
    "xsmindp": {
        "mnemonic": "xsmindp",
        "formatted_mnemonic": "xsmindp",
        "opcode": "111100 ..... ..... ..... 10101 000...",
        "formatted_opcode": "111100---------------10101000---",
        "instruction_format": "XX3",
        "full_name": "VSX Scalar Minimum Double-Precision"
    },
    "xscpsgndp": {
        "mnemonic": "xscpsgndp",
        "formatted_mnemonic": "xscpsgndp",
        "opcode": "111100 ..... ..... ..... 10110 000...",
        "formatted_opcode": "111100---------------10110000---",
        "instruction_format": "XX3",
        "full_name": "VSX Scalar Copy Sign Double-Precision"
    },
    "xvmaxsp": {
        "mnemonic": "xvmaxsp",
        "formatted_mnemonic": "xvmaxsp",
        "opcode": "111100 ..... ..... ..... 11000 000...",
        "formatted_opcode": "111100---------------11000000---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Maximum Single-Precision"
    },
    "xvminsp": {
        "mnemonic": "xvminsp",
        "formatted_mnemonic": "xvminsp",
        "opcode": "111100 ..... ..... ..... 11001 000...",
        "formatted_opcode": "111100---------------11001000---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Minimum Single-Precision"
    },
    "xvcpsgnsp": {
        "mnemonic": "xvcpsgnsp",
        "formatted_mnemonic": "xvcpsgnsp",
        "opcode": "111100 ..... ..... ..... 11010 000...",
        "formatted_opcode": "111100---------------11010000---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Copy Sign Single-Precision"
    },
    "xviexpsp": {
        "mnemonic": "xviexpsp",
        "formatted_mnemonic": "xviexpsp",
        "opcode": "111100 ..... ..... ..... 11011 000...",
        "formatted_opcode": "111100---------------11011000---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Insert Exponent Single-Precision"
    },
    "xvmaxdp": {
        "mnemonic": "xvmaxdp",
        "formatted_mnemonic": "xvmaxdp",
        "opcode": "111100 ..... ..... ..... 11100 000...",
        "formatted_opcode": "111100---------------11100000---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Maximum Double-Precision"
    },
    "xvmindp": {
        "mnemonic": "xvmindp",
        "formatted_mnemonic": "xvmindp",
        "opcode": "111100 ..... ..... ..... 11101 000...",
        "formatted_opcode": "111100---------------11101000---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Minimum Double-Precision"
    },
    "xvcpsgndp": {
        "mnemonic": "xvcpsgndp",
        "formatted_mnemonic": "xvcpsgndp",
        "opcode": "111100 ..... ..... ..... 11110 000...",
        "formatted_opcode": "111100---------------11110000---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Copy Sign Double-Precision"
    },
    "xviexpdp": {
        "mnemonic": "xviexpdp",
        "formatted_mnemonic": "xviexpdp",
        "opcode": "111100 ..... ..... ..... 11111 000...",
        "formatted_opcode": "111100---------------11111000---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Insert Exponent Double-Precision"
    },
    "xsmaddasp": {
        "mnemonic": "xsmaddasp",
        "formatted_mnemonic": "xsmaddasp",
        "opcode": "111100 ..... ..... ..... 00000 001...",
        "formatted_opcode": "111100---------------00000001---",
        "instruction_format": "XX3",
        "full_name": "VSX Scalar Multiply-Add Type-A Single-Precision"
    },
    "xsmaddmsp": {
        "mnemonic": "xsmaddmsp",
        "formatted_mnemonic": "xsmaddmsp",
        "opcode": "111100 ..... ..... ..... 00001 001...",
        "formatted_opcode": "111100---------------00001001---",
        "instruction_format": "XX3",
        "full_name": "VSX Scalar Multiply-Add Type-M Single-Precision"
    },
    "xsmsubasp": {
        "mnemonic": "xsmsubasp",
        "formatted_mnemonic": "xsmsubasp",
        "opcode": "111100 ..... ..... ..... 00010 001...",
        "formatted_opcode": "111100---------------00010001---",
        "instruction_format": "XX3",
        "full_name": "VSX Scalar Multiply-Subtract Type-A Single-Precision"
    },
    "xsmsubmsp": {
        "mnemonic": "xsmsubmsp",
        "formatted_mnemonic": "xsmsubmsp",
        "opcode": "111100 ..... ..... ..... 00011 001...",
        "formatted_opcode": "111100---------------00011001---",
        "instruction_format": "XX3",
        "full_name": "VSX Scalar Multiply-Subtract Type-M Single-Precision"
    },
    "xsmaddadp": {
        "mnemonic": "xsmaddadp",
        "formatted_mnemonic": "xsmaddadp",
        "opcode": "111100 ..... ..... ..... 00100 001...",
        "formatted_opcode": "111100---------------00100001---",
        "instruction_format": "XX3",
        "full_name": "VSX Scalar Multiply-Add Type-A Double-Precision"
    },
    "xsmaddmdp": {
        "mnemonic": "xsmaddmdp",
        "formatted_mnemonic": "xsmaddmdp",
        "opcode": "111100 ..... ..... ..... 00101 001...",
        "formatted_opcode": "111100---------------00101001---",
        "instruction_format": "XX3",
        "full_name": "VSX Scalar Multiply-Add Type-M Double-Precision"
    },
    "xsmsubadp": {
        "mnemonic": "xsmsubadp",
        "formatted_mnemonic": "xsmsubadp",
        "opcode": "111100 ..... ..... ..... 00110 001...",
        "formatted_opcode": "111100---------------00110001---",
        "instruction_format": "XX3",
        "full_name": "VSX Scalar Multiply-Subtract Type-A Double-Precision"
    },
    "xsmsubmdp": {
        "mnemonic": "xsmsubmdp",
        "formatted_mnemonic": "xsmsubmdp",
        "opcode": "111100 ..... ..... ..... 00111 001...",
        "formatted_opcode": "111100---------------00111001---",
        "instruction_format": "XX3",
        "full_name": "VSX Scalar Multiply-Subtract Type-M Double-Precision"
    },
    "xvmaddasp": {
        "mnemonic": "xvmaddasp",
        "formatted_mnemonic": "xvmaddasp",
        "opcode": "111100 ..... ..... ..... 01000 001...",
        "formatted_opcode": "111100---------------01000001---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Multiply-Add Type-A Single-Precision"
    },
    "xvmaddmsp": {
        "mnemonic": "xvmaddmsp",
        "formatted_mnemonic": "xvmaddmsp",
        "opcode": "111100 ..... ..... ..... 01001 001...",
        "formatted_opcode": "111100---------------01001001---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Multiply-Add Type-M Single-Precision"
    },
    "xvmsubasp": {
        "mnemonic": "xvmsubasp",
        "formatted_mnemonic": "xvmsubasp",
        "opcode": "111100 ..... ..... ..... 01010 001...",
        "formatted_opcode": "111100---------------01010001---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Multiply-Subtract Type-A Single-Precision"
    },
    "xvmsubmsp": {
        "mnemonic": "xvmsubmsp",
        "formatted_mnemonic": "xvmsubmsp",
        "opcode": "111100 ..... ..... ..... 01011 001...",
        "formatted_opcode": "111100---------------01011001---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Multiply-Subtract Type-M Single-Precision"
    },
    "xvmaddadp": {
        "mnemonic": "xvmaddadp",
        "formatted_mnemonic": "xvmaddadp",
        "opcode": "111100 ..... ..... ..... 01100 001...",
        "formatted_opcode": "111100---------------01100001---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Multiply-Add Type-A Double-Precision"
    },
    "xvmaddmdp": {
        "mnemonic": "xvmaddmdp",
        "formatted_mnemonic": "xvmaddmdp",
        "opcode": "111100 ..... ..... ..... 01101 001...",
        "formatted_opcode": "111100---------------01101001---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Multiply-Add Type-M Double-Precision"
    },
    "xvmsubadp": {
        "mnemonic": "xvmsubadp",
        "formatted_mnemonic": "xvmsubadp",
        "opcode": "111100 ..... ..... ..... 01110 001...",
        "formatted_opcode": "111100---------------01110001---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Multiply-Subtract Type-A Double-Precision"
    },
    "xvmsubmdp": {
        "mnemonic": "xvmsubmdp",
        "formatted_mnemonic": "xvmsubmdp",
        "opcode": "111100 ..... ..... ..... 01111 001...",
        "formatted_opcode": "111100---------------01111001---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Multiply-Subtract Type-M Double-Precision"
    },
    "xsnmaddasp": {
        "mnemonic": "xsnmaddasp",
        "formatted_mnemonic": "xsnmaddasp",
        "opcode": "111100 ..... ..... ..... 10000 001...",
        "formatted_opcode": "111100---------------10000001---",
        "instruction_format": "XX3",
        "full_name": "VSX Scalar Negative Multiply-Add Type-A Single-Precision"
    },
    "xsnmaddmsp": {
        "mnemonic": "xsnmaddmsp",
        "formatted_mnemonic": "xsnmaddmsp",
        "opcode": "111100 ..... ..... ..... 10001 001...",
        "formatted_opcode": "111100---------------10001001---",
        "instruction_format": "XX3",
        "full_name": "VSX Scalar Negative Multiply-Add Type-M Single-Precision"
    },
    "xsnmsubasp": {
        "mnemonic": "xsnmsubasp",
        "formatted_mnemonic": "xsnmsubasp",
        "opcode": "111100 ..... ..... ..... 10010 001...",
        "formatted_opcode": "111100---------------10010001---",
        "instruction_format": "XX3",
        "full_name": "VSX Scalar Negative Multiply-Subtract Type-A Single-Precision"
    },
    "xsnmsubmsp": {
        "mnemonic": "xsnmsubmsp",
        "formatted_mnemonic": "xsnmsubmsp",
        "opcode": "111100 ..... ..... ..... 10011 001...",
        "formatted_opcode": "111100---------------10011001---",
        "instruction_format": "XX3",
        "full_name": "VSX Scalar Negative Multiply-Subtract Type-M Single-Precision"
    },
    "xsnmaddadp": {
        "mnemonic": "xsnmaddadp",
        "formatted_mnemonic": "xsnmaddadp",
        "opcode": "111100 ..... ..... ..... 10100 001...",
        "formatted_opcode": "111100---------------10100001---",
        "instruction_format": "XX3",
        "full_name": "VSX Scalar Negative Multiply-Add Type-A Double-Precision"
    },
    "xsnmaddmdp": {
        "mnemonic": "xsnmaddmdp",
        "formatted_mnemonic": "xsnmaddmdp",
        "opcode": "111100 ..... ..... ..... 10101 001...",
        "formatted_opcode": "111100---------------10101001---",
        "instruction_format": "XX3",
        "full_name": "VSX Scalar Negative Multiply-Add Type-M Double-Precision"
    },
    "xsnmsubadp": {
        "mnemonic": "xsnmsubadp",
        "formatted_mnemonic": "xsnmsubadp",
        "opcode": "111100 ..... ..... ..... 10110 001...",
        "formatted_opcode": "111100---------------10110001---",
        "instruction_format": "XX3",
        "full_name": "VSX Scalar Negative Multiply-Subtract Type-A Double-Precision"
    },
    "xsnmsubmdp": {
        "mnemonic": "xsnmsubmdp",
        "formatted_mnemonic": "xsnmsubmdp",
        "opcode": "111100 ..... ..... ..... 10111 001...",
        "formatted_opcode": "111100---------------10111001---",
        "instruction_format": "XX3",
        "full_name": "VSX Scalar Negative Multiply-Subtract Type-M Double-Precision"
    },
    "xvnmaddasp": {
        "mnemonic": "xvnmaddasp",
        "formatted_mnemonic": "xvnmaddasp",
        "opcode": "111100 ..... ..... ..... 11000 001...",
        "formatted_opcode": "111100---------------11000001---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Negative Multiply-Add Type-A Single-Precision"
    },
    "xvnmaddmsp": {
        "mnemonic": "xvnmaddmsp",
        "formatted_mnemonic": "xvnmaddmsp",
        "opcode": "111100 ..... ..... ..... 11001 001...",
        "formatted_opcode": "111100---------------11001001---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Negative Multiply-Add Type-M Single-Precision"
    },
    "xvnmsubasp": {
        "mnemonic": "xvnmsubasp",
        "formatted_mnemonic": "xvnmsubasp",
        "opcode": "111100 ..... ..... ..... 11010 001...",
        "formatted_opcode": "111100---------------11010001---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Negative Multiply-Subtract Type-A Single-Precision"
    },
    "xvnmsubmsp": {
        "mnemonic": "xvnmsubmsp",
        "formatted_mnemonic": "xvnmsubmsp",
        "opcode": "111100 ..... ..... ..... 11011 001...",
        "formatted_opcode": "111100---------------11011001---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Negative Multiply-Subtract Type-M Single-Precision"
    },
    "xvnmaddadp": {
        "mnemonic": "xvnmaddadp",
        "formatted_mnemonic": "xvnmaddadp",
        "opcode": "111100 ..... ..... ..... 11100 001...",
        "formatted_opcode": "111100---------------11100001---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Negative Multiply-Add Type-A Double-Precision"
    },
    "xvnmaddmdp": {
        "mnemonic": "xvnmaddmdp",
        "formatted_mnemonic": "xvnmaddmdp",
        "opcode": "111100 ..... ..... ..... 11101 001...",
        "formatted_opcode": "111100---------------11101001---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Negative Multiply-Add Type-M Double-Precision"
    },
    "xvnmsubadp": {
        "mnemonic": "xvnmsubadp",
        "formatted_mnemonic": "xvnmsubadp",
        "opcode": "111100 ..... ..... ..... 11110 001...",
        "formatted_opcode": "111100---------------11110001---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Negative Multiply-Subtract Type-A Double-Precision"
    },
    "xvnmsubmdp": {
        "mnemonic": "xvnmsubmdp",
        "formatted_mnemonic": "xvnmsubmdp",
        "opcode": "111100 ..... ..... ..... 11111 001...",
        "formatted_opcode": "111100---------------11111001---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Negative Multiply-Subtract Type-M Double-Precision"
    },
    "xxsldwi": {
        "mnemonic": "xxsldwi",
        "formatted_mnemonic": "xxsldwi",
        "opcode": "111100 ..... ..... ..... 0..00 010...",
        "formatted_opcode": "111100---------------0--00010---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Shift Left Double by Word Immediate"
    },
    "xxpermdi": {
        "mnemonic": "xxpermdi",
        "formatted_mnemonic": "xxpermdi",
        "opcode": "111100 ..... ..... ..... 0..01 010...",
        "formatted_opcode": "111100---------------0--01010---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Doubleword Permute Immediate"
    },
    "xxmrghw": {
        "mnemonic": "xxmrghw",
        "formatted_mnemonic": "xxmrghw",
        "opcode": "111100 ..... ..... ..... 00010 010...",
        "formatted_opcode": "111100---------------00010010---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Merge Word High"
    },
    "xxperm": {
        "mnemonic": "xxperm",
        "formatted_mnemonic": "xxperm",
        "opcode": "111100 ..... ..... ..... 00011 010...",
        "formatted_opcode": "111100---------------00011010---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Permute"
    },
    "xxmrglw": {
        "mnemonic": "xxmrglw",
        "formatted_mnemonic": "xxmrglw",
        "opcode": "111100 ..... ..... ..... 00110 010...",
        "formatted_opcode": "111100---------------00110010---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Merge Word Low"
    },
    "xxpermr": {
        "mnemonic": "xxpermr",
        "formatted_mnemonic": "xxpermr",
        "opcode": "111100 ..... ..... ..... 00111 010...",
        "formatted_opcode": "111100---------------00111010---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Permute Right-indexed"
    },
    "xxspltw": {
        "mnemonic": "xxspltw",
        "formatted_mnemonic": "xxspltw",
        "opcode": "111100 ..... ///.. ..... 01010 0100..",
        "formatted_opcode": "111100---------------010100100--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Splat Word"
    },
    "xxspltib": {
        "mnemonic": "xxspltib",
        "formatted_mnemonic": "xxspltib",
        "opcode": "111100 ..... 00... ..... 01011 01000.",
        "formatted_opcode": "111100-----00--------0101101000-",
        "instruction_format": "XX1",
        "full_name": "VSX Vector Splat Immediate Byte"
    },
    "xxland": {
        "mnemonic": "xxland",
        "formatted_mnemonic": "xxland",
        "opcode": "111100 ..... ..... ..... 10000 010...",
        "formatted_opcode": "111100---------------10000010---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Logical AND"
    },
    "xxlandc": {
        "mnemonic": "xxlandc",
        "formatted_mnemonic": "xxlandc",
        "opcode": "111100 ..... ..... ..... 10001 010...",
        "formatted_opcode": "111100---------------10001010---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Logical AND with Complement"
    },
    "xxlor": {
        "mnemonic": "xxlor",
        "formatted_mnemonic": "xxlor",
        "opcode": "111100 ..... ..... ..... 10010 010...",
        "formatted_opcode": "111100---------------10010010---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Logical OR"
    },
    "xxlxor": {
        "mnemonic": "xxlxor",
        "formatted_mnemonic": "xxlxor",
        "opcode": "111100 ..... ..... ..... 10011 010...",
        "formatted_opcode": "111100---------------10011010---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Logical XOR"
    },
    "xxlnor": {
        "mnemonic": "xxlnor",
        "formatted_mnemonic": "xxlnor",
        "opcode": "111100 ..... ..... ..... 10100 010...",
        "formatted_opcode": "111100---------------10100010---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Logical NOR"
    },
    "xxlorc": {
        "mnemonic": "xxlorc",
        "formatted_mnemonic": "xxlorc",
        "opcode": "111100 ..... ..... ..... 10101 010...",
        "formatted_opcode": "111100---------------10101010---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Logical OR with Complement"
    },
    "xxlnand": {
        "mnemonic": "xxlnand",
        "formatted_mnemonic": "xxlnand",
        "opcode": "111100 ..... ..... ..... 10110 010...",
        "formatted_opcode": "111100---------------10110010---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Logical NAND"
    },
    "xxleqv": {
        "mnemonic": "xxleqv",
        "formatted_mnemonic": "xxleqv",
        "opcode": "111100 ..... ..... ..... 10111 010...",
        "formatted_opcode": "111100---------------10111010---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Logical Equivalence"
    },
    "xxextractuw": {
        "mnemonic": "xxextractuw",
        "formatted_mnemonic": "xxextractuw",
        "opcode": "111100 ..... /.... ..... 01010 0101..",
        "formatted_opcode": "111100---------------010100101--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Extract Unsigned Word"
    },
    "xxinsertw": {
        "mnemonic": "xxinsertw",
        "formatted_mnemonic": "xxinsertw",
        "opcode": "111100 ..... /.... ..... 01011 0101..",
        "formatted_opcode": "111100---------------010110101--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Insert Word"
    },
    "xscmpeqdp": {
        "mnemonic": "xscmpeqdp",
        "formatted_mnemonic": "xscmpeqdp",
        "opcode": "111100 ..... ..... ..... 00000 011...",
        "formatted_opcode": "111100---------------00000011---",
        "instruction_format": "XX3",
        "full_name": "VSX Scalar Compare Equal Double-Precision"
    },
    "xscmpgtdp": {
        "mnemonic": "xscmpgtdp",
        "formatted_mnemonic": "xscmpgtdp",
        "opcode": "111100 ..... ..... ..... 00001 011...",
        "formatted_opcode": "111100---------------00001011---",
        "instruction_format": "XX3",
        "full_name": "VSX Scalar Compare Greater Than Double-Precision"
    },
    "xscmpgedp": {
        "mnemonic": "xscmpgedp",
        "formatted_mnemonic": "xscmpgedp",
        "opcode": "111100 ..... ..... ..... 00010 011...",
        "formatted_opcode": "111100---------------00010011---",
        "instruction_format": "XX3",
        "full_name": "VSX Scalar Compare Greater Than or Equal Double-Precision"
    },
    "xscmpudp": {
        "mnemonic": "xscmpudp",
        "formatted_mnemonic": "xscmpudp",
        "opcode": "111100 ...// ..... ..... 00100 011../",
        "formatted_opcode": "111100---------------00100011---",
        "instruction_format": "XX3",
        "full_name": "VSX Scalar Compare Unordered Double-Precision"
    },
    "xscmpodp": {
        "mnemonic": "xscmpodp",
        "formatted_mnemonic": "xscmpodp",
        "opcode": "111100 ...// ..... ..... 00101 011../",
        "formatted_opcode": "111100---------------00101011---",
        "instruction_format": "XX3",
        "full_name": "VSX Scalar Compare Ordered Double-Precision"
    },
    "xscmpexpdp": {
        "mnemonic": "xscmpexpdp",
        "formatted_mnemonic": "xscmpexpdp",
        "opcode": "111100 ...// ..... ..... 00111 011../",
        "formatted_opcode": "111100---------------00111011---",
        "instruction_format": "XX3",
        "full_name": "VSX Scalar Compare Exponents Double-Precision"
    },
    "xvcmpeqsp[.]": {
        "mnemonic": "xvcmpeqsp[.]",
        "formatted_mnemonic": "xvcmpeqsp_dot",
        "opcode": "111100 ..... ..... ..... .1000 011...",
        "formatted_opcode": "111100----------------1000011---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Compare Equal Single-Precision"
    },
    "xvcmpgtsp[.]": {
        "mnemonic": "xvcmpgtsp[.]",
        "formatted_mnemonic": "xvcmpgtsp_dot",
        "opcode": "111100 ..... ..... ..... .1001 011...",
        "formatted_opcode": "111100----------------1001011---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Compare Greater Than Single-Precision"
    },
    "xvcmpgesp[.]": {
        "mnemonic": "xvcmpgesp[.]",
        "formatted_mnemonic": "xvcmpgesp_dot",
        "opcode": "111100 ..... ..... ..... .1010 011...",
        "formatted_opcode": "111100----------------1010011---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Compare Greater Than or Equal Single-Precision"
    },
    "xvcmpeqdp[.]": {
        "mnemonic": "xvcmpeqdp[.]",
        "formatted_mnemonic": "xvcmpeqdp_dot",
        "opcode": "111100 ..... ..... ..... .1100 011...",
        "formatted_opcode": "111100----------------1100011---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Compare Equal Double-Precision"
    },
    "xvcmpgtdp[.]": {
        "mnemonic": "xvcmpgtdp[.]",
        "formatted_mnemonic": "xvcmpgtdp_dot",
        "opcode": "111100 ..... ..... ..... .1101 011...",
        "formatted_opcode": "111100----------------1101011---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Compare Greater Than Double-Precision"
    },
    "xvcmpgedp[.]": {
        "mnemonic": "xvcmpgedp[.]",
        "formatted_mnemonic": "xvcmpgedp_dot",
        "opcode": "111100 ..... ..... ..... .1110 011...",
        "formatted_opcode": "111100----------------1110011---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Compare Greater Than or Equal Double-Precision"
    },
    "xscvdpuxws": {
        "mnemonic": "xscvdpuxws",
        "formatted_mnemonic": "xscvdpuxws",
        "opcode": "111100 ..... ///// ..... 00100 1000..",
        "formatted_opcode": "111100---------------001001000--",
        "instruction_format": "XX2",
        "full_name": "VSX Scalar Convert with round to zero Double-Precision to Unsigned Word format"
    },
    "xscvdpsxws": {
        "mnemonic": "xscvdpsxws",
        "formatted_mnemonic": "xscvdpsxws",
        "opcode": "111100 ..... ///// ..... 00101 1000..",
        "formatted_opcode": "111100---------------001011000--",
        "instruction_format": "XX2",
        "full_name": "VSX Scalar Convert with round to zero Double-Precision to Signed Word format"
    },
    "xvcvspuxws": {
        "mnemonic": "xvcvspuxws",
        "formatted_mnemonic": "xvcvspuxws",
        "opcode": "111100 ..... ///// ..... 01000 1000..",
        "formatted_opcode": "111100---------------010001000--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Convert with round to zero Single-Precision to Unsigned Word format"
    },
    "xvcvspsxws": {
        "mnemonic": "xvcvspsxws",
        "formatted_mnemonic": "xvcvspsxws",
        "opcode": "111100 ..... ///// ..... 01001 1000..",
        "formatted_opcode": "111100---------------010011000--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Convert with round to zero Single-Precision to Signed Word format"
    },
    "xvcvuxwsp": {
        "mnemonic": "xvcvuxwsp",
        "formatted_mnemonic": "xvcvuxwsp",
        "opcode": "111100 ..... ///// ..... 01010 1000..",
        "formatted_opcode": "111100---------------010101000--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Convert with round Unsigned Word to Single-Precision format"
    },
    "xvcvsxwsp": {
        "mnemonic": "xvcvsxwsp",
        "formatted_mnemonic": "xvcvsxwsp",
        "opcode": "111100 ..... ///// ..... 01011 1000..",
        "formatted_opcode": "111100---------------010111000--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Convert with round Signed Word to Single-Precision format"
    },
    "xvcvdpuxws": {
        "mnemonic": "xvcvdpuxws",
        "formatted_mnemonic": "xvcvdpuxws",
        "opcode": "111100 ..... ///// ..... 01100 1000..",
        "formatted_opcode": "111100---------------011001000--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Convert with round to zero Double-Precision to Unsigned Word format"
    },
    "xvcvdpsxws": {
        "mnemonic": "xvcvdpsxws",
        "formatted_mnemonic": "xvcvdpsxws",
        "opcode": "111100 ..... ///// ..... 01101 1000..",
        "formatted_opcode": "111100---------------011011000--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Convert with round to zero Double-Precision to Signed Word format"
    },
    "xvcvuxwdp": {
        "mnemonic": "xvcvuxwdp",
        "formatted_mnemonic": "xvcvuxwdp",
        "opcode": "111100 ..... ///// ..... 01110 1000..",
        "formatted_opcode": "111100---------------011101000--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Convert Unsigned Word to Double-Precision format"
    },
    "xvcvsxwdp": {
        "mnemonic": "xvcvsxwdp",
        "formatted_mnemonic": "xvcvsxwdp",
        "opcode": "111100 ..... ///// ..... 01111 1000..",
        "formatted_opcode": "111100---------------011111000--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Convert Signed Word to Double-Precision format"
    },
    "xscvuxdsp": {
        "mnemonic": "xscvuxdsp",
        "formatted_mnemonic": "xscvuxdsp",
        "opcode": "111100 ..... ///// ..... 10010 1000..",
        "formatted_opcode": "111100---------------100101000--",
        "instruction_format": "XX2",
        "full_name": "VSX Scalar Convert with round Unsigned Doubleword to Single-Precision format"
    },
    "xscvsxdsp": {
        "mnemonic": "xscvsxdsp",
        "formatted_mnemonic": "xscvsxdsp",
        "opcode": "111100 ..... ///// ..... 10011 1000..",
        "formatted_opcode": "111100---------------100111000--",
        "instruction_format": "XX2",
        "full_name": "VSX Scalar Convert with round Signed Doubleword to Single-Precision format"
    },
    "xscvdpuxds": {
        "mnemonic": "xscvdpuxds",
        "formatted_mnemonic": "xscvdpuxds",
        "opcode": "111100 ..... ///// ..... 10100 1000..",
        "formatted_opcode": "111100---------------101001000--",
        "instruction_format": "XX2",
        "full_name": "VSX Scalar Convert with round to zero Double-Precision to Unsigned Doubleword format"
    },
    "xscvdpsxds": {
        "mnemonic": "xscvdpsxds",
        "formatted_mnemonic": "xscvdpsxds",
        "opcode": "111100 ..... ///// ..... 10101 1000..",
        "formatted_opcode": "111100---------------101011000--",
        "instruction_format": "XX2",
        "full_name": "VSX Scalar Convert with round to zero Double-Precision to Signed Doubleword format"
    },
    "xscvuxddp": {
        "mnemonic": "xscvuxddp",
        "formatted_mnemonic": "xscvuxddp",
        "opcode": "111100 ..... ///// ..... 10110 1000..",
        "formatted_opcode": "111100---------------101101000--",
        "instruction_format": "XX2",
        "full_name": "VSX Scalar Convert with round Unsigned Doubleword to Double-Precision format"
    },
    "xscvsxddp": {
        "mnemonic": "xscvsxddp",
        "formatted_mnemonic": "xscvsxddp",
        "opcode": "111100 ..... ///// ..... 10111 1000..",
        "formatted_opcode": "111100---------------101111000--",
        "instruction_format": "XX2",
        "full_name": "VSX Scalar Convert with round Signed Doubleword to Double-Precision format"
    },
    "xvcvspuxds": {
        "mnemonic": "xvcvspuxds",
        "formatted_mnemonic": "xvcvspuxds",
        "opcode": "111100 ..... ///// ..... 11000 1000..",
        "formatted_opcode": "111100---------------110001000--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Convert with round to zero Single-Precision to Unsigned Doubleword format"
    },
    "xvcvspsxds": {
        "mnemonic": "xvcvspsxds",
        "formatted_mnemonic": "xvcvspsxds",
        "opcode": "111100 ..... ///// ..... 11001 1000..",
        "formatted_opcode": "111100---------------110011000--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Convert with round to zero Single-Precision to Signed Doubleword format"
    },
    "xvcvuxdsp": {
        "mnemonic": "xvcvuxdsp",
        "formatted_mnemonic": "xvcvuxdsp",
        "opcode": "111100 ..... ///// ..... 11010 1000..",
        "formatted_opcode": "111100---------------110101000--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Convert with round Unsigned Doubleword to Single-Precision format"
    },
    "xvcvsxdsp": {
        "mnemonic": "xvcvsxdsp",
        "formatted_mnemonic": "xvcvsxdsp",
        "opcode": "111100 ..... ///// ..... 11011 1000..",
        "formatted_opcode": "111100---------------110111000--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Convert with round Signed Doubleword to Single-Precision format"
    },
    "xvcvdpuxds": {
        "mnemonic": "xvcvdpuxds",
        "formatted_mnemonic": "xvcvdpuxds",
        "opcode": "111100 ..... ///// ..... 11100 1000..",
        "formatted_opcode": "111100---------------111001000--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Convert with round to zero Double-Precision to Unsigned Doubleword format"
    },
    "xvcvdpsxds": {
        "mnemonic": "xvcvdpsxds",
        "formatted_mnemonic": "xvcvdpsxds",
        "opcode": "111100 ..... ///// ..... 11101 1000..",
        "formatted_opcode": "111100---------------111011000--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Convert with round to zero Double-Precision to Signed Doubleword format"
    },
    "xvcvuxddp": {
        "mnemonic": "xvcvuxddp",
        "formatted_mnemonic": "xvcvuxddp",
        "opcode": "111100 ..... ///// ..... 11110 1000..",
        "formatted_opcode": "111100---------------111101000--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Convert with round Unsigned Doubleword to Double-Precision format"
    },
    "xvcvsxddp": {
        "mnemonic": "xvcvsxddp",
        "formatted_mnemonic": "xvcvsxddp",
        "opcode": "111100 ..... ///// ..... 11111 1000..",
        "formatted_opcode": "111100---------------111111000--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Convert with round Signed Doubleword to Double-Precision format"
    },
    "xsrdpi": {
        "mnemonic": "xsrdpi",
        "formatted_mnemonic": "xsrdpi",
        "opcode": "111100 ..... ///// ..... 00100 1001..",
        "formatted_opcode": "111100---------------001001001--",
        "instruction_format": "XX2",
        "full_name": "VSX Scalar Round Double-Precision to Integral"
    },
    "xsrdpiz": {
        "mnemonic": "xsrdpiz",
        "formatted_mnemonic": "xsrdpiz",
        "opcode": "111100 ..... ///// ..... 00101 1001..",
        "formatted_opcode": "111100---------------001011001--",
        "instruction_format": "XX2",
        "full_name": "VSX Scalar Round Double-Precision to Integral toward Zero"
    },
    "xsrdpip": {
        "mnemonic": "xsrdpip",
        "formatted_mnemonic": "xsrdpip",
        "opcode": "111100 ..... ///// ..... 00110 1001..",
        "formatted_opcode": "111100---------------001101001--",
        "instruction_format": "XX2",
        "full_name": "VSX Scalar Round Double-Precision to Integral toward +Infinity"
    },
    "xsrdpim": {
        "mnemonic": "xsrdpim",
        "formatted_mnemonic": "xsrdpim",
        "opcode": "111100 ..... ///// ..... 00111 1001..",
        "formatted_opcode": "111100---------------001111001--",
        "instruction_format": "XX2",
        "full_name": "VSX Scalar Round Double-Precision to Integral toward -Infinity"
    },
    "xvrspi": {
        "mnemonic": "xvrspi",
        "formatted_mnemonic": "xvrspi",
        "opcode": "111100 ..... ///// ..... 01000 1001..",
        "formatted_opcode": "111100---------------010001001--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Round Single-Precision to Integral"
    },
    "xvrspiz": {
        "mnemonic": "xvrspiz",
        "formatted_mnemonic": "xvrspiz",
        "opcode": "111100 ..... ///// ..... 01001 1001..",
        "formatted_opcode": "111100---------------010011001--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Round Single-Precision to Integral toward Zero"
    },
    "xvrspip": {
        "mnemonic": "xvrspip",
        "formatted_mnemonic": "xvrspip",
        "opcode": "111100 ..... ///// ..... 01010 1001..",
        "formatted_opcode": "111100---------------010101001--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Round Single-Precision to Integral toward +Infinity"
    },
    "xvrspim": {
        "mnemonic": "xvrspim",
        "formatted_mnemonic": "xvrspim",
        "opcode": "111100 ..... ///// ..... 01011 1001..",
        "formatted_opcode": "111100---------------010111001--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Round Single-Precision to Integral toward -Infinity"
    },
    "xvrdpi": {
        "mnemonic": "xvrdpi",
        "formatted_mnemonic": "xvrdpi",
        "opcode": "111100 ..... ///// ..... 01100 1001..",
        "formatted_opcode": "111100---------------011001001--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Round Double-Precision to Integral"
    },
    "xvrdpiz": {
        "mnemonic": "xvrdpiz",
        "formatted_mnemonic": "xvrdpiz",
        "opcode": "111100 ..... ///// ..... 01101 1001..",
        "formatted_opcode": "111100---------------011011001--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Round Double-Precision to Integral toward Zero"
    },
    "xvrdpip": {
        "mnemonic": "xvrdpip",
        "formatted_mnemonic": "xvrdpip",
        "opcode": "111100 ..... ///// ..... 01110 1001..",
        "formatted_opcode": "111100---------------011101001--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Round Double-Precision to Integral toward +Infinity"
    },
    "xvrdpim": {
        "mnemonic": "xvrdpim",
        "formatted_mnemonic": "xvrdpim",
        "opcode": "111100 ..... ///// ..... 01111 1001..",
        "formatted_opcode": "111100---------------011111001--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Round Double-Precision to Integral toward -Infinity"
    },
    "xscvdpsp": {
        "mnemonic": "xscvdpsp",
        "formatted_mnemonic": "xscvdpsp",
        "opcode": "111100 ..... ///// ..... 10000 1001..",
        "formatted_opcode": "111100---------------100001001--",
        "instruction_format": "XX2",
        "full_name": "VSX Scalar Convert with round Double-Precision to Single-Precision format"
    },
    "xsrsp": {
        "mnemonic": "xsrsp",
        "formatted_mnemonic": "xsrsp",
        "opcode": "111100 ..... ///// ..... 10001 1001..",
        "formatted_opcode": "111100---------------100011001--",
        "instruction_format": "XX2",
        "full_name": "VSX Scalar Round Double-Precision to Single-Precision"
    },
    "xscvspdp": {
        "mnemonic": "xscvspdp",
        "formatted_mnemonic": "xscvspdp",
        "opcode": "111100 ..... ///// ..... 10100 1001..",
        "formatted_opcode": "111100---------------101001001--",
        "instruction_format": "XX2",
        "full_name": "VSX Scalar Convert Single-Precision to Double-Precision format"
    },
    "xsabsdp": {
        "mnemonic": "xsabsdp",
        "formatted_mnemonic": "xsabsdp",
        "opcode": "111100 ..... ///// ..... 10101 1001..",
        "formatted_opcode": "111100---------------101011001--",
        "instruction_format": "XX2",
        "full_name": "VSX Scalar Absolute Double-Precision"
    },
    "xsnabsdp": {
        "mnemonic": "xsnabsdp",
        "formatted_mnemonic": "xsnabsdp",
        "opcode": "111100 ..... ///// ..... 10110 1001..",
        "formatted_opcode": "111100---------------101101001--",
        "instruction_format": "XX2",
        "full_name": "VSX Scalar Negative Absolute Double-Precision"
    },
    "xsnegdp": {
        "mnemonic": "xsnegdp",
        "formatted_mnemonic": "xsnegdp",
        "opcode": "111100 ..... ///// ..... 10111 1001..",
        "formatted_opcode": "111100---------------101111001--",
        "instruction_format": "XX2",
        "full_name": "VSX Scalar Negate Double-Precision"
    },
    "xvcvdpsp": {
        "mnemonic": "xvcvdpsp",
        "formatted_mnemonic": "xvcvdpsp",
        "opcode": "111100 ..... ///// ..... 11000 1001..",
        "formatted_opcode": "111100---------------110001001--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Convert with round Double-Precision to Single-Precision format"
    },
    "xvabssp": {
        "mnemonic": "xvabssp",
        "formatted_mnemonic": "xvabssp",
        "opcode": "111100 ..... ///// ..... 11001 1001..",
        "formatted_opcode": "111100---------------110011001--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Absolute Single-Precision"
    },
    "xvnabssp": {
        "mnemonic": "xvnabssp",
        "formatted_mnemonic": "xvnabssp",
        "opcode": "111100 ..... ///// ..... 11010 1001..",
        "formatted_opcode": "111100---------------110101001--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Negative Absolute Single-Precision"
    },
    "xvnegsp": {
        "mnemonic": "xvnegsp",
        "formatted_mnemonic": "xvnegsp",
        "opcode": "111100 ..... ///// ..... 11011 1001..",
        "formatted_opcode": "111100---------------110111001--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Negate Single-Precision"
    },
    "xvcvspdp": {
        "mnemonic": "xvcvspdp",
        "formatted_mnemonic": "xvcvspdp",
        "opcode": "111100 ..... ///// ..... 11100 1001..",
        "formatted_opcode": "111100---------------111001001--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Convert Single-Precision to Double-Precision format"
    },
    "xvabsdp": {
        "mnemonic": "xvabsdp",
        "formatted_mnemonic": "xvabsdp",
        "opcode": "111100 ..... ///// ..... 11101 1001..",
        "formatted_opcode": "111100---------------111011001--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Absolute Double-Precision"
    },
    "xvnabsdp": {
        "mnemonic": "xvnabsdp",
        "formatted_mnemonic": "xvnabsdp",
        "opcode": "111100 ..... ///// ..... 11110 1001..",
        "formatted_opcode": "111100---------------111101001--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Negative Absolute Double-Precision"
    },
    "xvnegdp": {
        "mnemonic": "xvnegdp",
        "formatted_mnemonic": "xvnegdp",
        "opcode": "111100 ..... ///// ..... 11111 1001..",
        "formatted_opcode": "111100---------------111111001--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Negate Double-Precision"
    },
    "xsrsqrtesp": {
        "mnemonic": "xsrsqrtesp",
        "formatted_mnemonic": "xsrsqrtesp",
        "opcode": "111100 ..... ///// ..... 00000 1010..",
        "formatted_opcode": "111100---------------000001010--",
        "instruction_format": "XX2",
        "full_name": "VSX Scalar Reciprocal Square Root Estimate Single-Precision"
    },
    "xsresp": {
        "mnemonic": "xsresp",
        "formatted_mnemonic": "xsresp",
        "opcode": "111100 ..... ///// ..... 00001 1010..",
        "formatted_opcode": "111100---------------000011010--",
        "instruction_format": "XX2",
        "full_name": "VSX Scalar Reciprocal Estimate Single-Precision"
    },
    "xsrsqrtedp": {
        "mnemonic": "xsrsqrtedp",
        "formatted_mnemonic": "xsrsqrtedp",
        "opcode": "111100 ..... ///// ..... 00100 1010..",
        "formatted_opcode": "111100---------------001001010--",
        "instruction_format": "XX2",
        "full_name": "VSX Scalar Reciprocal Square Root Estimate Double-Precision"
    },
    "xsredp": {
        "mnemonic": "xsredp",
        "formatted_mnemonic": "xsredp",
        "opcode": "111100 ..... ///// ..... 00101 1010..",
        "formatted_opcode": "111100---------------001011010--",
        "instruction_format": "XX2",
        "full_name": "VSX Scalar Reciprocal Estimate Double-Precision"
    },
    "xstsqrtdp": {
        "mnemonic": "xstsqrtdp",
        "formatted_mnemonic": "xstsqrtdp",
        "opcode": "111100 ...// ///// ..... 00110 1010./",
        "formatted_opcode": "111100---------------001101010--",
        "instruction_format": "XX2",
        "full_name": "VSX Scalar Test for software Square Root Double-Precision"
    },
    "xstdivdp": {
        "mnemonic": "xstdivdp",
        "formatted_mnemonic": "xstdivdp",
        "opcode": "111100 ...// ..... ..... 00111 101../",
        "formatted_opcode": "111100---------------00111101---",
        "instruction_format": "XX3",
        "full_name": "VSX Scalar Test for software Divide Double-Precision"
    },
    "xvrsqrtesp": {
        "mnemonic": "xvrsqrtesp",
        "formatted_mnemonic": "xvrsqrtesp",
        "opcode": "111100 ..... ///// ..... 01000 1010..",
        "formatted_opcode": "111100---------------010001010--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Reciprocal Square Root Estimate Single-Precision"
    },
    "xvresp": {
        "mnemonic": "xvresp",
        "formatted_mnemonic": "xvresp",
        "opcode": "111100 ..... ///// ..... 01001 1010..",
        "formatted_opcode": "111100---------------010011010--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Reciprocal Estimate Single-Precision"
    },
    "xvtsqrtsp": {
        "mnemonic": "xvtsqrtsp",
        "formatted_mnemonic": "xvtsqrtsp",
        "opcode": "111100 ...// ///// ..... 01010 1010./",
        "formatted_opcode": "111100---------------010101010--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Test for software Square Root Single-Precision"
    },
    "xvtdivsp": {
        "mnemonic": "xvtdivsp",
        "formatted_mnemonic": "xvtdivsp",
        "opcode": "111100 ...// ..... ..... 01011 101../",
        "formatted_opcode": "111100---------------01011101---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Test for software Divide Single-Precision"
    },
    "xvrsqrtedp": {
        "mnemonic": "xvrsqrtedp",
        "formatted_mnemonic": "xvrsqrtedp",
        "opcode": "111100 ..... ///// ..... 01100 1010..",
        "formatted_opcode": "111100---------------011001010--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Reciprocal Square Root Estimate Double-Precision"
    },
    "xvredp": {
        "mnemonic": "xvredp",
        "formatted_mnemonic": "xvredp",
        "opcode": "111100 ..... ///// ..... 01101 1010..",
        "formatted_opcode": "111100---------------011011010--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Reciprocal Estimate Double-Precision"
    },
    "xvtsqrtdp": {
        "mnemonic": "xvtsqrtdp",
        "formatted_mnemonic": "xvtsqrtdp",
        "opcode": "111100 ...// ///// ..... 01110 1010./",
        "formatted_opcode": "111100---------------011101010--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Test for software Square Root Double-Precision"
    },
    "xvtdivdp": {
        "mnemonic": "xvtdivdp",
        "formatted_mnemonic": "xvtdivdp",
        "opcode": "111100 ...// ..... ..... 01111 101../",
        "formatted_opcode": "111100---------------01111101---",
        "instruction_format": "XX3",
        "full_name": "VSX Vector Test for software Divide Double-Precision"
    },
    "xststdcsp": {
        "mnemonic": "xststdcsp",
        "formatted_mnemonic": "xststdcsp",
        "opcode": "111100 ..... ..... ..... 10010 1010./",
        "formatted_opcode": "111100---------------100101010--",
        "instruction_format": "XX2",
        "full_name": "VSX Scalar Test Data Class Single-Precision"
    },
    "xststdcdp": {
        "mnemonic": "xststdcdp",
        "formatted_mnemonic": "xststdcdp",
        "opcode": "111100 ..... ..... ..... 10110 1010./",
        "formatted_opcode": "111100---------------101101010--",
        "instruction_format": "XX2",
        "full_name": "VSX Scalar Test Data Class Double-Precision"
    },
    "xvtstdcsp": {
        "mnemonic": "xvtstdcsp",
        "formatted_mnemonic": "xvtstdcsp",
        "opcode": "111100 ..... ..... ..... 1101. 101...",
        "formatted_opcode": "111100---------------1101-101---",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Test Data Class Single-Precision"
    },
    "xvtstdcdp": {
        "mnemonic": "xvtstdcdp",
        "formatted_mnemonic": "xvtstdcdp",
        "opcode": "111100 ..... ..... ..... 1111. 101...",
        "formatted_opcode": "111100---------------1111-101---",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Test Data Class Double-Precision"
    },
    "xssqrtsp": {
        "mnemonic": "xssqrtsp",
        "formatted_mnemonic": "xssqrtsp",
        "opcode": "111100 ..... ///// ..... 00000 1011..",
        "formatted_opcode": "111100---------------000001011--",
        "instruction_format": "XX2",
        "full_name": "VSX Scalar Square Root Single-Precision"
    },
    "xssqrtdp": {
        "mnemonic": "xssqrtdp",
        "formatted_mnemonic": "xssqrtdp",
        "opcode": "111100 ..... ///// ..... 00100 1011..",
        "formatted_opcode": "111100---------------001001011--",
        "instruction_format": "XX2",
        "full_name": "VSX Scalar Square Root Double-Precision"
    },
    "xsrdpic": {
        "mnemonic": "xsrdpic",
        "formatted_mnemonic": "xsrdpic",
        "opcode": "111100 ..... ///// ..... 00110 1011..",
        "formatted_opcode": "111100---------------001101011--",
        "instruction_format": "XX2",
        "full_name": "VSX Scalar Round Double-Precision to Integral using Current rounding mode"
    },
    "xvsqrtsp": {
        "mnemonic": "xvsqrtsp",
        "formatted_mnemonic": "xvsqrtsp",
        "opcode": "111100 ..... ///// ..... 01000 1011..",
        "formatted_opcode": "111100---------------010001011--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Square Root Single-Precision"
    },
    "xvrspic": {
        "mnemonic": "xvrspic",
        "formatted_mnemonic": "xvrspic",
        "opcode": "111100 ..... ///// ..... 01010 1011..",
        "formatted_opcode": "111100---------------010101011--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Round Single-Precision to Integral using Current rounding mode"
    },
    "xvsqrtdp": {
        "mnemonic": "xvsqrtdp",
        "formatted_mnemonic": "xvsqrtdp",
        "opcode": "111100 ..... ///// ..... 01100 1011..",
        "formatted_opcode": "111100---------------011001011--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Square Root Double-Precision"
    },
    "xvrdpic": {
        "mnemonic": "xvrdpic",
        "formatted_mnemonic": "xvrdpic",
        "opcode": "111100 ..... ///// ..... 01110 1011..",
        "formatted_opcode": "111100---------------011101011--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Round Double-Precision to Integral using Current rounding mode"
    },
    "xscvdpspn": {
        "mnemonic": "xscvdpspn",
        "formatted_mnemonic": "xscvdpspn",
        "opcode": "111100 ..... ///// ..... 10000 1011..",
        "formatted_opcode": "111100---------------100001011--",
        "instruction_format": "XX2",
        "full_name": "VSX Scalar Convert Double-Precision to Single-Precision Non-signalling format"
    },
    "xscvspdpn": {
        "mnemonic": "xscvspdpn",
        "formatted_mnemonic": "xscvspdpn",
        "opcode": "111100 ..... ///// ..... 10100 1011..",
        "formatted_opcode": "111100---------------101001011--",
        "instruction_format": "XX2",
        "full_name": "VSX Scalar Convert Single-Precision to Double-Precision Non-signalling format"
    },
    "xsxexpdp": {
        "mnemonic": "xsxexpdp",
        "formatted_mnemonic": "xsxexpdp",
        "opcode": "111100 ..... 00000 ..... 10101 1011./",
        "formatted_opcode": "111100-----00000-----101011011--",
        "instruction_format": "XX2",
        "full_name": "VSX Scalar Extract Exponent Double-Precision"
    },
    "xsxsigdp": {
        "mnemonic": "xsxsigdp",
        "formatted_mnemonic": "xsxsigdp",
        "opcode": "111100 ..... 00001 ..... 10101 1011./",
        "formatted_opcode": "111100-----00001-----101011011--",
        "instruction_format": "XX2",
        "full_name": "VSX Scalar Extract Significand Double-Precision"
    },
    "xscvhpdp": {
        "mnemonic": "xscvhpdp",
        "formatted_mnemonic": "xscvhpdp",
        "opcode": "111100 ..... 10000 ..... 10101 1011..",
        "formatted_opcode": "111100-----10000-----101011011--",
        "instruction_format": "XX2",
        "full_name": "VSX Scalar Convert Half-Precision to Double-Precision format"
    },
    "xscvdphp": {
        "mnemonic": "xscvdphp",
        "formatted_mnemonic": "xscvdphp",
        "opcode": "111100 ..... 10001 ..... 10101 1011..",
        "formatted_opcode": "111100-----10001-----101011011--",
        "instruction_format": "XX2",
        "full_name": "VSX Scalar Convert with round Double-Precision to Half-Precision format"
    },
    "xsiexpdp": {
        "mnemonic": "xsiexpdp",
        "formatted_mnemonic": "xsiexpdp",
        "opcode": "111100 ..... ..... ..... 11100 10110.",
        "formatted_opcode": "111100---------------1110010110-",
        "instruction_format": "XX1",
        "full_name": "VSX Scalar Insert Exponent Double-Precision"
    },
    "xvxexpdp": {
        "mnemonic": "xvxexpdp",
        "formatted_mnemonic": "xvxexpdp",
        "opcode": "111100 ..... 00000 ..... 11101 1011..",
        "formatted_opcode": "111100-----00000-----111011011--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Extract Exponent Double-Precision"
    },
    "xvxsigdp": {
        "mnemonic": "xvxsigdp",
        "formatted_mnemonic": "xvxsigdp",
        "opcode": "111100 ..... 00001 ..... 11101 1011..",
        "formatted_opcode": "111100-----00001-----111011011--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Extract Significand Double-Precision"
    },
    "xxbrh": {
        "mnemonic": "xxbrh",
        "formatted_mnemonic": "xxbrh",
        "opcode": "111100 ..... 00111 ..... 11101 1011..",
        "formatted_opcode": "111100-----00111-----111011011--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Byte-Reverse Halfword"
    },
    "xvxexpsp": {
        "mnemonic": "xvxexpsp",
        "formatted_mnemonic": "xvxexpsp",
        "opcode": "111100 ..... 01000 ..... 11101 1011..",
        "formatted_opcode": "111100-----01000-----111011011--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Extract Exponent Single-Precision"
    },
    "xvxsigsp": {
        "mnemonic": "xvxsigsp",
        "formatted_mnemonic": "xvxsigsp",
        "opcode": "111100 ..... 01001 ..... 11101 1011..",
        "formatted_opcode": "111100-----01001-----111011011--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Extract Significand Single-Precision"
    },
    "xxbrw": {
        "mnemonic": "xxbrw",
        "formatted_mnemonic": "xxbrw",
        "opcode": "111100 ..... 01111 ..... 11101 1011..",
        "formatted_opcode": "111100-----01111-----111011011--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Byte-Reverse Word"
    },
    "xxbrd": {
        "mnemonic": "xxbrd",
        "formatted_mnemonic": "xxbrd",
        "opcode": "111100 ..... 10111 ..... 11101 1011..",
        "formatted_opcode": "111100-----10111-----111011011--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Byte-Reverse Doubleword"
    },
    "xvcvhpsp": {
        "mnemonic": "xvcvhpsp",
        "formatted_mnemonic": "xvcvhpsp",
        "opcode": "111100 ..... 11000 ..... 11101 1011..",
        "formatted_opcode": "111100-----11000-----111011011--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Convert Half-Precision to Single-Precision format"
    },
    "xvcvsphp": {
        "mnemonic": "xvcvsphp",
        "formatted_mnemonic": "xvcvsphp",
        "opcode": "111100 ..... 11001 ..... 11101 1011..",
        "formatted_opcode": "111100-----11001-----111011011--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Convert with round Single-Precision to Half-Precision format"
    },
    "xxbrq": {
        "mnemonic": "xxbrq",
        "formatted_mnemonic": "xxbrq",
        "opcode": "111100 ..... 11111 ..... 11101 1011..",
        "formatted_opcode": "111100-----11111-----111011011--",
        "instruction_format": "XX2",
        "full_name": "VSX Vector Byte-Reverse Quadword"
    },
    "xxsel": {
        "mnemonic": "xxsel",
        "formatted_mnemonic": "xxsel",
        "opcode": "111100 ..... ..... ..... ..... 11....",
        "formatted_opcode": "111100--------------------11----",
        "instruction_format": "XX4",
        "full_name": "VSX Vector Select"
    },
    "stfdp": {
        "mnemonic": "stfdp",
        "formatted_mnemonic": "stfdp",
        "opcode": "111101 ..... ..... ..... ..... ....00",
        "formatted_opcode": "111101------------------------00",
        "instruction_format": "DS",
        "full_name": "Store Floating Double Pair"
    },
    "lxv": {
        "mnemonic": "lxv",
        "formatted_mnemonic": "lxv",
        "opcode": "111101 ..... ..... ..... ..... ...001",
        "formatted_opcode": "111101-----------------------001",
        "instruction_format": "DQ",
        "full_name": "Load VSX Vector"
    },
    "stxsd": {
        "mnemonic": "stxsd",
        "formatted_mnemonic": "stxsd",
        "opcode": "111101 ..... ..... ..... ..... ....10",
        "formatted_opcode": "111101------------------------10",
        "instruction_format": "DS",
        "full_name": "Store VSX Scalar Doubleword"
    },
    "stxssp": {
        "mnemonic": "stxssp",
        "formatted_mnemonic": "stxssp",
        "opcode": "111101 ..... ..... ..... ..... ....11",
        "formatted_opcode": "111101------------------------11",
        "instruction_format": "DS",
        "full_name": "Store VSX Scalar Single-Precision"
    },
    "stxv": {
        "mnemonic": "stxv",
        "formatted_mnemonic": "stxv",
        "opcode": "111101 ..... ..... ..... ..... ...101",
        "formatted_opcode": "111101-----------------------101",
        "instruction_format": "DQ",
        "full_name": "Store VSX Vector"
    },
    "std": {
        "mnemonic": "std",
        "formatted_mnemonic": "std",
        "opcode": "111110 ..... ..... ..... ..... ....00",
        "formatted_opcode": "111110------------------------00",
        "instruction_format": "DS",
        "full_name": "Store Doubleword"
    },
    "stdu": {
        "mnemonic": "stdu",
        "formatted_mnemonic": "stdu",
        "opcode": "111110 ..... ..... ..... ..... ....01",
        "formatted_opcode": "111110------------------------01",
        "instruction_format": "DS",
        "full_name": "Store Doubleword with Update"
    },
    "stq": {
        "mnemonic": "stq",
        "formatted_mnemonic": "stq",
        "opcode": "111110 ..... ..... ..... ..... ....10",
        "formatted_opcode": "111110------------------------10",
        "instruction_format": "DS",
        "full_name": "Store Quadword"
    },
    "fcmpu": {
        "mnemonic": "fcmpu",
        "formatted_mnemonic": "fcmpu",
        "opcode": "111111 ...// ..... ..... 00000 00000/",
        "formatted_opcode": "111111---------------0000000000-",
        "instruction_format": "X",
        "full_name": "Floating Compare Unordered"
    },
    "fcmpo": {
        "mnemonic": "fcmpo",
        "formatted_mnemonic": "fcmpo",
        "opcode": "111111 ...// ..... ..... 00001 00000/",
        "formatted_opcode": "111111---------------0000100000-",
        "instruction_format": "X",
        "full_name": "Floating Compare Ordered"
    },
    "mcrfs": {
        "mnemonic": "mcrfs",
        "formatted_mnemonic": "mcrfs",
        "opcode": "111111 ...// ...// ///// 00010 00000/",
        "formatted_opcode": "111111---------------0001000000-",
        "instruction_format": "X",
        "full_name": "Move To CR from FPSCR"
    },
    "ftdiv": {
        "mnemonic": "ftdiv",
        "formatted_mnemonic": "ftdiv",
        "opcode": "111111 ...// ..... ..... 00100 00000/",
        "formatted_opcode": "111111---------------0010000000-",
        "instruction_format": "X",
        "full_name": "Floating Test for software Divide"
    },
    "ftsqrt": {
        "mnemonic": "ftsqrt",
        "formatted_mnemonic": "ftsqrt",
        "opcode": "111111 ...// ///// ..... 00101 00000/",
        "formatted_opcode": "111111---------------0010100000-",
        "instruction_format": "X",
        "full_name": "Floating Test for software Square Root"
    },
    "daddq[.]": {
        "mnemonic": "daddq[.]",
        "formatted_mnemonic": "daddq_dot",
        "opcode": "111111 ..... ..... ..... 00000 00010.",
        "formatted_opcode": "111111---------------0000000010-",
        "instruction_format": "X",
        "full_name": "DFP Add Quad"
    },
    "dmulq[.]": {
        "mnemonic": "dmulq[.]",
        "formatted_mnemonic": "dmulq_dot",
        "opcode": "111111 ..... ..... ..... 00001 00010.",
        "formatted_opcode": "111111---------------0000100010-",
        "instruction_format": "X",
        "full_name": "DFP Multiply Quad"
    },
    "dscliq[.]": {
        "mnemonic": "dscliq[.]",
        "formatted_mnemonic": "dscliq_dot",
        "opcode": "111111 ..... ..... ..... .0010 00010.",
        "formatted_opcode": "111111----------------001000010-",
        "instruction_format": "Z22",
        "full_name": "DFP Shift Significand Left Immediate Quad"
    },
    "dscriq[.]": {
        "mnemonic": "dscriq[.]",
        "formatted_mnemonic": "dscriq_dot",
        "opcode": "111111 ..... ..... ..... .0011 00010.",
        "formatted_opcode": "111111----------------001100010-",
        "instruction_format": "Z22",
        "full_name": "DFP Shift Significand Right Immediate Quad"
    },
    "dcmpoq": {
        "mnemonic": "dcmpoq",
        "formatted_mnemonic": "dcmpoq",
        "opcode": "111111 ...// ..... ..... 00100 00010/",
        "formatted_opcode": "111111---------------0010000010-",
        "instruction_format": "X",
        "full_name": "DFP Compare Ordered Quad"
    },
    "dtstexq": {
        "mnemonic": "dtstexq",
        "formatted_mnemonic": "dtstexq",
        "opcode": "111111 ...// ..... ..... 00101 00010/",
        "formatted_opcode": "111111---------------0010100010-",
        "instruction_format": "X",
        "full_name": "DFP Test Exponent Quad"
    },
    "dtstdcq": {
        "mnemonic": "dtstdcq",
        "formatted_mnemonic": "dtstdcq",
        "opcode": "111111 ...// ..... ..... .0110 00010/",
        "formatted_opcode": "111111----------------011000010-",
        "instruction_format": "Z22",
        "full_name": "DFP Test Data Class Quad"
    },
    "dtstdgq": {
        "mnemonic": "dtstdgq",
        "formatted_mnemonic": "dtstdgq",
        "opcode": "111111 ...// ..... ..... .0111 00010/",
        "formatted_opcode": "111111----------------011100010-",
        "instruction_format": "Z22",
        "full_name": "DFP Test Data Group Quad"
    },
    "dctqpq[.]": {
        "mnemonic": "dctqpq[.]",
        "formatted_mnemonic": "dctqpq_dot",
        "opcode": "111111 ..... ///// ..... 01000 00010.",
        "formatted_opcode": "111111---------------0100000010-",
        "instruction_format": "X",
        "full_name": "DFP Convert To DFP Extended"
    },
    "dctfixq[.]": {
        "mnemonic": "dctfixq[.]",
        "formatted_mnemonic": "dctfixq_dot",
        "opcode": "111111 ..... ///// ..... 01001 00010.",
        "formatted_opcode": "111111---------------0100100010-",
        "instruction_format": "X",
        "full_name": "DFP Convert To Fixed Quad"
    },
    "ddedpdq[.]": {
        "mnemonic": "ddedpdq[.]",
        "formatted_mnemonic": "ddedpdq_dot",
        "opcode": "111111 ..... ../// ..... 01010 00010.",
        "formatted_opcode": "111111---------------0101000010-",
        "instruction_format": "X",
        "full_name": "DFP Decode DPD To BCD Quad"
    },
    "dxexq[.]": {
        "mnemonic": "dxexq[.]",
        "formatted_mnemonic": "dxexq_dot",
        "opcode": "111111 ..... ///// ..... 01011 00010.",
        "formatted_opcode": "111111---------------0101100010-",
        "instruction_format": "X",
        "full_name": "DFP Extract Exponent Quad"
    },
    "dsubq[.]": {
        "mnemonic": "dsubq[.]",
        "formatted_mnemonic": "dsubq_dot",
        "opcode": "111111 ..... ..... ..... 10000 00010.",
        "formatted_opcode": "111111---------------1000000010-",
        "instruction_format": "X",
        "full_name": "DFP Subtract Quad"
    },
    "ddivq[.]": {
        "mnemonic": "ddivq[.]",
        "formatted_mnemonic": "ddivq_dot",
        "opcode": "111111 ..... ..... ..... 10001 00010.",
        "formatted_opcode": "111111---------------1000100010-",
        "instruction_format": "X",
        "full_name": "DFP Divide Quad"
    },
    "dcmpuq": {
        "mnemonic": "dcmpuq",
        "formatted_mnemonic": "dcmpuq",
        "opcode": "111111 ...// ..... ..... 10100 00010/",
        "formatted_opcode": "111111---------------1010000010-",
        "instruction_format": "X",
        "full_name": "DFP Compare Unordered Quad"
    },
    "dtstsfq": {
        "mnemonic": "dtstsfq",
        "formatted_mnemonic": "dtstsfq",
        "opcode": "111111 ...// ..... ..... 10101 00010/",
        "formatted_opcode": "111111---------------1010100010-",
        "instruction_format": "X",
        "full_name": "DFP Test Significance Quad"
    },
    "drdpq[.]": {
        "mnemonic": "drdpq[.]",
        "formatted_mnemonic": "drdpq_dot",
        "opcode": "111111 ..... ///// ..... 11000 00010.",
        "formatted_opcode": "111111---------------1100000010-",
        "instruction_format": "X",
        "full_name": "DFP Round To DFP Long"
    },
    "dcffixq[.]": {
        "mnemonic": "dcffixq[.]",
        "formatted_mnemonic": "dcffixq_dot",
        "opcode": "111111 ..... ///// ..... 11001 00010.",
        "formatted_opcode": "111111---------------1100100010-",
        "instruction_format": "X",
        "full_name": "DFP Convert From Fixed Quad"
    },
    "denbcdq[.]": {
        "mnemonic": "denbcdq[.]",
        "formatted_mnemonic": "denbcdq_dot",
        "opcode": "111111 ..... .//// ..... 11010 00010.",
        "formatted_opcode": "111111---------------1101000010-",
        "instruction_format": "X",
        "full_name": "DFP Encode BCD To DPD Quad"
    },
    "diexq[.]": {
        "mnemonic": "diexq[.]",
        "formatted_mnemonic": "diexq_dot",
        "opcode": "111111 ..... ..... ..... 11011 00010.",
        "formatted_opcode": "111111---------------1101100010-",
        "instruction_format": "X",
        "full_name": "DFP Insert Exponent Quad"
    },
    "dquaq[.]": {
        "mnemonic": "dquaq[.]",
        "formatted_mnemonic": "dquaq_dot",
        "opcode": "111111 ..... ..... ..... ..000 00011.",
        "formatted_opcode": "111111-----------------00000011-",
        "instruction_format": "Z23",
        "full_name": "DFP Quantize Quad"
    },
    "drrndq[.]": {
        "mnemonic": "drrndq[.]",
        "formatted_mnemonic": "drrndq_dot",
        "opcode": "111111 ..... ..... ..... ..001 00011.",
        "formatted_opcode": "111111-----------------00100011-",
        "instruction_format": "Z23",
        "full_name": "DFP Reround Quad"
    },
    "dquaiq[.]": {
        "mnemonic": "dquaiq[.]",
        "formatted_mnemonic": "dquaiq_dot",
        "opcode": "111111 ..... ..... ..... ..010 00011.",
        "formatted_opcode": "111111-----------------01000011-",
        "instruction_format": "Z23",
        "full_name": "DFP Quantize Immediate Quad"
    },
    "drintxq[.]": {
        "mnemonic": "drintxq[.]",
        "formatted_mnemonic": "drintxq_dot",
        "opcode": "111111 ..... ////. ..... ..011 00011.",
        "formatted_opcode": "111111-----------------01100011-",
        "instruction_format": "Z23",
        "full_name": "DFP Round To FP Integer With Inexact Quad"
    },
    "drintnq[.]": {
        "mnemonic": "drintnq[.]",
        "formatted_mnemonic": "drintnq_dot",
        "opcode": "111111 ..... ////. ..... ..111 00011.",
        "formatted_opcode": "111111-----------------11100011-",
        "instruction_format": "Z23",
        "full_name": "DFP Round To FP Integer Without Inexact Quad"
    },
    "dtstsfiq": {
        "mnemonic": "dtstsfiq",
        "formatted_mnemonic": "dtstsfiq",
        "opcode": "111111 ...// ..... ..... 10101 00011/",
        "formatted_opcode": "111111---------------1010100011-",
        "instruction_format": "X",
        "full_name": "DFP Test Significance Immediate Quad"
    },
    "xsaddqp[o]": {
        "mnemonic": "xsaddqp[o]",
        "formatted_mnemonic": "xsaddqp_o",
        "opcode": "111111 ..... ..... ..... 00000 00100.",
        "formatted_opcode": "111111---------------0000000100-",
        "instruction_format": "X",
        "full_name": "VSX Scalar Add Quad-Precision [with round to Odd]"
    },
    "xsmulqp[o]": {
        "mnemonic": "xsmulqp[o]",
        "formatted_mnemonic": "xsmulqp_o",
        "opcode": "111111 ..... ..... ..... 00001 00100.",
        "formatted_opcode": "111111---------------0000100100-",
        "instruction_format": "X",
        "full_name": "VSX Scalar Multiply Quad-Precision [with round to Odd]"
    },
    "xscpsgnqp": {
        "mnemonic": "xscpsgnqp",
        "formatted_mnemonic": "xscpsgnqp",
        "opcode": "111111 ..... ..... ..... 00011 00100/",
        "formatted_opcode": "111111---------------0001100100-",
        "instruction_format": "X",
        "full_name": "VSX Scalar Copy Sign Quad-Precision"
    },
    "xscmpoqp": {
        "mnemonic": "xscmpoqp",
        "formatted_mnemonic": "xscmpoqp",
        "opcode": "111111 ...// ..... ..... 00100 00100/",
        "formatted_opcode": "111111---------------0010000100-",
        "instruction_format": "X",
        "full_name": "VSX Scalar Compare Ordered Quad-Precision"
    },
    "xscmpexpqp": {
        "mnemonic": "xscmpexpqp",
        "formatted_mnemonic": "xscmpexpqp",
        "opcode": "111111 ...// ..... ..... 00101 00100/",
        "formatted_opcode": "111111---------------0010100100-",
        "instruction_format": "X",
        "full_name": "VSX Scalar Compare Exponents Quad-Precision"
    },
    "xsmaddqp[o]": {
        "mnemonic": "xsmaddqp[o]",
        "formatted_mnemonic": "xsmaddqp_o",
        "opcode": "111111 ..... ..... ..... 01100 00100.",
        "formatted_opcode": "111111---------------0110000100-",
        "instruction_format": "X",
        "full_name": "VSX Scalar Multiply-Add Quad-Precision [with round to Odd]"
    },
    "xsmsubqp[o]": {
        "mnemonic": "xsmsubqp[o]",
        "formatted_mnemonic": "xsmsubqp_o",
        "opcode": "111111 ..... ..... ..... 01101 00100.",
        "formatted_opcode": "111111---------------0110100100-",
        "instruction_format": "X",
        "full_name": "VSX Scalar Multiply-Subtract Quad-Precision [with round to Odd]"
    },
    "xsnmaddqp[o]": {
        "mnemonic": "xsnmaddqp[o]",
        "formatted_mnemonic": "xsnmaddqp_o",
        "opcode": "111111 ..... ..... ..... 01110 00100.",
        "formatted_opcode": "111111---------------0111000100-",
        "instruction_format": "X",
        "full_name": "VSX Scalar Negative Multiply-Add Quad-Precision [with round to Odd]"
    },
    "xsnmsubqp[o]": {
        "mnemonic": "xsnmsubqp[o]",
        "formatted_mnemonic": "xsnmsubqp_o",
        "opcode": "111111 ..... ..... ..... 01111 00100.",
        "formatted_opcode": "111111---------------0111100100-",
        "instruction_format": "X",
        "full_name": "VSX Scalar Negative Multiply-Subtract Quad-Precision [with round to Odd]"
    },
    "xssubqp[o]": {
        "mnemonic": "xssubqp[o]",
        "formatted_mnemonic": "xssubqp_o",
        "opcode": "111111 ..... ..... ..... 10000 00100.",
        "formatted_opcode": "111111---------------1000000100-",
        "instruction_format": "X",
        "full_name": "VSX Scalar Subtract Quad-Precision [with round to Odd]"
    },
    "xsdivqp[o]": {
        "mnemonic": "xsdivqp[o]",
        "formatted_mnemonic": "xsdivqp_o",
        "opcode": "111111 ..... ..... ..... 10001 00100.",
        "formatted_opcode": "111111---------------1000100100-",
        "instruction_format": "X",
        "full_name": "VSX Scalar Divide Quad-Precision [with round to Odd]"
    },
    "xscmpuqp": {
        "mnemonic": "xscmpuqp",
        "formatted_mnemonic": "xscmpuqp",
        "opcode": "111111 ...// ..... ..... 10100 00100/",
        "formatted_opcode": "111111---------------1010000100-",
        "instruction_format": "X",
        "full_name": "VSX Scalar Compare Unordered Quad-Precision"
    },
    "xststdcqp": {
        "mnemonic": "xststdcqp",
        "formatted_mnemonic": "xststdcqp",
        "opcode": "111111 ..... ..... ..... 10110 00100/",
        "formatted_opcode": "111111---------------1011000100-",
        "instruction_format": "X",
        "full_name": "VSX Scalar Test Data Class Quad-Precision"
    },
    "xsabsqp": {
        "mnemonic": "xsabsqp",
        "formatted_mnemonic": "xsabsqp",
        "opcode": "111111 ..... 00000 ..... 11001 00100/",
        "formatted_opcode": "111111-----00000-----1100100100-",
        "instruction_format": "X",
        "full_name": "VSX Scalar Absolute Quad-Precision"
    },
    "xsxexpqp": {
        "mnemonic": "xsxexpqp",
        "formatted_mnemonic": "xsxexpqp",
        "opcode": "111111 ..... 00010 ..... 11001 00100/",
        "formatted_opcode": "111111-----00010-----1100100100-",
        "instruction_format": "X",
        "full_name": "VSX Scalar Extract Exponent Quad-Precision"
    },
    "xsnabsqp": {
        "mnemonic": "xsnabsqp",
        "formatted_mnemonic": "xsnabsqp",
        "opcode": "111111 ..... 01000 ..... 11001 00100/",
        "formatted_opcode": "111111-----01000-----1100100100-",
        "instruction_format": "X",
        "full_name": "VSX Scalar Negative Absolute Quad-Precision"
    },
    "xsnegqp": {
        "mnemonic": "xsnegqp",
        "formatted_mnemonic": "xsnegqp",
        "opcode": "111111 ..... 10000 ..... 11001 00100/",
        "formatted_opcode": "111111-----10000-----1100100100-",
        "instruction_format": "X",
        "full_name": "VSX Scalar Negate Quad-Precision"
    },
    "xsxsigqp": {
        "mnemonic": "xsxsigqp",
        "formatted_mnemonic": "xsxsigqp",
        "opcode": "111111 ..... 10010 ..... 11001 00100/",
        "formatted_opcode": "111111-----10010-----1100100100-",
        "instruction_format": "X",
        "full_name": "VSX Scalar Extract Significand Quad-Precision"
    },
    "xssqrtqp[o]": {
        "mnemonic": "xssqrtqp[o]",
        "formatted_mnemonic": "xssqrtqp_o",
        "opcode": "111111 ..... 11011 ..... 11001 00100.",
        "formatted_opcode": "111111-----11011-----1100100100-",
        "instruction_format": "X",
        "full_name": "VSX Scalar Square Root Quad-Precision [with round to Odd]"
    },
    "xscvqpuwz": {
        "mnemonic": "xscvqpuwz",
        "formatted_mnemonic": "xscvqpuwz",
        "opcode": "111111 ..... 00001 ..... 11010 00100/",
        "formatted_opcode": "111111-----00001-----1101000100-",
        "instruction_format": "X",
        "full_name": "VSX Scalar Convert with round to zero Quad-Precision to Unsigned Word format"
    },
    "xscvudqp": {
        "mnemonic": "xscvudqp",
        "formatted_mnemonic": "xscvudqp",
        "opcode": "111111 ..... 00010 ..... 11010 00100/",
        "formatted_opcode": "111111-----00010-----1101000100-",
        "instruction_format": "X",
        "full_name": "VSX Scalar Convert Unsigned Doubleword to Quad-Precision format"
    },
    "xscvqpswz": {
        "mnemonic": "xscvqpswz",
        "formatted_mnemonic": "xscvqpswz",
        "opcode": "111111 ..... 01001 ..... 11010 00100/",
        "formatted_opcode": "111111-----01001-----1101000100-",
        "instruction_format": "X",
        "full_name": "VSX Scalar Convert with round to zero Quad-Precision to Signed Word format"
    },
    "xscvsdqp": {
        "mnemonic": "xscvsdqp",
        "formatted_mnemonic": "xscvsdqp",
        "opcode": "111111 ..... 01010 ..... 11010 00100/",
        "formatted_opcode": "111111-----01010-----1101000100-",
        "instruction_format": "X",
        "full_name": "VSX Scalar Convert Signed Doubleword to Quad-Precision format"
    },
    "xscvqpudz": {
        "mnemonic": "xscvqpudz",
        "formatted_mnemonic": "xscvqpudz",
        "opcode": "111111 ..... 10001 ..... 11010 00100/",
        "formatted_opcode": "111111-----10001-----1101000100-",
        "instruction_format": "X",
        "full_name": "VSX Scalar Convert with round to zero Quad-Precision to Unsigned Doubleword format"
    },
    "xscvqpdp[o]": {
        "mnemonic": "xscvqpdp[o]",
        "formatted_mnemonic": "xscvqpdp_o",
        "opcode": "111111 ..... 10100 ..... 11010 00100.",
        "formatted_opcode": "111111-----10100-----1101000100-",
        "instruction_format": "X",
        "full_name": "VSX Scalar Convert with round Quad-Precision to Double-Precision format [with round to Odd]"
    },
    "xscvdpqp": {
        "mnemonic": "xscvdpqp",
        "formatted_mnemonic": "xscvdpqp",
        "opcode": "111111 ..... 10110 ..... 11010 00100/",
        "formatted_opcode": "111111-----10110-----1101000100-",
        "instruction_format": "X",
        "full_name": "VSX Scalar Convert Double-Precision to Quad-Precision format"
    },
    "xscvqpsdz": {
        "mnemonic": "xscvqpsdz",
        "formatted_mnemonic": "xscvqpsdz",
        "opcode": "111111 ..... 11001 ..... 11010 00100/",
        "formatted_opcode": "111111-----11001-----1101000100-",
        "instruction_format": "X",
        "full_name": "VSX Scalar Convert with round to zero Quad-Precision to Signed Doubleword format"
    },
    "xsiexpqp": {
        "mnemonic": "xsiexpqp",
        "formatted_mnemonic": "xsiexpqp",
        "opcode": "111111 ..... ..... ..... 11011 00100/",
        "formatted_opcode": "111111---------------1101100100-",
        "instruction_format": "X",
        "full_name": "VSX Scalar Insert Exponent Quad-Precision"
    },
    "xsrqpi[x]": {
        "mnemonic": "xsrqpi[x]",
        "formatted_mnemonic": "xsrqpi_x",
        "opcode": "111111 ..... ////. ..... ..000 00101.",
        "formatted_opcode": "111111-----------------00000101-",
        "instruction_format": "X",
        "full_name": "VSX Scalar Round Quad-Precision to Integral [Exact]"
    },
    "xsrqpxp": {
        "mnemonic": "xsrqpxp",
        "formatted_mnemonic": "xsrqpxp",
        "opcode": "111111 ..... ////. ..... ..001 00101/",
        "formatted_opcode": "111111-----------------00100101-",
        "instruction_format": "X",
        "full_name": "VSX Scalar Round Quad-Precision to XP"
    },
    "mtfsb1[.]": {
        "mnemonic": "mtfsb1[.]",
        "formatted_mnemonic": "mtfsb1_dot",
        "opcode": "111111 ..... ///// ///// 00001 00110.",
        "formatted_opcode": "111111---------------0000100110-",
        "instruction_format": "X",
        "full_name": "Move To FPSCR Bit 1"
    },
    "mtfsb0[.]": {
        "mnemonic": "mtfsb0[.]",
        "formatted_mnemonic": "mtfsb0_dot",
        "opcode": "111111 ..... ///// ///// 00010 00110.",
        "formatted_opcode": "111111---------------0001000110-",
        "instruction_format": "X",
        "full_name": "Move To FPSCR Bit 0"
    },
    "mtfsfi[.]": {
        "mnemonic": "mtfsfi[.]",
        "formatted_mnemonic": "mtfsfi_dot",
        "opcode": "111111 ...// ////. ..../ 00100 00110.",
        "formatted_opcode": "111111---------------0010000110-",
        "instruction_format": "X",
        "full_name": "Move To FPSCR Field Immediate"
    },
    "fmrgow": {
        "mnemonic": "fmrgow",
        "formatted_mnemonic": "fmrgow",
        "opcode": "111111 ..... ..... ..... 11010 00110/",
        "formatted_opcode": "111111---------------1101000110-",
        "instruction_format": "X",
        "full_name": "Floating Merge Odd Word"
    },
    "fmrgew": {
        "mnemonic": "fmrgew",
        "formatted_mnemonic": "fmrgew",
        "opcode": "111111 ..... ..... ..... 11110 00110/",
        "formatted_opcode": "111111---------------1111000110-",
        "instruction_format": "X",
        "full_name": "Floating Merge Even Word"
    },
    "mffs[.]": {
        "mnemonic": "mffs[.]",
        "formatted_mnemonic": "mffs_dot",
        "opcode": "111111 ..... 00000 ///// 10010 00111.",
        "formatted_opcode": "111111-----00000-----1001000111-",
        "instruction_format": "X",
        "full_name": "Move From FPSCR"
    },
    "mffsce": {
        "mnemonic": "mffsce",
        "formatted_mnemonic": "mffsce",
        "opcode": "111111 ..... 00001 ///// 10010 00111/",
        "formatted_opcode": "111111-----00001-----1001000111-",
        "instruction_format": "X",
        "full_name": "Move From FPSCR & Clear Enables"
    },
    "mffscdrn": {
        "mnemonic": "mffscdrn",
        "formatted_mnemonic": "mffscdrn",
        "opcode": "111111 ..... 10100 ..... 10010 00111/",
        "formatted_opcode": "111111-----10100-----1001000111-",
        "instruction_format": "X",
        "full_name": "Move From FPSCR Control & set DRN"
    },
    "mffscdrni": {
        "mnemonic": "mffscdrni",
        "formatted_mnemonic": "mffscdrni",
        "opcode": "111111 ..... 10101 //... 10010 00111/",
        "formatted_opcode": "111111-----10101-----1001000111-",
        "instruction_format": "X",
        "full_name": "Move From FPSCR Control & set DRN Immediate"
    },
    "mffscrn": {
        "mnemonic": "mffscrn",
        "formatted_mnemonic": "mffscrn",
        "opcode": "111111 ..... 10110 ..... 10010 00111/",
        "formatted_opcode": "111111-----10110-----1001000111-",
        "instruction_format": "X",
        "full_name": "Move From FPSCR Control & set RN"
    },
    "mffscrni": {
        "mnemonic": "mffscrni",
        "formatted_mnemonic": "mffscrni",
        "opcode": "111111 ..... 10111 ///.. 10010 00111/",
        "formatted_opcode": "111111-----10111-----1001000111-",
        "instruction_format": "X",
        "full_name": "Move From FPSCR Control & set RN Immediate"
    },
    "mffsl": {
        "mnemonic": "mffsl",
        "formatted_mnemonic": "mffsl",
        "opcode": "111111 ..... 11000 ///// 10010 00111/",
        "formatted_opcode": "111111-----11000-----1001000111-",
        "instruction_format": "X",
        "full_name": "Move From FPSCR Lightweight"
    },
    "mtfsf[.]": {
        "mnemonic": "mtfsf[.]",
        "formatted_mnemonic": "mtfsf_dot",
        "opcode": "111111 ..... ..... ..... 10110 00111.",
        "formatted_opcode": "111111---------------1011000111-",
        "instruction_format": "XFL",
        "full_name": "Move To FPSCR Fields"
    },
    "fcpsgn[.]": {
        "mnemonic": "fcpsgn[.]",
        "formatted_mnemonic": "fcpsgn_dot",
        "opcode": "111111 ..... ..... ..... 00000 01000.",
        "formatted_opcode": "111111---------------0000001000-",
        "instruction_format": "X",
        "full_name": "Floating Copy Sign"
    },
    "fneg[.]": {
        "mnemonic": "fneg[.]",
        "formatted_mnemonic": "fneg_dot",
        "opcode": "111111 ..... ///// ..... 00001 01000.",
        "formatted_opcode": "111111---------------0000101000-",
        "instruction_format": "X",
        "full_name": "Floating Negate"
    },
    "fmr[.]": {
        "mnemonic": "fmr[.]",
        "formatted_mnemonic": "fmr_dot",
        "opcode": "111111 ..... ///// ..... 00010 01000.",
        "formatted_opcode": "111111---------------0001001000-",
        "instruction_format": "X",
        "full_name": "Floating Move Register"
    },
    "fnabs[.]": {
        "mnemonic": "fnabs[.]",
        "formatted_mnemonic": "fnabs_dot",
        "opcode": "111111 ..... ///// ..... 00100 01000.",
        "formatted_opcode": "111111---------------0010001000-",
        "instruction_format": "X",
        "full_name": "Floating Negative Absolute Value"
    },
    "fabs[.]": {
        "mnemonic": "fabs[.]",
        "formatted_mnemonic": "fabs_dot",
        "opcode": "111111 ..... ///// ..... 01000 01000.",
        "formatted_opcode": "111111---------------0100001000-",
        "instruction_format": "X",
        "full_name": "Floating Absolute"
    },
    "frin[.]": {
        "mnemonic": "frin[.]",
        "formatted_mnemonic": "frin_dot",
        "opcode": "111111 ..... ///// ..... 01100 01000.",
        "formatted_opcode": "111111---------------0110001000-",
        "instruction_format": "X",
        "full_name": "Floating Round To Integer Nearest"
    },
    "friz[.]": {
        "mnemonic": "friz[.]",
        "formatted_mnemonic": "friz_dot",
        "opcode": "111111 ..... ///// ..... 01101 01000.",
        "formatted_opcode": "111111---------------0110101000-",
        "instruction_format": "X",
        "full_name": "Floating Round To Integer Zero"
    },
    "frip[.]": {
        "mnemonic": "frip[.]",
        "formatted_mnemonic": "frip_dot",
        "opcode": "111111 ..... ///// ..... 01110 01000.",
        "formatted_opcode": "111111---------------0111001000-",
        "instruction_format": "X",
        "full_name": "Floating Round To Integer Plus"
    },
    "frim[.]": {
        "mnemonic": "frim[.]",
        "formatted_mnemonic": "frim_dot",
        "opcode": "111111 ..... ///// ..... 01111 01000.",
        "formatted_opcode": "111111---------------0111101000-",
        "instruction_format": "X",
        "full_name": "Floating Round To Integer Minus"
    },
    "frsp[.]": {
        "mnemonic": "frsp[.]",
        "formatted_mnemonic": "frsp_dot",
        "opcode": "111111 ..... ///// ..... 00000 01100.",
        "formatted_opcode": "111111---------------0000001100-",
        "instruction_format": "X",
        "full_name": "Floating Round to Single-Precision"
    },
    "fctiw[.]": {
        "mnemonic": "fctiw[.]",
        "formatted_mnemonic": "fctiw_dot",
        "opcode": "111111 ..... ///// ..... 00000 01110.",
        "formatted_opcode": "111111---------------0000001110-",
        "instruction_format": "X",
        "full_name": "Floating Convert with round Double-Precision To Signed Word format"
    },
    "fctiwu[.]": {
        "mnemonic": "fctiwu[.]",
        "formatted_mnemonic": "fctiwu_dot",
        "opcode": "111111 ..... ///// ..... 00100 01110.",
        "formatted_opcode": "111111---------------0010001110-",
        "instruction_format": "X",
        "full_name": "Floating Convert with round Double-Precision To Unsigned Word format"
    },
    "fctid[.]": {
        "mnemonic": "fctid[.]",
        "formatted_mnemonic": "fctid_dot",
        "opcode": "111111 ..... ///// ..... 11001 01110.",
        "formatted_opcode": "111111---------------1100101110-",
        "instruction_format": "X",
        "full_name": "Floating Convert with round Double-Precision To Signed Doubleword format"
    },
    "fcfid[.]": {
        "mnemonic": "fcfid[.]",
        "formatted_mnemonic": "fcfid_dot",
        "opcode": "111111 ..... ///// ..... 11010 01110.",
        "formatted_opcode": "111111---------------1101001110-",
        "instruction_format": "X",
        "full_name": "Floating Convert with round Signed Doubleword to Double-Precision format"
    },
    "fctidu[.]": {
        "mnemonic": "fctidu[.]",
        "formatted_mnemonic": "fctidu_dot",
        "opcode": "111111 ..... ///// ..... 11101 01110.",
        "formatted_opcode": "111111---------------1110101110-",
        "instruction_format": "X",
        "full_name": "Floating Convert with round Double-Precision To Unsigned Doubleword format"
    },
    "fcfidu[.]": {
        "mnemonic": "fcfidu[.]",
        "formatted_mnemonic": "fcfidu_dot",
        "opcode": "111111 ..... ///// ..... 11110 01110.",
        "formatted_opcode": "111111---------------1111001110-",
        "instruction_format": "X",
        "full_name": "Floating Convert with round Unsigned Doubleword to Double-Precision format"
    },
    "fctiwz[.]": {
        "mnemonic": "fctiwz[.]",
        "formatted_mnemonic": "fctiwz_dot",
        "opcode": "111111 ..... ///// ..... 00000 01111.",
        "formatted_opcode": "111111---------------0000001111-",
        "instruction_format": "X",
        "full_name": "Floating Convert with round to Zero Double-Precision To Signed Word format"
    },
    "fctiwuz[.]": {
        "mnemonic": "fctiwuz[.]",
        "formatted_mnemonic": "fctiwuz_dot",
        "opcode": "111111 ..... ///// ..... 00100 01111.",
        "formatted_opcode": "111111---------------0010001111-",
        "instruction_format": "X",
        "full_name": "Floating Convert with round to Zero Double-Precision To Unsigned Word format"
    },
    "fctidz[.]": {
        "mnemonic": "fctidz[.]",
        "formatted_mnemonic": "fctidz_dot",
        "opcode": "111111 ..... ///// ..... 11001 01111.",
        "formatted_opcode": "111111---------------1100101111-",
        "instruction_format": "X",
        "full_name": "Floating Convert with round to Zero Double-Precision To Signed Doubleword format"
    },
    "fctiduz[.]": {
        "mnemonic": "fctiduz[.]",
        "formatted_mnemonic": "fctiduz_dot",
        "opcode": "111111 ..... ///// ..... 11101 01111.",
        "formatted_opcode": "111111---------------1110101111-",
        "instruction_format": "X",
        "full_name": "Floating Convert with round to Zero Double-Precision To Unsigned Doubleword format"
    },
    "fdiv[.]": {
        "mnemonic": "fdiv[.]",
        "formatted_mnemonic": "fdiv_dot",
        "opcode": "111111 ..... ..... ..... ///// 10010.",
        "formatted_opcode": "111111--------------------10010-",
        "instruction_format": "A",
        "full_name": "Floating Divide"
    },
    "fsub[.]": {
        "mnemonic": "fsub[.]",
        "formatted_mnemonic": "fsub_dot",
        "opcode": "111111 ..... ..... ..... ///// 10100.",
        "formatted_opcode": "111111--------------------10100-",
        "instruction_format": "A",
        "full_name": "Floating Subtract"
    },
    "fadd[.]": {
        "mnemonic": "fadd[.]",
        "formatted_mnemonic": "fadd_dot",
        "opcode": "111111 ..... ..... ..... ///// 10101.",
        "formatted_opcode": "111111--------------------10101-",
        "instruction_format": "A",
        "full_name": "Floating Add"
    },
    "fsqrt[.]": {
        "mnemonic": "fsqrt[.]",
        "formatted_mnemonic": "fsqrt_dot",
        "opcode": "111111 ..... ///// ..... ///// 10110.",
        "formatted_opcode": "111111--------------------10110-",
        "instruction_format": "A",
        "full_name": "Floating Square Root"
    },
    "fsel[.]": {
        "mnemonic": "fsel[.]",
        "formatted_mnemonic": "fsel_dot",
        "opcode": "111111 ..... ..... ..... ..... 10111.",
        "formatted_opcode": "111111--------------------10111-",
        "instruction_format": "A",
        "full_name": "Floating Select"
    },
    "fre[.]": {
        "mnemonic": "fre[.]",
        "formatted_mnemonic": "fre_dot",
        "opcode": "111111 ..... ///// ..... ///// 11000.",
        "formatted_opcode": "111111--------------------11000-",
        "instruction_format": "A",
        "full_name": "Floating Reciprocal Estimate"
    },
    "fmul[.]": {
        "mnemonic": "fmul[.]",
        "formatted_mnemonic": "fmul_dot",
        "opcode": "111111 ..... ..... ///// ..... 11001.",
        "formatted_opcode": "111111--------------------11001-",
        "instruction_format": "A",
        "full_name": "Floating Multiply"
    },
    "frsqrte[.]": {
        "mnemonic": "frsqrte[.]",
        "formatted_mnemonic": "frsqrte_dot",
        "opcode": "111111 ..... ///// ..... ///// 11010.",
        "formatted_opcode": "111111--------------------11010-",
        "instruction_format": "A",
        "full_name": "Floating Reciprocal Square Root Estimate"
    },
    "fmsub[.]": {
        "mnemonic": "fmsub[.]",
        "formatted_mnemonic": "fmsub_dot",
        "opcode": "111111 ..... ..... ..... ..... 11100.",
        "formatted_opcode": "111111--------------------11100-",
        "instruction_format": "A",
        "full_name": "Floating Multiply-Subtract"
    },
    "fmadd[.]": {
        "mnemonic": "fmadd[.]",
        "formatted_mnemonic": "fmadd_dot",
        "opcode": "111111 ..... ..... ..... ..... 11101.",
        "formatted_opcode": "111111--------------------11101-",
        "instruction_format": "A",
        "full_name": "Floating Multiply-Add"
    },
    "fnmsub[.]": {
        "mnemonic": "fnmsub[.]",
        "formatted_mnemonic": "fnmsub_dot",
        "opcode": "111111 ..... ..... ..... ..... 11110.",
        "formatted_opcode": "111111--------------------11110-",
        "instruction_format": "A",
        "full_name": "Floating Negative Multiply-Subtract"
    },
    "fnmadd[.]": {
        "mnemonic": "fnmadd[.]",
        "formatted_mnemonic": "fnmadd_dot",
        "opcode": "111111 ..... ..... ..... ..... 11111.",
        "formatted_opcode": "111111--------------------11111-",
        "instruction_format": "A",
        "full_name": "Floating Negative Multiply-Add"
    }
}